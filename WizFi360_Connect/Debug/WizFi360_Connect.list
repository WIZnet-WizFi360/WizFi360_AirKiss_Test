
WizFi360_Connect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d0c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08002e18  08002e18  00012e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003140  08003140  00013140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003144  08003144  00013144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  08003148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000008cc  200001dc  08003324  000201dc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000aa8  08003324  00020aa8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000de63  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002363  00000000  00000000  0002e068  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037d1  00000000  00000000  000303cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006b0  00000000  00000000  00033ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000888  00000000  00000000  00034250  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003d35  00000000  00000000  00034ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000250f  00000000  00000000  0003880d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003ad1c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001cd4  00000000  00000000  0003ad98  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001dc 	.word	0x200001dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e00 	.word	0x08002e00

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e0 	.word	0x200001e0
 8000148:	08002e00 	.word	0x08002e00

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800015c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800015e:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <HAL_InitTick+0x3c>)
{
 8000160:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000162:	7818      	ldrb	r0, [r3, #0]
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	fbb3 f3f0 	udiv	r3, r3, r0
 800016c:	4a0b      	ldr	r2, [pc, #44]	; (800019c <HAL_InitTick+0x40>)
 800016e:	6810      	ldr	r0, [r2, #0]
 8000170:	fbb0 f0f3 	udiv	r0, r0, r3
 8000174:	f000 f88c 	bl	8000290 <HAL_SYSTICK_Config>
 8000178:	4604      	mov	r4, r0
 800017a:	b958      	cbnz	r0, 8000194 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800017c:	2d0f      	cmp	r5, #15
 800017e:	d809      	bhi.n	8000194 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000180:	4602      	mov	r2, r0
 8000182:	4629      	mov	r1, r5
 8000184:	f04f 30ff 	mov.w	r0, #4294967295
 8000188:	f000 f842 	bl	8000210 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <HAL_InitTick+0x44>)
 800018e:	4620      	mov	r0, r4
 8000190:	601d      	str	r5, [r3, #0]
 8000192:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000194:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000196:	bd38      	pop	{r3, r4, r5, pc}
 8000198:	20000000 	.word	0x20000000
 800019c:	20000008 	.word	0x20000008
 80001a0:	20000004 	.word	0x20000004

080001a4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a4:	4a07      	ldr	r2, [pc, #28]	; (80001c4 <HAL_Init+0x20>)
{
 80001a6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001aa:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001ac:	f043 0310 	orr.w	r3, r3, #16
 80001b0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001b2:	f000 f81b 	bl	80001ec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001b6:	2000      	movs	r0, #0
 80001b8:	f7ff ffd0 	bl	800015c <HAL_InitTick>
  HAL_MspInit();
 80001bc:	f001 fa3e 	bl	800163c <HAL_MspInit>
}
 80001c0:	2000      	movs	r0, #0
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	40022000 	.word	0x40022000

080001c8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001c8:	4a03      	ldr	r2, [pc, #12]	; (80001d8 <HAL_IncTick+0x10>)
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <HAL_IncTick+0x14>)
 80001cc:	6811      	ldr	r1, [r2, #0]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	440b      	add	r3, r1
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000214 	.word	0x20000214
 80001dc:	20000000 	.word	0x20000000

080001e0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001e0:	4b01      	ldr	r3, [pc, #4]	; (80001e8 <HAL_GetTick+0x8>)
 80001e2:	6818      	ldr	r0, [r3, #0]
}
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	20000214 	.word	0x20000214

080001ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001ec:	4a07      	ldr	r2, [pc, #28]	; (800020c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001ee:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001f0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001f2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001fa:	041b      	lsls	r3, r3, #16
 80001fc:	0c1b      	lsrs	r3, r3, #16
 80001fe:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000206:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000208:	60d3      	str	r3, [r2, #12]
 800020a:	4770      	bx	lr
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000210:	4b17      	ldr	r3, [pc, #92]	; (8000270 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000212:	b530      	push	{r4, r5, lr}
 8000214:	68dc      	ldr	r4, [r3, #12]
 8000216:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800021a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000220:	2b04      	cmp	r3, #4
 8000222:	bf28      	it	cs
 8000224:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000226:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000228:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800022c:	bf98      	it	ls
 800022e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000230:	fa05 f303 	lsl.w	r3, r5, r3
 8000234:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000238:	bf88      	it	hi
 800023a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023c:	4019      	ands	r1, r3
 800023e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000240:	fa05 f404 	lsl.w	r4, r5, r4
 8000244:	3c01      	subs	r4, #1
 8000246:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000248:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800024a:	ea42 0201 	orr.w	r2, r2, r1
 800024e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000252:	bfaf      	iteee	ge
 8000254:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	4b06      	ldrlt	r3, [pc, #24]	; (8000274 <HAL_NVIC_SetPriority+0x64>)
 800025a:	f000 000f 	andlt.w	r0, r0, #15
 800025e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	bfa5      	ittet	ge
 8000262:	b2d2      	uxtbge	r2, r2
 8000264:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000268:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800026e:	bd30      	pop	{r4, r5, pc}
 8000270:	e000ed00 	.word	0xe000ed00
 8000274:	e000ed14 	.word	0xe000ed14

08000278 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000278:	2301      	movs	r3, #1
 800027a:	0942      	lsrs	r2, r0, #5
 800027c:	f000 001f 	and.w	r0, r0, #31
 8000280:	fa03 f000 	lsl.w	r0, r3, r0
 8000284:	4b01      	ldr	r3, [pc, #4]	; (800028c <HAL_NVIC_EnableIRQ+0x14>)
 8000286:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800028a:	4770      	bx	lr
 800028c:	e000e100 	.word	0xe000e100

08000290 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000290:	3801      	subs	r0, #1
 8000292:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000296:	d20a      	bcs.n	80002ae <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000298:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029a:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800029c:	4a06      	ldr	r2, [pc, #24]	; (80002b8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002a6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002a8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80002ae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	e000e010 	.word	0xe000e010
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002bc:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80002c0:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002c2:	2b02      	cmp	r3, #2
 80002c4:	d003      	beq.n	80002ce <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80002c6:	2304      	movs	r3, #4
 80002c8:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80002ca:	2001      	movs	r0, #1
 80002cc:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80002ce:	6803      	ldr	r3, [r0, #0]
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	f022 020e 	bic.w	r2, r2, #14
 80002d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80002d8:	681a      	ldr	r2, [r3, #0]
 80002da:	f022 0201 	bic.w	r2, r2, #1
 80002de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80002e0:	4a18      	ldr	r2, [pc, #96]	; (8000344 <HAL_DMA_Abort_IT+0x88>)
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d01f      	beq.n	8000326 <HAL_DMA_Abort_IT+0x6a>
 80002e6:	3214      	adds	r2, #20
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d01e      	beq.n	800032a <HAL_DMA_Abort_IT+0x6e>
 80002ec:	3214      	adds	r2, #20
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d01d      	beq.n	800032e <HAL_DMA_Abort_IT+0x72>
 80002f2:	3214      	adds	r2, #20
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d01d      	beq.n	8000334 <HAL_DMA_Abort_IT+0x78>
 80002f8:	3214      	adds	r2, #20
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d01d      	beq.n	800033a <HAL_DMA_Abort_IT+0x7e>
 80002fe:	3214      	adds	r2, #20
 8000300:	4293      	cmp	r3, r2
 8000302:	bf0c      	ite	eq
 8000304:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000308:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 800030c:	4a0e      	ldr	r2, [pc, #56]	; (8000348 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800030e:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000310:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000312:	2301      	movs	r3, #1
 8000314:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000318:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 800031a:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800031e:	b17b      	cbz	r3, 8000340 <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 8000320:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000322:	4620      	mov	r0, r4
 8000324:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000326:	2301      	movs	r3, #1
 8000328:	e7f0      	b.n	800030c <HAL_DMA_Abort_IT+0x50>
 800032a:	2310      	movs	r3, #16
 800032c:	e7ee      	b.n	800030c <HAL_DMA_Abort_IT+0x50>
 800032e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000332:	e7eb      	b.n	800030c <HAL_DMA_Abort_IT+0x50>
 8000334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000338:	e7e8      	b.n	800030c <HAL_DMA_Abort_IT+0x50>
 800033a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800033e:	e7e5      	b.n	800030c <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8000340:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000342:	bd10      	pop	{r4, pc}
 8000344:	40020008 	.word	0x40020008
 8000348:	40020000 	.word	0x40020000

0800034c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800034c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000350:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000352:	4616      	mov	r6, r2
 8000354:	4b65      	ldr	r3, [pc, #404]	; (80004ec <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000356:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80004fc <HAL_GPIO_Init+0x1b0>
 800035a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000500 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800035e:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000362:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000364:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000368:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 800036c:	45a0      	cmp	r8, r4
 800036e:	d17f      	bne.n	8000470 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000370:	684d      	ldr	r5, [r1, #4]
 8000372:	2d12      	cmp	r5, #18
 8000374:	f000 80af 	beq.w	80004d6 <HAL_GPIO_Init+0x18a>
 8000378:	f200 8088 	bhi.w	800048c <HAL_GPIO_Init+0x140>
 800037c:	2d02      	cmp	r5, #2
 800037e:	f000 80a7 	beq.w	80004d0 <HAL_GPIO_Init+0x184>
 8000382:	d87c      	bhi.n	800047e <HAL_GPIO_Init+0x132>
 8000384:	2d00      	cmp	r5, #0
 8000386:	f000 808e 	beq.w	80004a6 <HAL_GPIO_Init+0x15a>
 800038a:	2d01      	cmp	r5, #1
 800038c:	f000 809e 	beq.w	80004cc <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000390:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000394:	2cff      	cmp	r4, #255	; 0xff
 8000396:	bf93      	iteet	ls
 8000398:	4682      	movls	sl, r0
 800039a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800039e:	3d08      	subhi	r5, #8
 80003a0:	f8d0 b000 	ldrls.w	fp, [r0]
 80003a4:	bf92      	itee	ls
 80003a6:	00b5      	lslls	r5, r6, #2
 80003a8:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80003ac:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003ae:	fa09 f805 	lsl.w	r8, r9, r5
 80003b2:	ea2b 0808 	bic.w	r8, fp, r8
 80003b6:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003ba:	bf88      	it	hi
 80003bc:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80003c0:	ea48 0505 	orr.w	r5, r8, r5
 80003c4:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003c8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80003cc:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80003d0:	d04e      	beq.n	8000470 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003d2:	4d47      	ldr	r5, [pc, #284]	; (80004f0 <HAL_GPIO_Init+0x1a4>)
 80003d4:	4f46      	ldr	r7, [pc, #280]	; (80004f0 <HAL_GPIO_Init+0x1a4>)
 80003d6:	69ad      	ldr	r5, [r5, #24]
 80003d8:	f026 0803 	bic.w	r8, r6, #3
 80003dc:	f045 0501 	orr.w	r5, r5, #1
 80003e0:	61bd      	str	r5, [r7, #24]
 80003e2:	69bd      	ldr	r5, [r7, #24]
 80003e4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80003e8:	f005 0501 	and.w	r5, r5, #1
 80003ec:	9501      	str	r5, [sp, #4]
 80003ee:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003f2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003f6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003f8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80003fc:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000400:	fa09 f90b 	lsl.w	r9, r9, fp
 8000404:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000408:	4d3a      	ldr	r5, [pc, #232]	; (80004f4 <HAL_GPIO_Init+0x1a8>)
 800040a:	42a8      	cmp	r0, r5
 800040c:	d068      	beq.n	80004e0 <HAL_GPIO_Init+0x194>
 800040e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000412:	42a8      	cmp	r0, r5
 8000414:	d066      	beq.n	80004e4 <HAL_GPIO_Init+0x198>
 8000416:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800041a:	42a8      	cmp	r0, r5
 800041c:	d064      	beq.n	80004e8 <HAL_GPIO_Init+0x19c>
 800041e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000422:	42a8      	cmp	r0, r5
 8000424:	bf0c      	ite	eq
 8000426:	2503      	moveq	r5, #3
 8000428:	2504      	movne	r5, #4
 800042a:	fa05 f50b 	lsl.w	r5, r5, fp
 800042e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000432:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000436:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000438:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800043c:	bf14      	ite	ne
 800043e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000440:	43a5      	biceq	r5, r4
 8000442:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000444:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000446:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800044a:	bf14      	ite	ne
 800044c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800044e:	43a5      	biceq	r5, r4
 8000450:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000452:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000454:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000458:	bf14      	ite	ne
 800045a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800045c:	43a5      	biceq	r5, r4
 800045e:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000460:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000462:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000466:	bf14      	ite	ne
 8000468:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800046a:	ea25 0404 	biceq.w	r4, r5, r4
 800046e:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000470:	3601      	adds	r6, #1
 8000472:	2e10      	cmp	r6, #16
 8000474:	f47f af73 	bne.w	800035e <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000478:	b003      	add	sp, #12
 800047a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800047e:	2d03      	cmp	r5, #3
 8000480:	d022      	beq.n	80004c8 <HAL_GPIO_Init+0x17c>
 8000482:	2d11      	cmp	r5, #17
 8000484:	d184      	bne.n	8000390 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000486:	68ca      	ldr	r2, [r1, #12]
 8000488:	3204      	adds	r2, #4
          break;
 800048a:	e781      	b.n	8000390 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800048c:	4f1a      	ldr	r7, [pc, #104]	; (80004f8 <HAL_GPIO_Init+0x1ac>)
 800048e:	42bd      	cmp	r5, r7
 8000490:	d009      	beq.n	80004a6 <HAL_GPIO_Init+0x15a>
 8000492:	d812      	bhi.n	80004ba <HAL_GPIO_Init+0x16e>
 8000494:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000504 <HAL_GPIO_Init+0x1b8>
 8000498:	454d      	cmp	r5, r9
 800049a:	d004      	beq.n	80004a6 <HAL_GPIO_Init+0x15a>
 800049c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80004a0:	454d      	cmp	r5, r9
 80004a2:	f47f af75 	bne.w	8000390 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004a6:	688a      	ldr	r2, [r1, #8]
 80004a8:	b1c2      	cbz	r2, 80004dc <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004aa:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80004ac:	bf0c      	ite	eq
 80004ae:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80004b2:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004b6:	2208      	movs	r2, #8
 80004b8:	e76a      	b.n	8000390 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80004ba:	4575      	cmp	r5, lr
 80004bc:	d0f3      	beq.n	80004a6 <HAL_GPIO_Init+0x15a>
 80004be:	4565      	cmp	r5, ip
 80004c0:	d0f1      	beq.n	80004a6 <HAL_GPIO_Init+0x15a>
 80004c2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000508 <HAL_GPIO_Init+0x1bc>
 80004c6:	e7eb      	b.n	80004a0 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004c8:	2200      	movs	r2, #0
 80004ca:	e761      	b.n	8000390 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004cc:	68ca      	ldr	r2, [r1, #12]
          break;
 80004ce:	e75f      	b.n	8000390 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004d0:	68ca      	ldr	r2, [r1, #12]
 80004d2:	3208      	adds	r2, #8
          break;
 80004d4:	e75c      	b.n	8000390 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004d6:	68ca      	ldr	r2, [r1, #12]
 80004d8:	320c      	adds	r2, #12
          break;
 80004da:	e759      	b.n	8000390 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004dc:	2204      	movs	r2, #4
 80004de:	e757      	b.n	8000390 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004e0:	2500      	movs	r5, #0
 80004e2:	e7a2      	b.n	800042a <HAL_GPIO_Init+0xde>
 80004e4:	2501      	movs	r5, #1
 80004e6:	e7a0      	b.n	800042a <HAL_GPIO_Init+0xde>
 80004e8:	2502      	movs	r5, #2
 80004ea:	e79e      	b.n	800042a <HAL_GPIO_Init+0xde>
 80004ec:	40010400 	.word	0x40010400
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40010800 	.word	0x40010800
 80004f8:	10210000 	.word	0x10210000
 80004fc:	10310000 	.word	0x10310000
 8000500:	10320000 	.word	0x10320000
 8000504:	10110000 	.word	0x10110000
 8000508:	10220000 	.word	0x10220000

0800050c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800050c:	6803      	ldr	r3, [r0, #0]
{
 800050e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000512:	07db      	lsls	r3, r3, #31
{
 8000514:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000516:	d410      	bmi.n	800053a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000518:	682b      	ldr	r3, [r5, #0]
 800051a:	079f      	lsls	r7, r3, #30
 800051c:	d45e      	bmi.n	80005dc <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800051e:	682b      	ldr	r3, [r5, #0]
 8000520:	0719      	lsls	r1, r3, #28
 8000522:	f100 8095 	bmi.w	8000650 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000526:	682b      	ldr	r3, [r5, #0]
 8000528:	075a      	lsls	r2, r3, #29
 800052a:	f100 80bf 	bmi.w	80006ac <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800052e:	69ea      	ldr	r2, [r5, #28]
 8000530:	2a00      	cmp	r2, #0
 8000532:	f040 812d 	bne.w	8000790 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000536:	2000      	movs	r0, #0
 8000538:	e014      	b.n	8000564 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800053a:	4c90      	ldr	r4, [pc, #576]	; (800077c <HAL_RCC_OscConfig+0x270>)
 800053c:	6863      	ldr	r3, [r4, #4]
 800053e:	f003 030c 	and.w	r3, r3, #12
 8000542:	2b04      	cmp	r3, #4
 8000544:	d007      	beq.n	8000556 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000546:	6863      	ldr	r3, [r4, #4]
 8000548:	f003 030c 	and.w	r3, r3, #12
 800054c:	2b08      	cmp	r3, #8
 800054e:	d10c      	bne.n	800056a <HAL_RCC_OscConfig+0x5e>
 8000550:	6863      	ldr	r3, [r4, #4]
 8000552:	03de      	lsls	r6, r3, #15
 8000554:	d509      	bpl.n	800056a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000556:	6823      	ldr	r3, [r4, #0]
 8000558:	039c      	lsls	r4, r3, #14
 800055a:	d5dd      	bpl.n	8000518 <HAL_RCC_OscConfig+0xc>
 800055c:	686b      	ldr	r3, [r5, #4]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d1da      	bne.n	8000518 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000562:	2001      	movs	r0, #1
}
 8000564:	b002      	add	sp, #8
 8000566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800056a:	686b      	ldr	r3, [r5, #4]
 800056c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000570:	d110      	bne.n	8000594 <HAL_RCC_OscConfig+0x88>
 8000572:	6823      	ldr	r3, [r4, #0]
 8000574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000578:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800057a:	f7ff fe31 	bl	80001e0 <HAL_GetTick>
 800057e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000580:	6823      	ldr	r3, [r4, #0]
 8000582:	0398      	lsls	r0, r3, #14
 8000584:	d4c8      	bmi.n	8000518 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000586:	f7ff fe2b 	bl	80001e0 <HAL_GetTick>
 800058a:	1b80      	subs	r0, r0, r6
 800058c:	2864      	cmp	r0, #100	; 0x64
 800058e:	d9f7      	bls.n	8000580 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000590:	2003      	movs	r0, #3
 8000592:	e7e7      	b.n	8000564 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000594:	b99b      	cbnz	r3, 80005be <HAL_RCC_OscConfig+0xb2>
 8000596:	6823      	ldr	r3, [r4, #0]
 8000598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800059c:	6023      	str	r3, [r4, #0]
 800059e:	6823      	ldr	r3, [r4, #0]
 80005a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005a4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80005a6:	f7ff fe1b 	bl	80001e0 <HAL_GetTick>
 80005aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005ac:	6823      	ldr	r3, [r4, #0]
 80005ae:	0399      	lsls	r1, r3, #14
 80005b0:	d5b2      	bpl.n	8000518 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005b2:	f7ff fe15 	bl	80001e0 <HAL_GetTick>
 80005b6:	1b80      	subs	r0, r0, r6
 80005b8:	2864      	cmp	r0, #100	; 0x64
 80005ba:	d9f7      	bls.n	80005ac <HAL_RCC_OscConfig+0xa0>
 80005bc:	e7e8      	b.n	8000590 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80005c2:	6823      	ldr	r3, [r4, #0]
 80005c4:	d103      	bne.n	80005ce <HAL_RCC_OscConfig+0xc2>
 80005c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005ca:	6023      	str	r3, [r4, #0]
 80005cc:	e7d1      	b.n	8000572 <HAL_RCC_OscConfig+0x66>
 80005ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005d2:	6023      	str	r3, [r4, #0]
 80005d4:	6823      	ldr	r3, [r4, #0]
 80005d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005da:	e7cd      	b.n	8000578 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005dc:	4c67      	ldr	r4, [pc, #412]	; (800077c <HAL_RCC_OscConfig+0x270>)
 80005de:	6863      	ldr	r3, [r4, #4]
 80005e0:	f013 0f0c 	tst.w	r3, #12
 80005e4:	d007      	beq.n	80005f6 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80005e6:	6863      	ldr	r3, [r4, #4]
 80005e8:	f003 030c 	and.w	r3, r3, #12
 80005ec:	2b08      	cmp	r3, #8
 80005ee:	d110      	bne.n	8000612 <HAL_RCC_OscConfig+0x106>
 80005f0:	6863      	ldr	r3, [r4, #4]
 80005f2:	03da      	lsls	r2, r3, #15
 80005f4:	d40d      	bmi.n	8000612 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005f6:	6823      	ldr	r3, [r4, #0]
 80005f8:	079b      	lsls	r3, r3, #30
 80005fa:	d502      	bpl.n	8000602 <HAL_RCC_OscConfig+0xf6>
 80005fc:	692b      	ldr	r3, [r5, #16]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d1af      	bne.n	8000562 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000602:	6823      	ldr	r3, [r4, #0]
 8000604:	696a      	ldr	r2, [r5, #20]
 8000606:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800060a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800060e:	6023      	str	r3, [r4, #0]
 8000610:	e785      	b.n	800051e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000612:	692a      	ldr	r2, [r5, #16]
 8000614:	4b5a      	ldr	r3, [pc, #360]	; (8000780 <HAL_RCC_OscConfig+0x274>)
 8000616:	b16a      	cbz	r2, 8000634 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000618:	2201      	movs	r2, #1
 800061a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800061c:	f7ff fde0 	bl	80001e0 <HAL_GetTick>
 8000620:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000622:	6823      	ldr	r3, [r4, #0]
 8000624:	079f      	lsls	r7, r3, #30
 8000626:	d4ec      	bmi.n	8000602 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000628:	f7ff fdda 	bl	80001e0 <HAL_GetTick>
 800062c:	1b80      	subs	r0, r0, r6
 800062e:	2802      	cmp	r0, #2
 8000630:	d9f7      	bls.n	8000622 <HAL_RCC_OscConfig+0x116>
 8000632:	e7ad      	b.n	8000590 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000634:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000636:	f7ff fdd3 	bl	80001e0 <HAL_GetTick>
 800063a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800063c:	6823      	ldr	r3, [r4, #0]
 800063e:	0798      	lsls	r0, r3, #30
 8000640:	f57f af6d 	bpl.w	800051e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000644:	f7ff fdcc 	bl	80001e0 <HAL_GetTick>
 8000648:	1b80      	subs	r0, r0, r6
 800064a:	2802      	cmp	r0, #2
 800064c:	d9f6      	bls.n	800063c <HAL_RCC_OscConfig+0x130>
 800064e:	e79f      	b.n	8000590 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000650:	69aa      	ldr	r2, [r5, #24]
 8000652:	4c4a      	ldr	r4, [pc, #296]	; (800077c <HAL_RCC_OscConfig+0x270>)
 8000654:	4b4b      	ldr	r3, [pc, #300]	; (8000784 <HAL_RCC_OscConfig+0x278>)
 8000656:	b1da      	cbz	r2, 8000690 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000658:	2201      	movs	r2, #1
 800065a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800065c:	f7ff fdc0 	bl	80001e0 <HAL_GetTick>
 8000660:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000664:	079b      	lsls	r3, r3, #30
 8000666:	d50d      	bpl.n	8000684 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000668:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800066c:	4b46      	ldr	r3, [pc, #280]	; (8000788 <HAL_RCC_OscConfig+0x27c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	fbb3 f3f2 	udiv	r3, r3, r2
 8000674:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000676:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000678:	9b01      	ldr	r3, [sp, #4]
 800067a:	1e5a      	subs	r2, r3, #1
 800067c:	9201      	str	r2, [sp, #4]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1f9      	bne.n	8000676 <HAL_RCC_OscConfig+0x16a>
 8000682:	e750      	b.n	8000526 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000684:	f7ff fdac 	bl	80001e0 <HAL_GetTick>
 8000688:	1b80      	subs	r0, r0, r6
 800068a:	2802      	cmp	r0, #2
 800068c:	d9e9      	bls.n	8000662 <HAL_RCC_OscConfig+0x156>
 800068e:	e77f      	b.n	8000590 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000690:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000692:	f7ff fda5 	bl	80001e0 <HAL_GetTick>
 8000696:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800069a:	079f      	lsls	r7, r3, #30
 800069c:	f57f af43 	bpl.w	8000526 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006a0:	f7ff fd9e 	bl	80001e0 <HAL_GetTick>
 80006a4:	1b80      	subs	r0, r0, r6
 80006a6:	2802      	cmp	r0, #2
 80006a8:	d9f6      	bls.n	8000698 <HAL_RCC_OscConfig+0x18c>
 80006aa:	e771      	b.n	8000590 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006ac:	4c33      	ldr	r4, [pc, #204]	; (800077c <HAL_RCC_OscConfig+0x270>)
 80006ae:	69e3      	ldr	r3, [r4, #28]
 80006b0:	00d8      	lsls	r0, r3, #3
 80006b2:	d424      	bmi.n	80006fe <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80006b4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	69e3      	ldr	r3, [r4, #28]
 80006b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006bc:	61e3      	str	r3, [r4, #28]
 80006be:	69e3      	ldr	r3, [r4, #28]
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006c8:	4e30      	ldr	r6, [pc, #192]	; (800078c <HAL_RCC_OscConfig+0x280>)
 80006ca:	6833      	ldr	r3, [r6, #0]
 80006cc:	05d9      	lsls	r1, r3, #23
 80006ce:	d518      	bpl.n	8000702 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006d0:	68eb      	ldr	r3, [r5, #12]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d126      	bne.n	8000724 <HAL_RCC_OscConfig+0x218>
 80006d6:	6a23      	ldr	r3, [r4, #32]
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80006de:	f7ff fd7f 	bl	80001e0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80006e2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80006e6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80006e8:	6a23      	ldr	r3, [r4, #32]
 80006ea:	079b      	lsls	r3, r3, #30
 80006ec:	d53f      	bpl.n	800076e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80006ee:	2f00      	cmp	r7, #0
 80006f0:	f43f af1d 	beq.w	800052e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80006f4:	69e3      	ldr	r3, [r4, #28]
 80006f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80006fa:	61e3      	str	r3, [r4, #28]
 80006fc:	e717      	b.n	800052e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80006fe:	2700      	movs	r7, #0
 8000700:	e7e2      	b.n	80006c8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000702:	6833      	ldr	r3, [r6, #0]
 8000704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000708:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800070a:	f7ff fd69 	bl	80001e0 <HAL_GetTick>
 800070e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000710:	6833      	ldr	r3, [r6, #0]
 8000712:	05da      	lsls	r2, r3, #23
 8000714:	d4dc      	bmi.n	80006d0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000716:	f7ff fd63 	bl	80001e0 <HAL_GetTick>
 800071a:	eba0 0008 	sub.w	r0, r0, r8
 800071e:	2864      	cmp	r0, #100	; 0x64
 8000720:	d9f6      	bls.n	8000710 <HAL_RCC_OscConfig+0x204>
 8000722:	e735      	b.n	8000590 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000724:	b9ab      	cbnz	r3, 8000752 <HAL_RCC_OscConfig+0x246>
 8000726:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000728:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800072c:	f023 0301 	bic.w	r3, r3, #1
 8000730:	6223      	str	r3, [r4, #32]
 8000732:	6a23      	ldr	r3, [r4, #32]
 8000734:	f023 0304 	bic.w	r3, r3, #4
 8000738:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800073a:	f7ff fd51 	bl	80001e0 <HAL_GetTick>
 800073e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000740:	6a23      	ldr	r3, [r4, #32]
 8000742:	0798      	lsls	r0, r3, #30
 8000744:	d5d3      	bpl.n	80006ee <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000746:	f7ff fd4b 	bl	80001e0 <HAL_GetTick>
 800074a:	1b80      	subs	r0, r0, r6
 800074c:	4540      	cmp	r0, r8
 800074e:	d9f7      	bls.n	8000740 <HAL_RCC_OscConfig+0x234>
 8000750:	e71e      	b.n	8000590 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000752:	2b05      	cmp	r3, #5
 8000754:	6a23      	ldr	r3, [r4, #32]
 8000756:	d103      	bne.n	8000760 <HAL_RCC_OscConfig+0x254>
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6223      	str	r3, [r4, #32]
 800075e:	e7ba      	b.n	80006d6 <HAL_RCC_OscConfig+0x1ca>
 8000760:	f023 0301 	bic.w	r3, r3, #1
 8000764:	6223      	str	r3, [r4, #32]
 8000766:	6a23      	ldr	r3, [r4, #32]
 8000768:	f023 0304 	bic.w	r3, r3, #4
 800076c:	e7b6      	b.n	80006dc <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800076e:	f7ff fd37 	bl	80001e0 <HAL_GetTick>
 8000772:	eba0 0008 	sub.w	r0, r0, r8
 8000776:	42b0      	cmp	r0, r6
 8000778:	d9b6      	bls.n	80006e8 <HAL_RCC_OscConfig+0x1dc>
 800077a:	e709      	b.n	8000590 <HAL_RCC_OscConfig+0x84>
 800077c:	40021000 	.word	0x40021000
 8000780:	42420000 	.word	0x42420000
 8000784:	42420480 	.word	0x42420480
 8000788:	20000008 	.word	0x20000008
 800078c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000790:	4c22      	ldr	r4, [pc, #136]	; (800081c <HAL_RCC_OscConfig+0x310>)
 8000792:	6863      	ldr	r3, [r4, #4]
 8000794:	f003 030c 	and.w	r3, r3, #12
 8000798:	2b08      	cmp	r3, #8
 800079a:	f43f aee2 	beq.w	8000562 <HAL_RCC_OscConfig+0x56>
 800079e:	2300      	movs	r3, #0
 80007a0:	4e1f      	ldr	r6, [pc, #124]	; (8000820 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007a2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80007a4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007a6:	d12b      	bne.n	8000800 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80007a8:	f7ff fd1a 	bl	80001e0 <HAL_GetTick>
 80007ac:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007ae:	6823      	ldr	r3, [r4, #0]
 80007b0:	0199      	lsls	r1, r3, #6
 80007b2:	d41f      	bmi.n	80007f4 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80007b4:	6a2b      	ldr	r3, [r5, #32]
 80007b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007ba:	d105      	bne.n	80007c8 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80007bc:	6862      	ldr	r2, [r4, #4]
 80007be:	68a9      	ldr	r1, [r5, #8]
 80007c0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80007c4:	430a      	orrs	r2, r1
 80007c6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80007c8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80007ca:	6862      	ldr	r2, [r4, #4]
 80007cc:	430b      	orrs	r3, r1
 80007ce:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80007d2:	4313      	orrs	r3, r2
 80007d4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80007d6:	2301      	movs	r3, #1
 80007d8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80007da:	f7ff fd01 	bl	80001e0 <HAL_GetTick>
 80007de:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80007e0:	6823      	ldr	r3, [r4, #0]
 80007e2:	019a      	lsls	r2, r3, #6
 80007e4:	f53f aea7 	bmi.w	8000536 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007e8:	f7ff fcfa 	bl	80001e0 <HAL_GetTick>
 80007ec:	1b40      	subs	r0, r0, r5
 80007ee:	2802      	cmp	r0, #2
 80007f0:	d9f6      	bls.n	80007e0 <HAL_RCC_OscConfig+0x2d4>
 80007f2:	e6cd      	b.n	8000590 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80007f4:	f7ff fcf4 	bl	80001e0 <HAL_GetTick>
 80007f8:	1bc0      	subs	r0, r0, r7
 80007fa:	2802      	cmp	r0, #2
 80007fc:	d9d7      	bls.n	80007ae <HAL_RCC_OscConfig+0x2a2>
 80007fe:	e6c7      	b.n	8000590 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000800:	f7ff fcee 	bl	80001e0 <HAL_GetTick>
 8000804:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000806:	6823      	ldr	r3, [r4, #0]
 8000808:	019b      	lsls	r3, r3, #6
 800080a:	f57f ae94 	bpl.w	8000536 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800080e:	f7ff fce7 	bl	80001e0 <HAL_GetTick>
 8000812:	1b40      	subs	r0, r0, r5
 8000814:	2802      	cmp	r0, #2
 8000816:	d9f6      	bls.n	8000806 <HAL_RCC_OscConfig+0x2fa>
 8000818:	e6ba      	b.n	8000590 <HAL_RCC_OscConfig+0x84>
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000
 8000820:	42420060 	.word	0x42420060

08000824 <HAL_RCC_GetSysClockFreq>:
{
 8000824:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000828:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800082a:	ac02      	add	r4, sp, #8
 800082c:	f103 0510 	add.w	r5, r3, #16
 8000830:	4622      	mov	r2, r4
 8000832:	6818      	ldr	r0, [r3, #0]
 8000834:	6859      	ldr	r1, [r3, #4]
 8000836:	3308      	adds	r3, #8
 8000838:	c203      	stmia	r2!, {r0, r1}
 800083a:	42ab      	cmp	r3, r5
 800083c:	4614      	mov	r4, r2
 800083e:	d1f7      	bne.n	8000830 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000840:	2301      	movs	r3, #1
 8000842:	f88d 3004 	strb.w	r3, [sp, #4]
 8000846:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000848:	4911      	ldr	r1, [pc, #68]	; (8000890 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800084a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 800084e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000850:	f003 020c 	and.w	r2, r3, #12
 8000854:	2a08      	cmp	r2, #8
 8000856:	d117      	bne.n	8000888 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000858:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800085c:	a806      	add	r0, sp, #24
 800085e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000860:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000862:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000866:	d50c      	bpl.n	8000882 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000868:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800086a:	480a      	ldr	r0, [pc, #40]	; (8000894 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800086c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000870:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000872:	aa06      	add	r2, sp, #24
 8000874:	4413      	add	r3, r2
 8000876:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800087a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800087e:	b007      	add	sp, #28
 8000880:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <HAL_RCC_GetSysClockFreq+0x74>)
 8000884:	4350      	muls	r0, r2
 8000886:	e7fa      	b.n	800087e <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 800088a:	e7f8      	b.n	800087e <HAL_RCC_GetSysClockFreq+0x5a>
 800088c:	08002e18 	.word	0x08002e18
 8000890:	40021000 	.word	0x40021000
 8000894:	007a1200 	.word	0x007a1200
 8000898:	003d0900 	.word	0x003d0900

0800089c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800089c:	4a54      	ldr	r2, [pc, #336]	; (80009f0 <HAL_RCC_ClockConfig+0x154>)
{
 800089e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008a2:	6813      	ldr	r3, [r2, #0]
{
 80008a4:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	428b      	cmp	r3, r1
{
 80008ac:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008ae:	d32a      	bcc.n	8000906 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008b0:	6829      	ldr	r1, [r5, #0]
 80008b2:	078c      	lsls	r4, r1, #30
 80008b4:	d434      	bmi.n	8000920 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80008b6:	07ca      	lsls	r2, r1, #31
 80008b8:	d447      	bmi.n	800094a <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80008ba:	4a4d      	ldr	r2, [pc, #308]	; (80009f0 <HAL_RCC_ClockConfig+0x154>)
 80008bc:	6813      	ldr	r3, [r2, #0]
 80008be:	f003 0307 	and.w	r3, r3, #7
 80008c2:	429e      	cmp	r6, r3
 80008c4:	f0c0 8082 	bcc.w	80009cc <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008c8:	682a      	ldr	r2, [r5, #0]
 80008ca:	4c4a      	ldr	r4, [pc, #296]	; (80009f4 <HAL_RCC_ClockConfig+0x158>)
 80008cc:	f012 0f04 	tst.w	r2, #4
 80008d0:	f040 8087 	bne.w	80009e2 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80008d4:	0713      	lsls	r3, r2, #28
 80008d6:	d506      	bpl.n	80008e6 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80008d8:	6863      	ldr	r3, [r4, #4]
 80008da:	692a      	ldr	r2, [r5, #16]
 80008dc:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80008e0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80008e4:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80008e6:	f7ff ff9d 	bl	8000824 <HAL_RCC_GetSysClockFreq>
 80008ea:	6863      	ldr	r3, [r4, #4]
 80008ec:	4a42      	ldr	r2, [pc, #264]	; (80009f8 <HAL_RCC_ClockConfig+0x15c>)
 80008ee:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80008f2:	5cd3      	ldrb	r3, [r2, r3]
 80008f4:	40d8      	lsrs	r0, r3
 80008f6:	4b41      	ldr	r3, [pc, #260]	; (80009fc <HAL_RCC_ClockConfig+0x160>)
 80008f8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80008fa:	2000      	movs	r0, #0
 80008fc:	f7ff fc2e 	bl	800015c <HAL_InitTick>
  return HAL_OK;
 8000900:	2000      	movs	r0, #0
}
 8000902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000906:	6813      	ldr	r3, [r2, #0]
 8000908:	f023 0307 	bic.w	r3, r3, #7
 800090c:	430b      	orrs	r3, r1
 800090e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000910:	6813      	ldr	r3, [r2, #0]
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	4299      	cmp	r1, r3
 8000918:	d0ca      	beq.n	80008b0 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800091a:	2001      	movs	r0, #1
 800091c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000920:	4b34      	ldr	r3, [pc, #208]	; (80009f4 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000922:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000926:	bf1e      	ittt	ne
 8000928:	685a      	ldrne	r2, [r3, #4]
 800092a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800092e:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000930:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000932:	bf42      	ittt	mi
 8000934:	685a      	ldrmi	r2, [r3, #4]
 8000936:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800093a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800093c:	685a      	ldr	r2, [r3, #4]
 800093e:	68a8      	ldr	r0, [r5, #8]
 8000940:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000944:	4302      	orrs	r2, r0
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	e7b5      	b.n	80008b6 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800094a:	686a      	ldr	r2, [r5, #4]
 800094c:	4c29      	ldr	r4, [pc, #164]	; (80009f4 <HAL_RCC_ClockConfig+0x158>)
 800094e:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000950:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000952:	d11c      	bne.n	800098e <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000954:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000958:	d0df      	beq.n	800091a <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800095a:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800095c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000960:	f023 0303 	bic.w	r3, r3, #3
 8000964:	4313      	orrs	r3, r2
 8000966:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000968:	f7ff fc3a 	bl	80001e0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800096c:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800096e:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000970:	2b01      	cmp	r3, #1
 8000972:	d114      	bne.n	800099e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000974:	6863      	ldr	r3, [r4, #4]
 8000976:	f003 030c 	and.w	r3, r3, #12
 800097a:	2b04      	cmp	r3, #4
 800097c:	d09d      	beq.n	80008ba <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800097e:	f7ff fc2f 	bl	80001e0 <HAL_GetTick>
 8000982:	1bc0      	subs	r0, r0, r7
 8000984:	4540      	cmp	r0, r8
 8000986:	d9f5      	bls.n	8000974 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000988:	2003      	movs	r0, #3
 800098a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800098e:	2a02      	cmp	r2, #2
 8000990:	d102      	bne.n	8000998 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000992:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000996:	e7df      	b.n	8000958 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000998:	f013 0f02 	tst.w	r3, #2
 800099c:	e7dc      	b.n	8000958 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800099e:	2b02      	cmp	r3, #2
 80009a0:	d10f      	bne.n	80009c2 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009a2:	6863      	ldr	r3, [r4, #4]
 80009a4:	f003 030c 	and.w	r3, r3, #12
 80009a8:	2b08      	cmp	r3, #8
 80009aa:	d086      	beq.n	80008ba <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009ac:	f7ff fc18 	bl	80001e0 <HAL_GetTick>
 80009b0:	1bc0      	subs	r0, r0, r7
 80009b2:	4540      	cmp	r0, r8
 80009b4:	d9f5      	bls.n	80009a2 <HAL_RCC_ClockConfig+0x106>
 80009b6:	e7e7      	b.n	8000988 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009b8:	f7ff fc12 	bl	80001e0 <HAL_GetTick>
 80009bc:	1bc0      	subs	r0, r0, r7
 80009be:	4540      	cmp	r0, r8
 80009c0:	d8e2      	bhi.n	8000988 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009c2:	6863      	ldr	r3, [r4, #4]
 80009c4:	f013 0f0c 	tst.w	r3, #12
 80009c8:	d1f6      	bne.n	80009b8 <HAL_RCC_ClockConfig+0x11c>
 80009ca:	e776      	b.n	80008ba <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009cc:	6813      	ldr	r3, [r2, #0]
 80009ce:	f023 0307 	bic.w	r3, r3, #7
 80009d2:	4333      	orrs	r3, r6
 80009d4:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009d6:	6813      	ldr	r3, [r2, #0]
 80009d8:	f003 0307 	and.w	r3, r3, #7
 80009dc:	429e      	cmp	r6, r3
 80009de:	d19c      	bne.n	800091a <HAL_RCC_ClockConfig+0x7e>
 80009e0:	e772      	b.n	80008c8 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80009e2:	6863      	ldr	r3, [r4, #4]
 80009e4:	68e9      	ldr	r1, [r5, #12]
 80009e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009ea:	430b      	orrs	r3, r1
 80009ec:	6063      	str	r3, [r4, #4]
 80009ee:	e771      	b.n	80008d4 <HAL_RCC_ClockConfig+0x38>
 80009f0:	40022000 	.word	0x40022000
 80009f4:	40021000 	.word	0x40021000
 80009f8:	08002f81 	.word	0x08002f81
 80009fc:	20000008 	.word	0x20000008

08000a00 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000a02:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8000a0a:	5cd3      	ldrb	r3, [r2, r3]
 8000a0c:	4a03      	ldr	r2, [pc, #12]	; (8000a1c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000a0e:	6810      	ldr	r0, [r2, #0]
}    
 8000a10:	40d8      	lsrs	r0, r3
 8000a12:	4770      	bx	lr
 8000a14:	40021000 	.word	0x40021000
 8000a18:	08002f91 	.word	0x08002f91
 8000a1c:	20000008 	.word	0x20000008

08000a20 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000a22:	4a05      	ldr	r2, [pc, #20]	; (8000a38 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000a2a:	5cd3      	ldrb	r3, [r2, r3]
 8000a2c:	4a03      	ldr	r2, [pc, #12]	; (8000a3c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000a2e:	6810      	ldr	r0, [r2, #0]
} 
 8000a30:	40d8      	lsrs	r0, r3
 8000a32:	4770      	bx	lr
 8000a34:	40021000 	.word	0x40021000
 8000a38:	08002f91 	.word	0x08002f91
 8000a3c:	20000008 	.word	0x20000008

08000a40 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000a40:	6803      	ldr	r3, [r0, #0]
 8000a42:	68da      	ldr	r2, [r3, #12]
 8000a44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000a48:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000a4a:	695a      	ldr	r2, [r3, #20]
 8000a4c:	f022 0201 	bic.w	r2, r2, #1
 8000a50:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000a52:	2320      	movs	r3, #32
 8000a54:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000a58:	4770      	bx	lr
	...

08000a5c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000a60:	6805      	ldr	r5, [r0, #0]
 8000a62:	68c2      	ldr	r2, [r0, #12]
 8000a64:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a66:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000a68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a70:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8000a72:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a74:	430b      	orrs	r3, r1
 8000a76:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8000a78:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8000a7c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8000a80:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8000a82:	4313      	orrs	r3, r2
 8000a84:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000a86:	696b      	ldr	r3, [r5, #20]
 8000a88:	6982      	ldr	r2, [r0, #24]
 8000a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8000a92:	4b40      	ldr	r3, [pc, #256]	; (8000b94 <UART_SetConfig+0x138>)
{
 8000a94:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8000a96:	429d      	cmp	r5, r3
 8000a98:	f04f 0419 	mov.w	r4, #25
 8000a9c:	d146      	bne.n	8000b2c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000a9e:	f7ff ffbf 	bl	8000a20 <HAL_RCC_GetPCLK2Freq>
 8000aa2:	fb04 f300 	mul.w	r3, r4, r0
 8000aa6:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000aaa:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000aae:	00b6      	lsls	r6, r6, #2
 8000ab0:	fbb3 f3f6 	udiv	r3, r3, r6
 8000ab4:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ab8:	011e      	lsls	r6, r3, #4
 8000aba:	f7ff ffb1 	bl	8000a20 <HAL_RCC_GetPCLK2Freq>
 8000abe:	4360      	muls	r0, r4
 8000ac0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	fbb0 f7f3 	udiv	r7, r0, r3
 8000aca:	f7ff ffa9 	bl	8000a20 <HAL_RCC_GetPCLK2Freq>
 8000ace:	4360      	muls	r0, r4
 8000ad0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ada:	fbb3 f3f8 	udiv	r3, r3, r8
 8000ade:	fb08 7313 	mls	r3, r8, r3, r7
 8000ae2:	011b      	lsls	r3, r3, #4
 8000ae4:	3332      	adds	r3, #50	; 0x32
 8000ae6:	fbb3 f3f8 	udiv	r3, r3, r8
 8000aea:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000aee:	f7ff ff97 	bl	8000a20 <HAL_RCC_GetPCLK2Freq>
 8000af2:	4360      	muls	r0, r4
 8000af4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000af8:	0092      	lsls	r2, r2, #2
 8000afa:	fbb0 faf2 	udiv	sl, r0, r2
 8000afe:	f7ff ff8f 	bl	8000a20 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000b02:	4360      	muls	r0, r4
 8000b04:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b0e:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b12:	fb08 a313 	mls	r3, r8, r3, sl
 8000b16:	011b      	lsls	r3, r3, #4
 8000b18:	3332      	adds	r3, #50	; 0x32
 8000b1a:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b1e:	f003 030f 	and.w	r3, r3, #15
 8000b22:	433b      	orrs	r3, r7
 8000b24:	4433      	add	r3, r6
 8000b26:	60ab      	str	r3, [r5, #8]
 8000b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2c:	f7ff ff68 	bl	8000a00 <HAL_RCC_GetPCLK1Freq>
 8000b30:	fb04 f300 	mul.w	r3, r4, r0
 8000b34:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8000b38:	f04f 0864 	mov.w	r8, #100	; 0x64
 8000b3c:	00b6      	lsls	r6, r6, #2
 8000b3e:	fbb3 f3f6 	udiv	r3, r3, r6
 8000b42:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b46:	011e      	lsls	r6, r3, #4
 8000b48:	f7ff ff5a 	bl	8000a00 <HAL_RCC_GetPCLK1Freq>
 8000b4c:	4360      	muls	r0, r4
 8000b4e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	fbb0 f7f3 	udiv	r7, r0, r3
 8000b58:	f7ff ff52 	bl	8000a00 <HAL_RCC_GetPCLK1Freq>
 8000b5c:	4360      	muls	r0, r4
 8000b5e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b68:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b6c:	fb08 7313 	mls	r3, r8, r3, r7
 8000b70:	011b      	lsls	r3, r3, #4
 8000b72:	3332      	adds	r3, #50	; 0x32
 8000b74:	fbb3 f3f8 	udiv	r3, r3, r8
 8000b78:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8000b7c:	f7ff ff40 	bl	8000a00 <HAL_RCC_GetPCLK1Freq>
 8000b80:	4360      	muls	r0, r4
 8000b82:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8000b86:	0092      	lsls	r2, r2, #2
 8000b88:	fbb0 faf2 	udiv	sl, r0, r2
 8000b8c:	f7ff ff38 	bl	8000a00 <HAL_RCC_GetPCLK1Freq>
 8000b90:	e7b7      	b.n	8000b02 <UART_SetConfig+0xa6>
 8000b92:	bf00      	nop
 8000b94:	40013800 	.word	0x40013800

08000b98 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b9a:	4604      	mov	r4, r0
 8000b9c:	460e      	mov	r6, r1
 8000b9e:	4617      	mov	r7, r2
 8000ba0:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000ba2:	6821      	ldr	r1, [r4, #0]
 8000ba4:	680b      	ldr	r3, [r1, #0]
 8000ba6:	ea36 0303 	bics.w	r3, r6, r3
 8000baa:	d101      	bne.n	8000bb0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8000bac:	2000      	movs	r0, #0
}
 8000bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000bb0:	1c6b      	adds	r3, r5, #1
 8000bb2:	d0f7      	beq.n	8000ba4 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000bb4:	b995      	cbnz	r5, 8000bdc <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000bb6:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8000bb8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000bba:	68da      	ldr	r2, [r3, #12]
 8000bbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000bc0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000bc2:	695a      	ldr	r2, [r3, #20]
 8000bc4:	f022 0201 	bic.w	r2, r2, #1
 8000bc8:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8000bca:	2320      	movs	r3, #32
 8000bcc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000bd0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000bdc:	f7ff fb00 	bl	80001e0 <HAL_GetTick>
 8000be0:	1bc0      	subs	r0, r0, r7
 8000be2:	4285      	cmp	r5, r0
 8000be4:	d2dd      	bcs.n	8000ba2 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000be6:	e7e6      	b.n	8000bb6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08000be8 <HAL_UART_Init>:
{
 8000be8:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000bea:	4604      	mov	r4, r0
 8000bec:	b340      	cbz	r0, 8000c40 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000bee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000bf2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000bf6:	b91b      	cbnz	r3, 8000c00 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000bf8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8000bfc:	f000 fd40 	bl	8001680 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8000c00:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8000c02:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000c04:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8000c08:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8000c0a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8000c0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c10:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000c12:	f7ff ff23 	bl	8000a5c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c16:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c18:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c1a:	691a      	ldr	r2, [r3, #16]
 8000c1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000c20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000c22:	695a      	ldr	r2, [r3, #20]
 8000c24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000c28:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000c2a:	68da      	ldr	r2, [r3, #12]
 8000c2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000c30:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8000c32:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c34:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000c36:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000c3a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8000c3e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000c40:	2001      	movs	r0, #1
}
 8000c42:	bd10      	pop	{r4, pc}

08000c44 <HAL_UART_Transmit>:
{
 8000c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c48:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000c4a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8000c4e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8000c50:	2b20      	cmp	r3, #32
{
 8000c52:	460d      	mov	r5, r1
 8000c54:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000c56:	d14e      	bne.n	8000cf6 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8000c58:	2900      	cmp	r1, #0
 8000c5a:	d049      	beq.n	8000cf0 <HAL_UART_Transmit+0xac>
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	d047      	beq.n	8000cf0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8000c60:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d046      	beq.n	8000cf6 <HAL_UART_Transmit+0xb2>
 8000c68:	2301      	movs	r3, #1
 8000c6a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000c72:	2321      	movs	r3, #33	; 0x21
 8000c74:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8000c78:	f7ff fab2 	bl	80001e0 <HAL_GetTick>
 8000c7c:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8000c7e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8000c82:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000c86:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	b96b      	cbnz	r3, 8000ca8 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000c8c:	463b      	mov	r3, r7
 8000c8e:	4632      	mov	r2, r6
 8000c90:	2140      	movs	r1, #64	; 0x40
 8000c92:	4620      	mov	r0, r4
 8000c94:	f7ff ff80 	bl	8000b98 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000c98:	b9a8      	cbnz	r0, 8000cc6 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8000c9a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8000c9c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8000ca0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8000ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8000ca8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000caa:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8000cac:	3b01      	subs	r3, #1
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000cb2:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cb4:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cba:	4620      	mov	r0, r4
 8000cbc:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000cbe:	d10e      	bne.n	8000cde <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cc0:	f7ff ff6a 	bl	8000b98 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000cc4:	b110      	cbz	r0, 8000ccc <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8000cc6:	2003      	movs	r0, #3
 8000cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000ccc:	882b      	ldrh	r3, [r5, #0]
 8000cce:	6822      	ldr	r2, [r4, #0]
 8000cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000cd4:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000cd6:	6923      	ldr	r3, [r4, #16]
 8000cd8:	b943      	cbnz	r3, 8000cec <HAL_UART_Transmit+0xa8>
          pData +=2U;
 8000cda:	3502      	adds	r5, #2
 8000cdc:	e7d3      	b.n	8000c86 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000cde:	f7ff ff5b 	bl	8000b98 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000ce2:	2800      	cmp	r0, #0
 8000ce4:	d1ef      	bne.n	8000cc6 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	782a      	ldrb	r2, [r5, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	3501      	adds	r5, #1
 8000cee:	e7ca      	b.n	8000c86 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8000cf6:	2002      	movs	r0, #2
}
 8000cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000cfc <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8000cfc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8000d00:	2b20      	cmp	r3, #32
 8000d02:	d120      	bne.n	8000d46 <HAL_UART_Receive_IT+0x4a>
    if((pData == NULL) || (Size == 0U))
 8000d04:	b1e9      	cbz	r1, 8000d42 <HAL_UART_Receive_IT+0x46>
 8000d06:	b1e2      	cbz	r2, 8000d42 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8000d08:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d01a      	beq.n	8000d46 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8000d10:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8000d12:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d14:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000d16:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000d18:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000d1a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8000d1e:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8000d20:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8000d22:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8000d24:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8000d28:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000d2c:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8000d2e:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8000d30:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8000d32:	f041 0101 	orr.w	r1, r1, #1
 8000d36:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8000d38:	68d1      	ldr	r1, [r2, #12]
 8000d3a:	f041 0120 	orr.w	r1, r1, #32
 8000d3e:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8000d40:	4770      	bx	lr
      return HAL_ERROR;
 8000d42:	2001      	movs	r0, #1
 8000d44:	4770      	bx	lr
    return HAL_BUSY;
 8000d46:	2002      	movs	r0, #2
}
 8000d48:	4770      	bx	lr

08000d4a <HAL_UART_TxCpltCallback>:
 8000d4a:	4770      	bx	lr

08000d4c <HAL_UART_RxCpltCallback>:
 8000d4c:	4770      	bx	lr

08000d4e <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8000d4e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8000d52:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8000d54:	2b22      	cmp	r3, #34	; 0x22
 8000d56:	d136      	bne.n	8000dc6 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000d58:	6883      	ldr	r3, [r0, #8]
 8000d5a:	6901      	ldr	r1, [r0, #16]
 8000d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d60:	6802      	ldr	r2, [r0, #0]
 8000d62:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000d64:	d123      	bne.n	8000dae <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000d66:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000d68:	b9e9      	cbnz	r1, 8000da6 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8000d6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d6e:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8000d72:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8000d74:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8000d76:	3c01      	subs	r4, #1
 8000d78:	b2a4      	uxth	r4, r4
 8000d7a:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8000d7c:	b98c      	cbnz	r4, 8000da2 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8000d7e:	6803      	ldr	r3, [r0, #0]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	f022 0220 	bic.w	r2, r2, #32
 8000d86:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8000d88:	68da      	ldr	r2, [r3, #12]
 8000d8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d8e:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8000d90:	695a      	ldr	r2, [r3, #20]
 8000d92:	f022 0201 	bic.w	r2, r2, #1
 8000d96:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8000d98:	2320      	movs	r3, #32
 8000d9a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8000d9e:	f7ff ffd5 	bl	8000d4c <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8000da2:	2000      	movs	r0, #0
}
 8000da4:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	f823 2b01 	strh.w	r2, [r3], #1
 8000dac:	e7e1      	b.n	8000d72 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000dae:	b921      	cbnz	r1, 8000dba <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8000db0:	1c59      	adds	r1, r3, #1
 8000db2:	6852      	ldr	r2, [r2, #4]
 8000db4:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8000db6:	701a      	strb	r2, [r3, #0]
 8000db8:	e7dc      	b.n	8000d74 <UART_Receive_IT+0x26>
 8000dba:	6852      	ldr	r2, [r2, #4]
 8000dbc:	1c59      	adds	r1, r3, #1
 8000dbe:	6281      	str	r1, [r0, #40]	; 0x28
 8000dc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000dc4:	e7f7      	b.n	8000db6 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8000dc6:	2002      	movs	r0, #2
 8000dc8:	bd10      	pop	{r4, pc}

08000dca <HAL_UART_ErrorCallback>:
 8000dca:	4770      	bx	lr

08000dcc <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000dcc:	6803      	ldr	r3, [r0, #0]
{
 8000dce:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000dd0:	681a      	ldr	r2, [r3, #0]
{
 8000dd2:	4604      	mov	r4, r0
  if(errorflags == RESET)
 8000dd4:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000dd6:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8000dd8:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8000dda:	d107      	bne.n	8000dec <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000ddc:	0696      	lsls	r6, r2, #26
 8000dde:	d55a      	bpl.n	8000e96 <HAL_UART_IRQHandler+0xca>
 8000de0:	068d      	lsls	r5, r1, #26
 8000de2:	d558      	bpl.n	8000e96 <HAL_UART_IRQHandler+0xca>
}
 8000de4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8000de8:	f7ff bfb1 	b.w	8000d4e <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8000dec:	f015 0501 	ands.w	r5, r5, #1
 8000df0:	d102      	bne.n	8000df8 <HAL_UART_IRQHandler+0x2c>
 8000df2:	f411 7f90 	tst.w	r1, #288	; 0x120
 8000df6:	d04e      	beq.n	8000e96 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8000df8:	07d3      	lsls	r3, r2, #31
 8000dfa:	d505      	bpl.n	8000e08 <HAL_UART_IRQHandler+0x3c>
 8000dfc:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8000dfe:	bf42      	ittt	mi
 8000e00:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8000e02:	f043 0301 	orrmi.w	r3, r3, #1
 8000e06:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e08:	0750      	lsls	r0, r2, #29
 8000e0a:	d504      	bpl.n	8000e16 <HAL_UART_IRQHandler+0x4a>
 8000e0c:	b11d      	cbz	r5, 8000e16 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8000e0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e16:	0793      	lsls	r3, r2, #30
 8000e18:	d504      	bpl.n	8000e24 <HAL_UART_IRQHandler+0x58>
 8000e1a:	b11d      	cbz	r5, 8000e24 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8000e1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000e24:	0716      	lsls	r6, r2, #28
 8000e26:	d504      	bpl.n	8000e32 <HAL_UART_IRQHandler+0x66>
 8000e28:	b11d      	cbz	r5, 8000e32 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8000e2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e2c:	f043 0308 	orr.w	r3, r3, #8
 8000e30:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8000e32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d066      	beq.n	8000f06 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000e38:	0695      	lsls	r5, r2, #26
 8000e3a:	d504      	bpl.n	8000e46 <HAL_UART_IRQHandler+0x7a>
 8000e3c:	0688      	lsls	r0, r1, #26
 8000e3e:	d502      	bpl.n	8000e46 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8000e40:	4620      	mov	r0, r4
 8000e42:	f7ff ff84 	bl	8000d4e <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000e46:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8000e48:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000e4a:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8000e4c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000e4e:	0711      	lsls	r1, r2, #28
 8000e50:	d402      	bmi.n	8000e58 <HAL_UART_IRQHandler+0x8c>
 8000e52:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000e56:	d01a      	beq.n	8000e8e <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8000e58:	f7ff fdf2 	bl	8000a40 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000e5c:	6823      	ldr	r3, [r4, #0]
 8000e5e:	695a      	ldr	r2, [r3, #20]
 8000e60:	0652      	lsls	r2, r2, #25
 8000e62:	d510      	bpl.n	8000e86 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000e64:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8000e66:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e6c:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8000e6e:	b150      	cbz	r0, 8000e86 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8000e70:	4b25      	ldr	r3, [pc, #148]	; (8000f08 <HAL_UART_IRQHandler+0x13c>)
 8000e72:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8000e74:	f7ff fa22 	bl	80002bc <HAL_DMA_Abort_IT>
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	d044      	beq.n	8000f06 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000e7c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8000e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000e82:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000e84:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8000e86:	4620      	mov	r0, r4
 8000e88:	f7ff ff9f 	bl	8000dca <HAL_UART_ErrorCallback>
 8000e8c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8000e8e:	f7ff ff9c 	bl	8000dca <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e92:	63e5      	str	r5, [r4, #60]	; 0x3c
 8000e94:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000e96:	0616      	lsls	r6, r2, #24
 8000e98:	d527      	bpl.n	8000eea <HAL_UART_IRQHandler+0x11e>
 8000e9a:	060d      	lsls	r5, r1, #24
 8000e9c:	d525      	bpl.n	8000eea <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8000e9e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8000ea2:	2a21      	cmp	r2, #33	; 0x21
 8000ea4:	d12f      	bne.n	8000f06 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ea6:	68a2      	ldr	r2, [r4, #8]
 8000ea8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000eac:	6a22      	ldr	r2, [r4, #32]
 8000eae:	d117      	bne.n	8000ee0 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8000eb0:	8811      	ldrh	r1, [r2, #0]
 8000eb2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8000eb6:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000eb8:	6921      	ldr	r1, [r4, #16]
 8000eba:	b979      	cbnz	r1, 8000edc <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8000ebc:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8000ebe:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8000ec0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	b292      	uxth	r2, r2
 8000ec6:	84e2      	strh	r2, [r4, #38]	; 0x26
 8000ec8:	b9ea      	cbnz	r2, 8000f06 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000eca:	68da      	ldr	r2, [r3, #12]
 8000ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ed0:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8000ed2:	68da      	ldr	r2, [r3, #12]
 8000ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8000edc:	3201      	adds	r2, #1
 8000ede:	e7ee      	b.n	8000ebe <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8000ee0:	1c51      	adds	r1, r2, #1
 8000ee2:	6221      	str	r1, [r4, #32]
 8000ee4:	7812      	ldrb	r2, [r2, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	e7ea      	b.n	8000ec0 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8000eea:	0650      	lsls	r0, r2, #25
 8000eec:	d50b      	bpl.n	8000f06 <HAL_UART_IRQHandler+0x13a>
 8000eee:	064a      	lsls	r2, r1, #25
 8000ef0:	d509      	bpl.n	8000f06 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8000ef2:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8000ef4:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8000ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000efa:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8000efc:	2320      	movs	r3, #32
 8000efe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8000f02:	f7ff ff22 	bl	8000d4a <HAL_UART_TxCpltCallback>
 8000f06:	bd70      	pop	{r4, r5, r6, pc}
 8000f08:	08000f0d 	.word	0x08000f0d

08000f0c <UART_DMAAbortOnError>:
{
 8000f0c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8000f0e:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f10:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8000f12:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8000f14:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8000f16:	f7ff ff58 	bl	8000dca <HAL_UART_ErrorCallback>
 8000f1a:	bd08      	pop	{r3, pc}

08000f1c <match_ok>:
	return 0;
}
uint8_t match_ok(uint8_t *data, uint16_t len)
{
	uint16_t cnt = 0;
	for(cnt=0; cnt < len; cnt++)
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	1a1a      	subs	r2, r3, r0
 8000f20:	b292      	uxth	r2, r2
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d801      	bhi.n	8000f2a <match_ok+0xe>
		if((data[cnt]=='O') && (data[cnt+1] == 'K'))
		{
				return 1;
		}
	}
	return 0;
 8000f26:	2000      	movs	r0, #0
 8000f28:	4770      	bx	lr
		if((data[cnt]=='O') && (data[cnt+1] == 'K'))
 8000f2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000f2e:	2a4f      	cmp	r2, #79	; 0x4f
 8000f30:	d1f5      	bne.n	8000f1e <match_ok+0x2>
 8000f32:	781a      	ldrb	r2, [r3, #0]
 8000f34:	2a4b      	cmp	r2, #75	; 0x4b
 8000f36:	d1f2      	bne.n	8000f1e <match_ok+0x2>
				return 1;
 8000f38:	2001      	movs	r0, #1
}
 8000f3a:	4770      	bx	lr

08000f3c <AirKissConnect>:
	}
	return 1;
}

int AirKissConnect(uint8_t *data, uint16_t len)
{
 8000f3c:	b570      	push	{r4, r5, r6, lr}
 8000f3e:	4604      	mov	r4, r0
	uint16_t cnt = 0;
	for(cnt=0; cnt < len; cnt++)
	{
		if((data[cnt]=='c') && (data[cnt+1] == 'o'))
		{
			if(memcmp(&data[cnt], "connected wifi", strlen("connected wifi")) == 0)
 8000f40:	4e0a      	ldr	r6, [pc, #40]	; (8000f6c <AirKissConnect+0x30>)
 8000f42:	1845      	adds	r5, r0, r1
	for(cnt=0; cnt < len; cnt++)
 8000f44:	42ac      	cmp	r4, r5
 8000f46:	d101      	bne.n	8000f4c <AirKissConnect+0x10>
				return 1;
			}
				
		}
	}
	return 0;
 8000f48:	2000      	movs	r0, #0
 8000f4a:	bd70      	pop	{r4, r5, r6, pc}
		if((data[cnt]=='c') && (data[cnt+1] == 'o'))
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	7803      	ldrb	r3, [r0, #0]
 8000f50:	3401      	adds	r4, #1
 8000f52:	2b63      	cmp	r3, #99	; 0x63
 8000f54:	d1f6      	bne.n	8000f44 <AirKissConnect+0x8>
 8000f56:	7823      	ldrb	r3, [r4, #0]
 8000f58:	2b6f      	cmp	r3, #111	; 0x6f
 8000f5a:	d1f3      	bne.n	8000f44 <AirKissConnect+0x8>
			if(memcmp(&data[cnt], "connected wifi", strlen("connected wifi")) == 0)
 8000f5c:	220e      	movs	r2, #14
 8000f5e:	4631      	mov	r1, r6
 8000f60:	f000 fcf2 	bl	8001948 <memcmp>
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d1ed      	bne.n	8000f44 <AirKissConnect+0x8>
				return 1;
 8000f68:	2001      	movs	r0, #1
}
 8000f6a:	bd70      	pop	{r4, r5, r6, pc}
 8000f6c:	08002efe 	.word	0x08002efe

08000f70 <RecvDataPars>:

int RecvDataPars(uint8_t *data, uint16_t len)
{
 8000f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f74:	4607      	mov	r7, r0
 8000f76:	460e      	mov	r6, r1
	uint16_t cnt = 0;
	char *ptr;
	int data1, data2;
	for(cnt=0; cnt < len; cnt++)
 8000f78:	2500      	movs	r5, #0
	{
		if(memcmp(&data[cnt], "+IPD,", strlen("+IPD,")) == 0)
 8000f7a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8001008 <RecvDataPars+0x98>
	for(cnt=0; cnt < len; cnt++)
 8000f7e:	42ae      	cmp	r6, r5
 8000f80:	b2ac      	uxth	r4, r5
 8000f82:	d102      	bne.n	8000f8a <RecvDataPars+0x1a>
				return 1;
			}
			
		}
	}
	return 0;
 8000f84:	2000      	movs	r0, #0
}
 8000f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if(memcmp(&data[cnt], "+IPD,", strlen("+IPD,")) == 0)
 8000f8a:	1978      	adds	r0, r7, r5
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	4649      	mov	r1, r9
 8000f90:	f000 fcda 	bl	8001948 <memcmp>
 8000f94:	3501      	adds	r5, #1
 8000f96:	4680      	mov	r8, r0
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	d1f0      	bne.n	8000f7e <RecvDataPars+0xe>
			cnt = cnt+strlen("+IPD,");
 8000f9c:	3405      	adds	r4, #5
			ptr = strtok(&data[cnt],",");
 8000f9e:	b2a4      	uxth	r4, r4
 8000fa0:	443c      	add	r4, r7
			data[len] = 0;
 8000fa2:	55b8      	strb	r0, [r7, r6]
			ptr = strtok(&data[cnt],",");
 8000fa4:	4914      	ldr	r1, [pc, #80]	; (8000ff8 <RecvDataPars+0x88>)
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	f000 fd90 	bl	8001acc <strtok>
			if(ptr == NULL)
 8000fac:	b970      	cbnz	r0, 8000fcc <RecvDataPars+0x5c>
				ptr = strtok((char *)&data[cnt],":");
 8000fae:	4913      	ldr	r1, [pc, #76]	; (8000ffc <RecvDataPars+0x8c>)
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	f000 fd8b 	bl	8001acc <strtok>
 8000fb6:	4604      	mov	r4, r0
				data1 = atoi(ptr);
 8000fb8:	f000 fc97 	bl	80018ea <atoi>
				printf("LEN:%d, str:%s \r\n", data1, ptr);
 8000fbc:	4622      	mov	r2, r4
 8000fbe:	4601      	mov	r1, r0
 8000fc0:	480f      	ldr	r0, [pc, #60]	; (8001000 <RecvDataPars+0x90>)
 8000fc2:	f000 fce3 	bl	800198c <iprintf>
				return 1;
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				data2 = atoi(ptr);
 8000fcc:	f000 fc8d 	bl	80018ea <atoi>
				ptr = strtok(NULL,":");
 8000fd0:	490a      	ldr	r1, [pc, #40]	; (8000ffc <RecvDataPars+0x8c>)
				data2 = atoi(ptr);
 8000fd2:	4605      	mov	r5, r0
				ptr = strtok(NULL,":");
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	f000 fd79 	bl	8001acc <strtok>
				data1 = atoi(ptr);
 8000fda:	f000 fc86 	bl	80018ea <atoi>
 8000fde:	4604      	mov	r4, r0
				ptr = strtok(NULL,":");
 8000fe0:	4906      	ldr	r1, [pc, #24]	; (8000ffc <RecvDataPars+0x8c>)
 8000fe2:	4640      	mov	r0, r8
 8000fe4:	f000 fd72 	bl	8001acc <strtok>
				printf("socket: %d LEN:%d data:%s \r\n", data2, data1, &data[len - data1]);
 8000fe8:	1b33      	subs	r3, r6, r4
 8000fea:	443b      	add	r3, r7
 8000fec:	4622      	mov	r2, r4
 8000fee:	4629      	mov	r1, r5
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <RecvDataPars+0x94>)
 8000ff2:	f000 fccb 	bl	800198c <iprintf>
 8000ff6:	e7e6      	b.n	8000fc6 <RecvDataPars+0x56>
 8000ff8:	08002f11 	.word	0x08002f11
 8000ffc:	08002f13 	.word	0x08002f13
 8001000:	08002f15 	.word	0x08002f15
 8001004:	08002f27 	.word	0x08002f27
 8001008:	08002f0d 	.word	0x08002f0d

0800100c <init_U2_data>:
	memset(&u2_data, 0, sizeof(u2_data));
 800100c:	f240 4204 	movw	r2, #1028	; 0x404
 8001010:	2100      	movs	r1, #0
 8001012:	4801      	ldr	r0, [pc, #4]	; (8001018 <init_U2_data+0xc>)
 8001014:	f000 bcb2 	b.w	800197c <memset>
 8001018:	2000061c 	.word	0x2000061c

0800101c <input_U2_data>:
	u2_data.RX_Buffer[u2_data.index++] = data;
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <input_U2_data+0x20>)
	if(data =='\r')
 800101e:	280d      	cmp	r0, #13
	u2_data.RX_Buffer[u2_data.index++] = data;
 8001020:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 8001024:	f102 0101 	add.w	r1, r2, #1
 8001028:	5498      	strb	r0, [r3, r2]
		u2_data.flag = 1;
 800102a:	bf08      	it	eq
 800102c:	2201      	moveq	r2, #1
	u2_data.RX_Buffer[u2_data.index++] = data;
 800102e:	f8a3 1402 	strh.w	r1, [r3, #1026]	; 0x402
		u2_data.flag = 1;
 8001032:	bf08      	it	eq
 8001034:	f883 2400 	strbeq.w	r2, [r3, #1024]	; 0x400
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	2000061c 	.word	0x2000061c

08001040 <Queue_Full>:
	if(WizFi_Queue.head + 1 >= MAX_BUFF)
 8001040:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8001044:	4a06      	ldr	r2, [pc, #24]	; (8001060 <Queue_Full+0x20>)
 8001046:	8813      	ldrh	r3, [r2, #0]
 8001048:	8850      	ldrh	r0, [r2, #2]
 800104a:	428b      	cmp	r3, r1
 800104c:	dd03      	ble.n	8001056 <Queue_Full+0x16>
			return 1;
 800104e:	fab0 f080 	clz	r0, r0
 8001052:	0940      	lsrs	r0, r0, #5
 8001054:	4770      	bx	lr
		if((WizFi_Queue.head + 1) == WizFi_Queue.tail)
 8001056:	3301      	adds	r3, #1
			return 1;
 8001058:	1a1b      	subs	r3, r3, r0
 800105a:	4258      	negs	r0, r3
 800105c:	4158      	adcs	r0, r3
}
 800105e:	4770      	bx	lr
 8001060:	20000218 	.word	0x20000218

08001064 <Queue_Empty>:
	if(WizFi_Queue.head >= WizFi_Queue.tail)
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <Queue_Empty+0x14>)
 8001066:	8818      	ldrh	r0, [r3, #0]
 8001068:	885b      	ldrh	r3, [r3, #2]
 800106a:	4298      	cmp	r0, r3
		return MAX_BUFF - WizFi_Queue.tail + WizFi_Queue.head;
 800106c:	bf38      	it	cc
 800106e:	f500 6080 	addcc.w	r0, r0, #1024	; 0x400
 8001072:	1ac0      	subs	r0, r0, r3
 8001074:	b280      	uxth	r0, r0
}
 8001076:	4770      	bx	lr
 8001078:	20000218 	.word	0x20000218

0800107c <EnQueue>:
{
 800107c:	b538      	push	{r3, r4, r5, lr}
	if(WizFi_Queue.head + 1 >= MAX_BUFF)
 800107e:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8001082:	4c08      	ldr	r4, [pc, #32]	; (80010a4 <EnQueue+0x28>)
{
 8001084:	4605      	mov	r5, r0
	if(WizFi_Queue.head + 1 >= MAX_BUFF)
 8001086:	8822      	ldrh	r2, [r4, #0]
 8001088:	429a      	cmp	r2, r3
		WizFi_Queue.head = 0;
 800108a:	bfc4      	itt	gt
 800108c:	2300      	movgt	r3, #0
 800108e:	8023      	strhgt	r3, [r4, #0]
	if(Queue_Full())
 8001090:	f7ff ffd6 	bl	8001040 <Queue_Full>
 8001094:	b920      	cbnz	r0, 80010a0 <EnQueue+0x24>
	WizFi_Queue.data[WizFi_Queue.head++] = input;
 8001096:	8823      	ldrh	r3, [r4, #0]
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	8022      	strh	r2, [r4, #0]
 800109c:	441c      	add	r4, r3
 800109e:	7125      	strb	r5, [r4, #4]
 80010a0:	bd38      	pop	{r3, r4, r5, pc}
 80010a2:	bf00      	nop
 80010a4:	20000218 	.word	0x20000218

080010a8 <DeQueue>:
{
 80010a8:	b508      	push	{r3, lr}
	if(WizFi_Queue.tail + 1 >= MAX_BUFF)
 80010aa:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <DeQueue+0x28>)
 80010b0:	8851      	ldrh	r1, [r2, #2]
 80010b2:	4299      	cmp	r1, r3
		WizFi_Queue.tail = 0;
 80010b4:	bfc4      	itt	gt
 80010b6:	2300      	movgt	r3, #0
 80010b8:	8053      	strhgt	r3, [r2, #2]
	if(Queue_Empty() == 0)
 80010ba:	f7ff ffd3 	bl	8001064 <Queue_Empty>
 80010be:	b128      	cbz	r0, 80010cc <DeQueue+0x24>
	return WizFi_Queue.data[WizFi_Queue.tail++];
 80010c0:	8853      	ldrh	r3, [r2, #2]
 80010c2:	1c59      	adds	r1, r3, #1
 80010c4:	8051      	strh	r1, [r2, #2]
 80010c6:	441a      	add	r2, r3
 80010c8:	7910      	ldrb	r0, [r2, #4]
 80010ca:	bd08      	pop	{r3, pc}
		return 0xFF;
 80010cc:	20ff      	movs	r0, #255	; 0xff
}
 80010ce:	bd08      	pop	{r3, pc}
 80010d0:	20000218 	.word	0x20000218

080010d4 <Recv_Proc.part.3>:
int Recv_Proc(FuncPtr func, uint16_t time)
 80010d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d6:	4606      	mov	r6, r0
 80010d8:	2400      	movs	r4, #0
 80010da:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
			while(Queue_Empty())
 80010de:	f7ff ffc1 	bl	8001064 <Queue_Empty>
 80010e2:	1c67      	adds	r7, r4, #1
 80010e4:	4605      	mov	r5, r0
 80010e6:	b2a4      	uxth	r4, r4
 80010e8:	b990      	cbnz	r0, 8001110 <Recv_Proc.part.3+0x3c>
			temp_buf[temp_index] = 0;
 80010ea:	f80d 0004 	strb.w	r0, [sp, r4]
			printf("recv[%d]%s \r\n", temp_index, temp_buf);
 80010ee:	4621      	mov	r1, r4
 80010f0:	466a      	mov	r2, sp
 80010f2:	480c      	ldr	r0, [pc, #48]	; (8001124 <Recv_Proc.part.3+0x50>)
 80010f4:	f000 fc4a 	bl	800198c <iprintf>
			if(func(temp_buf, temp_index))
 80010f8:	4621      	mov	r1, r4
 80010fa:	4668      	mov	r0, sp
 80010fc:	47b0      	blx	r6
 80010fe:	b168      	cbz	r0, 800111c <Recv_Proc.part.3+0x48>
				return 1;
 8001100:	2001      	movs	r0, #1
				Proc_cnt = 0;
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <Recv_Proc.part.3+0x54>)
 8001104:	801d      	strh	r5, [r3, #0]
				Proc_cnt1 = 0;
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <Recv_Proc.part.3+0x58>)
 8001108:	801d      	strh	r5, [r3, #0]
}
 800110a:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
 800110e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temp_buf[temp_index++] = DeQueue();
 8001110:	f7ff ffca 	bl	80010a8 <DeQueue>
 8001114:	f80d 0004 	strb.w	r0, [sp, r4]
 8001118:	463c      	mov	r4, r7
 800111a:	e7e0      	b.n	80010de <Recv_Proc.part.3+0xa>
				pre_len = 0;
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <Recv_Proc.part.3+0x5c>)
 800111e:	8018      	strh	r0, [r3, #0]
 8001120:	e7f3      	b.n	800110a <Recv_Proc.part.3+0x36>
 8001122:	bf00      	nop
 8001124:	08002f44 	.word	0x08002f44
 8001128:	200001fa 	.word	0x200001fa
 800112c:	200001fe 	.word	0x200001fe
 8001130:	20000202 	.word	0x20000202

08001134 <delay_count>:
{
 8001134:	b510      	push	{r4, lr}
	if(*time1 > 60000)
 8001136:	f64e 2460 	movw	r4, #60000	; 0xea60
	*time1 += 1;
 800113a:	8803      	ldrh	r3, [r0, #0]
 800113c:	3301      	adds	r3, #1
 800113e:	b29b      	uxth	r3, r3
	if(*time1 > 60000)
 8001140:	42a3      	cmp	r3, r4
	*time1 += 1;
 8001142:	8003      	strh	r3, [r0, #0]
	if(*time1 > 60000)
 8001144:	d801      	bhi.n	800114a <delay_count+0x16>
	return 0;
 8001146:	2000      	movs	r0, #0
 8001148:	bd10      	pop	{r4, pc}
		*time2 += 1;
 800114a:	880b      	ldrh	r3, [r1, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	800b      	strh	r3, [r1, #0]
		*time1 = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	8003      	strh	r3, [r0, #0]
		if(*time2 > set_time)
 8001154:	8808      	ldrh	r0, [r1, #0]
 8001156:	4290      	cmp	r0, r2
 8001158:	d9f5      	bls.n	8001146 <delay_count+0x12>
			*time2 = 0;
 800115a:	800b      	strh	r3, [r1, #0]
			return 1;
 800115c:	2001      	movs	r0, #1
}
 800115e:	bd10      	pop	{r4, pc}

08001160 <AT_CMD_Proc.part.2>:
int AT_CMD_Proc(uint8_t *cmd, enum cmd_send_type type, uint8_t sock, uint16_t val, uint8_t *S_data, uint8_t *re_data, uint16_t time, FuncPtr func)
 8001160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001164:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001168:	4606      	mov	r6, r0
 800116a:	460f      	mov	r7, r1
		data_len = Queue_Empty();
 800116c:	f7ff ff7a 	bl	8001064 <Queue_Empty>
 8001170:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <AT_CMD_Proc.part.2+0x98>)
		if((data_len > 0) &&(data_len == pre_len))
 8001172:	2800      	cmp	r0, #0
 8001174:	d03d      	beq.n	80011f2 <AT_CMD_Proc.part.2+0x92>
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	4282      	cmp	r2, r0
 800117a:	d13a      	bne.n	80011f2 <AT_CMD_Proc.part.2+0x92>
 800117c:	2400      	movs	r4, #0
			while(Queue_Empty())
 800117e:	f7ff ff71 	bl	8001064 <Queue_Empty>
 8001182:	f104 0801 	add.w	r8, r4, #1
 8001186:	4605      	mov	r5, r0
 8001188:	b2a4      	uxth	r4, r4
 800118a:	b9c0      	cbnz	r0, 80011be <AT_CMD_Proc.part.2+0x5e>
			printf("recv[%d]%s \r\n", temp_index, temp_buf);
 800118c:	4621      	mov	r1, r4
			temp_buf[temp_index] = 0;
 800118e:	f80d 0004 	strb.w	r0, [sp, r4]
			printf("recv[%d]%s \r\n", temp_index, temp_buf);
 8001192:	466a      	mov	r2, sp
 8001194:	4819      	ldr	r0, [pc, #100]	; (80011fc <AT_CMD_Proc.part.2+0x9c>)
 8001196:	f000 fbf9 	bl	800198c <iprintf>
			if(func(temp_buf, strlen(temp_buf)))
 800119a:	4668      	mov	r0, sp
 800119c:	f7fe ffd6 	bl	800014c <strlen>
 80011a0:	4601      	mov	r1, r0
 80011a2:	4668      	mov	r0, sp
 80011a4:	47b8      	blx	r7
 80011a6:	b180      	cbz	r0, 80011ca <AT_CMD_Proc.part.2+0x6a>
				return 1;
 80011a8:	2001      	movs	r0, #1
				req = 0;
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <AT_CMD_Proc.part.2+0xa0>)
 80011ac:	701d      	strb	r5, [r3, #0]
				Proc_cnt = 0;
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <AT_CMD_Proc.part.2+0xa4>)
 80011b0:	801d      	strh	r5, [r3, #0]
				Proc_cnt1 = 0;
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <AT_CMD_Proc.part.2+0xa8>)
 80011b4:	801d      	strh	r5, [r3, #0]
}
 80011b6:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
 80011ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				temp_buf[temp_index++] = DeQueue();
 80011be:	f7ff ff73 	bl	80010a8 <DeQueue>
 80011c2:	f80d 0004 	strb.w	r0, [sp, r4]
 80011c6:	4644      	mov	r4, r8
 80011c8:	e7d9      	b.n	800117e <AT_CMD_Proc.part.2+0x1e>
				retry++;
 80011ca:	4a10      	ldr	r2, [pc, #64]	; (800120c <AT_CMD_Proc.part.2+0xac>)
 80011cc:	7813      	ldrb	r3, [r2, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	7013      	strb	r3, [r2, #0]
		if(delay_count(&Proc_cnt, &Proc_cnt1, time))
 80011d2:	4632      	mov	r2, r6
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <AT_CMD_Proc.part.2+0xa8>)
 80011d6:	480b      	ldr	r0, [pc, #44]	; (8001204 <AT_CMD_Proc.part.2+0xa4>)
 80011d8:	f7ff ffac 	bl	8001134 <delay_count>
 80011dc:	2200      	movs	r2, #0
 80011de:	2800      	cmp	r0, #0
 80011e0:	d0e9      	beq.n	80011b6 <AT_CMD_Proc.part.2+0x56>
			req = 0;
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <AT_CMD_Proc.part.2+0xa0>)
			retry++;
 80011e4:	4909      	ldr	r1, [pc, #36]	; (800120c <AT_CMD_Proc.part.2+0xac>)
			req = 0;
 80011e6:	701a      	strb	r2, [r3, #0]
			retry++;
 80011e8:	780b      	ldrb	r3, [r1, #0]
	return 0;
 80011ea:	4610      	mov	r0, r2
			retry++;
 80011ec:	3301      	adds	r3, #1
 80011ee:	700b      	strb	r3, [r1, #0]
 80011f0:	e7e1      	b.n	80011b6 <AT_CMD_Proc.part.2+0x56>
			pre_len = data_len;
 80011f2:	7018      	strb	r0, [r3, #0]
 80011f4:	e7ed      	b.n	80011d2 <AT_CMD_Proc.part.2+0x72>
 80011f6:	bf00      	nop
 80011f8:	20000200 	.word	0x20000200
 80011fc:	08002f44 	.word	0x08002f44
 8001200:	20000204 	.word	0x20000204
 8001204:	200001f8 	.word	0x200001f8
 8001208:	200001fc 	.word	0x200001fc
 800120c:	20000205 	.word	0x20000205

08001210 <AT_CMD_send>:
{
 8001210:	b510      	push	{r4, lr}
 8001212:	b0c2      	sub	sp, #264	; 0x108
	if(type == none)
 8001214:	b929      	cbnz	r1, 8001222 <AT_CMD_send+0x12>
		len = sprintf((char*)cmd_buff,"AT+%s=%d\r\n", cmd, val);
 8001216:	4602      	mov	r2, r0
 8001218:	491e      	ldr	r1, [pc, #120]	; (8001294 <AT_CMD_send+0x84>)
		len = sprintf((char*)cmd_buff,"AT+%s=%s\r\n", cmd, S_data);
 800121a:	a802      	add	r0, sp, #8
 800121c:	f000 fc32 	bl	8001a84 <siprintf>
 8001220:	e006      	b.n	8001230 <AT_CMD_send+0x20>
	else if(type == noneval)
 8001222:	2901      	cmp	r1, #1
 8001224:	d111      	bne.n	800124a <AT_CMD_send+0x3a>
		len = sprintf((char*)cmd_buff,"AT+%s\r\n", cmd);
 8001226:	4602      	mov	r2, r0
 8001228:	491b      	ldr	r1, [pc, #108]	; (8001298 <AT_CMD_send+0x88>)
 800122a:	a802      	add	r0, sp, #8
 800122c:	f000 fc2a 	bl	8001a84 <siprintf>
		len = sprintf((char*)cmd_buff,"AT+%s=%d,%d\r\n", cmd, sock, val);
 8001230:	4604      	mov	r4, r0
	printf("send[%d]%s\r\n", len, cmd_buff);
 8001232:	aa02      	add	r2, sp, #8
 8001234:	4601      	mov	r1, r0
 8001236:	4819      	ldr	r0, [pc, #100]	; (800129c <AT_CMD_send+0x8c>)
 8001238:	f000 fba8 	bl	800198c <iprintf>
	send_U_message(cmd_buff, len);
 800123c:	a802      	add	r0, sp, #8
 800123e:	b2a1      	uxth	r1, r4
 8001240:	f000 f974 	bl	800152c <send_U_message>
}
 8001244:	4620      	mov	r0, r4
 8001246:	b042      	add	sp, #264	; 0x108
 8001248:	bd10      	pop	{r4, pc}
	else if(type == CUR_int)
 800124a:	2902      	cmp	r1, #2
 800124c:	d102      	bne.n	8001254 <AT_CMD_send+0x44>
		len = sprintf((char*)cmd_buff,"AT+%s_CUR=%d\r\n", cmd, val);
 800124e:	4602      	mov	r2, r0
 8001250:	4913      	ldr	r1, [pc, #76]	; (80012a0 <AT_CMD_send+0x90>)
 8001252:	e7e2      	b.n	800121a <AT_CMD_send+0xa>
	else if(type == DEF_int)
 8001254:	2903      	cmp	r1, #3
 8001256:	d102      	bne.n	800125e <AT_CMD_send+0x4e>
		len = sprintf((char*)cmd_buff,"AT+%s_DEF=%d\r\n", cmd, val);
 8001258:	4602      	mov	r2, r0
 800125a:	4912      	ldr	r1, [pc, #72]	; (80012a4 <AT_CMD_send+0x94>)
 800125c:	e7dd      	b.n	800121a <AT_CMD_send+0xa>
	else if(type == CUR_str)
 800125e:	2904      	cmp	r1, #4
 8001260:	d103      	bne.n	800126a <AT_CMD_send+0x5a>
		len = sprintf((char*)cmd_buff,"AT+%s_CUR=%s\r\n", cmd, S_data);
 8001262:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8001264:	4602      	mov	r2, r0
 8001266:	4910      	ldr	r1, [pc, #64]	; (80012a8 <AT_CMD_send+0x98>)
 8001268:	e7d7      	b.n	800121a <AT_CMD_send+0xa>
	else if(type == DEF_str)
 800126a:	2905      	cmp	r1, #5
 800126c:	d103      	bne.n	8001276 <AT_CMD_send+0x66>
		len = sprintf((char*)cmd_buff,"AT+%s_DEF=%s\r\n", cmd, S_data);
 800126e:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8001270:	4602      	mov	r2, r0
 8001272:	490e      	ldr	r1, [pc, #56]	; (80012ac <AT_CMD_send+0x9c>)
 8001274:	e7d1      	b.n	800121a <AT_CMD_send+0xa>
	else if(type == none_str)
 8001276:	2906      	cmp	r1, #6
 8001278:	d103      	bne.n	8001282 <AT_CMD_send+0x72>
		len = sprintf((char*)cmd_buff,"AT+%s=%s\r\n", cmd, S_data);
 800127a:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800127c:	4602      	mov	r2, r0
 800127e:	490c      	ldr	r1, [pc, #48]	; (80012b0 <AT_CMD_send+0xa0>)
 8001280:	e7cb      	b.n	800121a <AT_CMD_send+0xa>
		len = sprintf((char*)cmd_buff,"AT+%s=%d,%d\r\n", cmd, sock, val);
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	490b      	ldr	r1, [pc, #44]	; (80012b4 <AT_CMD_send+0xa4>)
 8001286:	4613      	mov	r3, r2
 8001288:	4602      	mov	r2, r0
 800128a:	a802      	add	r0, sp, #8
 800128c:	f000 fbfa 	bl	8001a84 <siprintf>
 8001290:	e7ce      	b.n	8001230 <AT_CMD_send+0x20>
 8001292:	bf00      	nop
 8001294:	08002e60 	.word	0x08002e60
 8001298:	08002e6b 	.word	0x08002e6b
 800129c:	08002ec8 	.word	0x08002ec8
 80012a0:	08002e73 	.word	0x08002e73
 80012a4:	08002e82 	.word	0x08002e82
 80012a8:	08002e91 	.word	0x08002e91
 80012ac:	08002ea0 	.word	0x08002ea0
 80012b0:	08002eaf 	.word	0x08002eaf
 80012b4:	08002eba 	.word	0x08002eba

080012b8 <AT_CMD_Proc>:
{
 80012b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(req == 0)
 80012ba:	4d14      	ldr	r5, [pc, #80]	; (800130c <AT_CMD_Proc+0x54>)
{
 80012bc:	f8dd e020 	ldr.w	lr, [sp, #32]
	if(req == 0)
 80012c0:	782c      	ldrb	r4, [r5, #0]
{
 80012c2:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
 80012c6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
	if(req == 0)
 80012c8:	b964      	cbnz	r4, 80012e4 <AT_CMD_Proc+0x2c>
		AT_CMD_send(cmd, type, sock, val, S_data);
 80012ca:	f8cd e000 	str.w	lr, [sp]
 80012ce:	f7ff ff9f 	bl	8001210 <AT_CMD_send>
		req = 1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	702b      	strb	r3, [r5, #0]
		Proc_cnt = 0;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <AT_CMD_Proc+0x58>)
 80012d8:	801c      	strh	r4, [r3, #0]
		Proc_cnt1 = 0;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <AT_CMD_Proc+0x5c>)
 80012dc:	801c      	strh	r4, [r3, #0]
}
 80012de:	2000      	movs	r0, #0
 80012e0:	b003      	add	sp, #12
 80012e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(req == 1)
 80012e4:	2c01      	cmp	r4, #1
 80012e6:	d109      	bne.n	80012fc <AT_CMD_Proc+0x44>
		if(delay_count(&Proc_cnt, &Proc_cnt1, 3))
 80012e8:	2203      	movs	r2, #3
 80012ea:	490a      	ldr	r1, [pc, #40]	; (8001314 <AT_CMD_Proc+0x5c>)
 80012ec:	4808      	ldr	r0, [pc, #32]	; (8001310 <AT_CMD_Proc+0x58>)
 80012ee:	f7ff ff21 	bl	8001134 <delay_count>
 80012f2:	2800      	cmp	r0, #0
 80012f4:	d0f3      	beq.n	80012de <AT_CMD_Proc+0x26>
			req = 2;
 80012f6:	2302      	movs	r3, #2
 80012f8:	702b      	strb	r3, [r5, #0]
 80012fa:	e7f0      	b.n	80012de <AT_CMD_Proc+0x26>
 80012fc:	4639      	mov	r1, r7
 80012fe:	4630      	mov	r0, r6
}
 8001300:	b003      	add	sp, #12
 8001302:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001306:	f7ff bf2b 	b.w	8001160 <AT_CMD_Proc.part.2>
 800130a:	bf00      	nop
 800130c:	20000204 	.word	0x20000204
 8001310:	200001f8 	.word	0x200001f8
 8001314:	200001fc 	.word	0x200001fc

08001318 <Recv_Proc>:
{
 8001318:	b510      	push	{r4, lr}
	if(delay_count(&Proc_cnt, &Proc_cnt1, time))
 800131a:	460a      	mov	r2, r1
{
 800131c:	4604      	mov	r4, r0
	if(delay_count(&Proc_cnt, &Proc_cnt1, time))
 800131e:	490a      	ldr	r1, [pc, #40]	; (8001348 <Recv_Proc+0x30>)
 8001320:	480a      	ldr	r0, [pc, #40]	; (800134c <Recv_Proc+0x34>)
 8001322:	f7ff ff07 	bl	8001134 <delay_count>
 8001326:	b160      	cbz	r0, 8001342 <Recv_Proc+0x2a>
		data_len = Queue_Empty();
 8001328:	f7ff fe9c 	bl	8001064 <Queue_Empty>
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <Recv_Proc+0x38>)
		if((data_len > 0) &&(data_len == pre_len))
 800132e:	b138      	cbz	r0, 8001340 <Recv_Proc+0x28>
 8001330:	881a      	ldrh	r2, [r3, #0]
 8001332:	4282      	cmp	r2, r0
 8001334:	d104      	bne.n	8001340 <Recv_Proc+0x28>
 8001336:	4620      	mov	r0, r4
}
 8001338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800133c:	f7ff beca 	b.w	80010d4 <Recv_Proc.part.3>
			pre_len = data_len;
 8001340:	8018      	strh	r0, [r3, #0]
}
 8001342:	2000      	movs	r0, #0
 8001344:	bd10      	pop	{r4, pc}
 8001346:	bf00      	nop
 8001348:	200001fe 	.word	0x200001fe
 800134c:	200001fa 	.word	0x200001fa
 8001350:	20000202 	.word	0x20000202

08001354 <AT_AirKiss_Proc>:
{
 8001354:	b530      	push	{r4, r5, lr}
	switch(seq)
 8001356:	4d2f      	ldr	r5, [pc, #188]	; (8001414 <AT_AirKiss_Proc+0xc0>)
{
 8001358:	b085      	sub	sp, #20
	switch(seq)
 800135a:	782b      	ldrb	r3, [r5, #0]
 800135c:	2b06      	cmp	r3, #6
 800135e:	d82e      	bhi.n	80013be <AT_AirKiss_Proc+0x6a>
 8001360:	e8df f003 	tbb	[pc, r3]
 8001364:	31221604 	.word	0x31221604
 8001368:	493d      	.short	0x493d
 800136a:	56          	.byte	0x56
 800136b:	00          	.byte	0x00
		if(AT_CMD_Proc("CWMODE", CUR_int, 0, 1, 0, 0, 10, match_ok))
 800136c:	4b2a      	ldr	r3, [pc, #168]	; (8001418 <AT_AirKiss_Proc+0xc4>)
 800136e:	2400      	movs	r4, #0
 8001370:	9303      	str	r3, [sp, #12]
 8001372:	230a      	movs	r3, #10
 8001374:	4622      	mov	r2, r4
 8001376:	9302      	str	r3, [sp, #8]
 8001378:	2102      	movs	r1, #2
 800137a:	2301      	movs	r3, #1
 800137c:	4827      	ldr	r0, [pc, #156]	; (800141c <AT_AirKiss_Proc+0xc8>)
 800137e:	9401      	str	r4, [sp, #4]
 8001380:	9400      	str	r4, [sp, #0]
		if(AT_CMD_Proc("CIPSERVER", none_soc, 1, 5001, 0, 0, 100, match_ok))
 8001382:	f7ff ff99 	bl	80012b8 <AT_CMD_Proc>
 8001386:	b1d0      	cbz	r0, 80013be <AT_AirKiss_Proc+0x6a>
			seq++;
 8001388:	782b      	ldrb	r3, [r5, #0]
 800138a:	3301      	adds	r3, #1
 800138c:	702b      	strb	r3, [r5, #0]
 800138e:	e017      	b.n	80013c0 <AT_AirKiss_Proc+0x6c>
		if(AT_CMD_Proc("CWSTARTSMART", none, 0, 2, 0, 0, 100, match_ok))
 8001390:	4b21      	ldr	r3, [pc, #132]	; (8001418 <AT_AirKiss_Proc+0xc4>)
 8001392:	2400      	movs	r4, #0
 8001394:	9303      	str	r3, [sp, #12]
 8001396:	2364      	movs	r3, #100	; 0x64
 8001398:	9401      	str	r4, [sp, #4]
 800139a:	9302      	str	r3, [sp, #8]
 800139c:	9400      	str	r4, [sp, #0]
 800139e:	2302      	movs	r3, #2
 80013a0:	4622      	mov	r2, r4
 80013a2:	4621      	mov	r1, r4
 80013a4:	481e      	ldr	r0, [pc, #120]	; (8001420 <AT_AirKiss_Proc+0xcc>)
 80013a6:	e7ec      	b.n	8001382 <AT_AirKiss_Proc+0x2e>
		if(Recv_Proc(AirKissConnect, 3))
 80013a8:	2103      	movs	r1, #3
 80013aa:	481e      	ldr	r0, [pc, #120]	; (8001424 <AT_AirKiss_Proc+0xd0>)
 80013ac:	f7ff ffb4 	bl	8001318 <Recv_Proc>
 80013b0:	b128      	cbz	r0, 80013be <AT_AirKiss_Proc+0x6a>
			printf("AirKiss Success !!\r\n");
 80013b2:	481d      	ldr	r0, [pc, #116]	; (8001428 <AT_AirKiss_Proc+0xd4>)
 80013b4:	f000 fb5e 	bl	8001a74 <puts>
			seq++;
 80013b8:	782b      	ldrb	r3, [r5, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	702b      	strb	r3, [r5, #0]
	return 0;
 80013be:	2400      	movs	r4, #0
}
 80013c0:	4620      	mov	r0, r4
 80013c2:	b005      	add	sp, #20
 80013c4:	bd30      	pop	{r4, r5, pc}
		if(AT_CMD_Proc("CIFSR", noneval, 0, 0, 0, 0, 10, match_ok))
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <AT_AirKiss_Proc+0xc4>)
 80013c8:	2400      	movs	r4, #0
 80013ca:	9303      	str	r3, [sp, #12]
 80013cc:	230a      	movs	r3, #10
 80013ce:	9401      	str	r4, [sp, #4]
 80013d0:	9302      	str	r3, [sp, #8]
 80013d2:	9400      	str	r4, [sp, #0]
 80013d4:	4623      	mov	r3, r4
 80013d6:	4622      	mov	r2, r4
 80013d8:	2101      	movs	r1, #1
 80013da:	4814      	ldr	r0, [pc, #80]	; (800142c <AT_AirKiss_Proc+0xd8>)
 80013dc:	e7d1      	b.n	8001382 <AT_AirKiss_Proc+0x2e>
		if(AT_CMD_Proc("CIPMUX", none, 0, 1, 0, 0, 10, match_ok))
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <AT_AirKiss_Proc+0xc4>)
 80013e0:	2400      	movs	r4, #0
 80013e2:	9303      	str	r3, [sp, #12]
 80013e4:	230a      	movs	r3, #10
 80013e6:	9401      	str	r4, [sp, #4]
 80013e8:	9302      	str	r3, [sp, #8]
 80013ea:	9400      	str	r4, [sp, #0]
 80013ec:	2301      	movs	r3, #1
 80013ee:	4622      	mov	r2, r4
 80013f0:	4621      	mov	r1, r4
 80013f2:	480f      	ldr	r0, [pc, #60]	; (8001430 <AT_AirKiss_Proc+0xdc>)
 80013f4:	e7c5      	b.n	8001382 <AT_AirKiss_Proc+0x2e>
		if(AT_CMD_Proc("CIPSERVER", none_soc, 1, 5001, 0, 0, 100, match_ok))
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <AT_AirKiss_Proc+0xc4>)
 80013f8:	2400      	movs	r4, #0
 80013fa:	9303      	str	r3, [sp, #12]
 80013fc:	2364      	movs	r3, #100	; 0x64
 80013fe:	9401      	str	r4, [sp, #4]
 8001400:	9302      	str	r3, [sp, #8]
 8001402:	9400      	str	r4, [sp, #0]
 8001404:	f241 3389 	movw	r3, #5001	; 0x1389
 8001408:	2201      	movs	r2, #1
 800140a:	2107      	movs	r1, #7
 800140c:	4809      	ldr	r0, [pc, #36]	; (8001434 <AT_AirKiss_Proc+0xe0>)
 800140e:	e7b8      	b.n	8001382 <AT_AirKiss_Proc+0x2e>
		return 1;
 8001410:	2401      	movs	r4, #1
 8001412:	e7d5      	b.n	80013c0 <AT_AirKiss_Proc+0x6c>
 8001414:	20000206 	.word	0x20000206
 8001418:	08000f1d 	.word	0x08000f1d
 800141c:	08002ed5 	.word	0x08002ed5
 8001420:	08002e28 	.word	0x08002e28
 8001424:	08000f3d 	.word	0x08000f3d
 8001428:	08002e35 	.word	0x08002e35
 800142c:	08002e49 	.word	0x08002e49
 8001430:	08002e4f 	.word	0x08002e4f
 8001434:	08002e56 	.word	0x08002e56

08001438 <data_Proc>:
{
 8001438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800143c:	4689      	mov	r9, r1
 800143e:	b085      	sub	sp, #20
 8001440:	4615      	mov	r5, r2
 8001442:	461f      	mov	r7, r3
	if(mode)
 8001444:	b328      	cbz	r0, 8001492 <data_Proc+0x5a>
			status = AT_CMD_Proc("CIPSEND", none_soc, sock, val, 0, 0, 10, match_ok);
 8001446:	f04f 0a0a 	mov.w	sl, #10
 800144a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80014b0 <data_Proc+0x78>
 800144e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80014b4 <data_Proc+0x7c>
 8001452:	2400      	movs	r4, #0
 8001454:	f8cd b00c 	str.w	fp, [sp, #12]
 8001458:	f8cd a008 	str.w	sl, [sp, #8]
 800145c:	9401      	str	r4, [sp, #4]
 800145e:	9400      	str	r4, [sp, #0]
 8001460:	462b      	mov	r3, r5
 8001462:	464a      	mov	r2, r9
 8001464:	2107      	movs	r1, #7
 8001466:	4640      	mov	r0, r8
 8001468:	f7ff ff26 	bl	80012b8 <AT_CMD_Proc>
 800146c:	b2c6      	uxtb	r6, r0
		while(status == 0)
 800146e:	2e00      	cmp	r6, #0
 8001470:	d0ef      	beq.n	8001452 <data_Proc+0x1a>
		if(status == 1)
 8001472:	2e01      	cmp	r6, #1
 8001474:	d115      	bne.n	80014a2 <data_Proc+0x6a>
			send_U_message(S_data, val);
 8001476:	4629      	mov	r1, r5
 8001478:	4638      	mov	r0, r7
 800147a:	f000 f857 	bl	800152c <send_U_message>
			S_data[val] = 0;
 800147e:	557c      	strb	r4, [r7, r5]
			printf("send data[%d]%s\r\n",val, S_data);
 8001480:	463a      	mov	r2, r7
 8001482:	4629      	mov	r1, r5
 8001484:	4808      	ldr	r0, [pc, #32]	; (80014a8 <data_Proc+0x70>)
 8001486:	f000 fa81 	bl	800198c <iprintf>
 800148a:	4630      	mov	r0, r6
}
 800148c:	b005      	add	sp, #20
 800148e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(Recv_Proc(RecvDataPars, 3))
 8001492:	2103      	movs	r1, #3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <data_Proc+0x74>)
 8001496:	f7ff ff3f 	bl	8001318 <Recv_Proc>
 800149a:	3000      	adds	r0, #0
 800149c:	bf18      	it	ne
 800149e:	2001      	movne	r0, #1
 80014a0:	e7f4      	b.n	800148c <data_Proc+0x54>
		return 0;
 80014a2:	4620      	mov	r0, r4
 80014a4:	e7f2      	b.n	800148c <data_Proc+0x54>
 80014a6:	bf00      	nop
 80014a8:	08002f65 	.word	0x08002f65
 80014ac:	08000f71 	.word	0x08000f71
 80014b0:	08000f1d 	.word	0x08000f1d
 80014b4:	08002f5d 	.word	0x08002f5d

080014b8 <U2_flag>:
{
 80014b8:	b570      	push	{r4, r5, r6, lr}
	uint8_t u2_data_flag = u2_data.flag;
 80014ba:	4c10      	ldr	r4, [pc, #64]	; (80014fc <U2_flag+0x44>)
 80014bc:	f894 5400 	ldrb.w	r5, [r4, #1024]	; 0x400
	if(u2_data_flag)
 80014c0:	b1a5      	cbz	r5, 80014ec <U2_flag+0x34>
		u2_data.flag = 0;
 80014c2:	2600      	movs	r6, #0
		u2_data.RX_Buffer[u2_data.index] = 0;
 80014c4:	f8b4 1402 	ldrh.w	r1, [r4, #1026]	; 0x402
		printf("u2[%d]%s\r\n",u2_data.index, u2_data.RX_Buffer);
 80014c8:	4622      	mov	r2, r4
 80014ca:	480d      	ldr	r0, [pc, #52]	; (8001500 <U2_flag+0x48>)
		u2_data.RX_Buffer[u2_data.index] = 0;
 80014cc:	5466      	strb	r6, [r4, r1]
		u2_data.flag = 0;
 80014ce:	f884 6400 	strb.w	r6, [r4, #1024]	; 0x400
		printf("u2[%d]%s\r\n",u2_data.index, u2_data.RX_Buffer);
 80014d2:	f000 fa5b 	bl	800198c <iprintf>
		data_Proc(1, 0, u2_data.index, u2_data.RX_Buffer);
 80014d6:	4623      	mov	r3, r4
 80014d8:	f8b4 2402 	ldrh.w	r2, [r4, #1026]	; 0x402
 80014dc:	4631      	mov	r1, r6
 80014de:	2001      	movs	r0, #1
 80014e0:	f7ff ffaa 	bl	8001438 <data_Proc>
		u2_data.index = 0;
 80014e4:	f8a4 6402 	strh.w	r6, [r4, #1026]	; 0x402
}
 80014e8:	4628      	mov	r0, r5
 80014ea:	bd70      	pop	{r4, r5, r6, pc}
		data_Proc(0, 0, 0, 0);
 80014ec:	462b      	mov	r3, r5
 80014ee:	462a      	mov	r2, r5
 80014f0:	4629      	mov	r1, r5
 80014f2:	4628      	mov	r0, r5
 80014f4:	f7ff ffa0 	bl	8001438 <data_Proc>
 80014f8:	e7f6      	b.n	80014e8 <U2_flag+0x30>
 80014fa:	bf00      	nop
 80014fc:	2000061c 	.word	0x2000061c
 8001500:	08002f52 	.word	0x08002f52

08001504 <_write>:
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
uint8_t rxData;
//struct us_data US_2;
int _write(int fd, char *str, int len)
{
 8001504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001506:	460e      	mov	r6, r1
 8001508:	4615      	mov	r5, r2
	for(int i=0; i<len; i++)
 800150a:	2400      	movs	r4, #0
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 800150c:	4f06      	ldr	r7, [pc, #24]	; (8001528 <_write+0x24>)
	for(int i=0; i<len; i++)
 800150e:	42ac      	cmp	r4, r5
 8001510:	db01      	blt.n	8001516 <_write+0x12>
	}
	return len;
}
 8001512:	4628      	mov	r0, r5
 8001514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_UART_Transmit(&huart2, (uint8_t *)&str[i], 1, 0xFFFF);
 8001516:	1931      	adds	r1, r6, r4
 8001518:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800151c:	2201      	movs	r2, #1
 800151e:	4638      	mov	r0, r7
 8001520:	f7ff fb90 	bl	8000c44 <HAL_UART_Transmit>
	for(int i=0; i<len; i++)
 8001524:	3401      	adds	r4, #1
 8001526:	e7f2      	b.n	800150e <_write+0xa>
 8001528:	20000a64 	.word	0x20000a64

0800152c <send_U_message>:

}
#endif
void send_U_message(uint8_t *data, uint16_t len)
{
  HAL_UART_Transmit(&huart1, data, len, 0xFFFF);
 800152c:	460a      	mov	r2, r1
 800152e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001532:	4601      	mov	r1, r0
 8001534:	4801      	ldr	r0, [pc, #4]	; (800153c <send_U_message+0x10>)
 8001536:	f7ff bb85 	b.w	8000c44 <HAL_UART_Transmit>
 800153a:	bf00      	nop
 800153c:	20000a24 	.word	0x20000a24

08001540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001540:	b510      	push	{r4, lr}
 8001542:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001544:	2228      	movs	r2, #40	; 0x28
 8001546:	2100      	movs	r1, #0
 8001548:	a806      	add	r0, sp, #24
 800154a:	f000 fa17 	bl	800197c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800154e:	2214      	movs	r2, #20
 8001550:	2100      	movs	r1, #0
 8001552:	a801      	add	r0, sp, #4
 8001554:	f000 fa12 	bl	800197c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001558:	2301      	movs	r3, #1
 800155a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800155c:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800155e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001560:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001562:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001566:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001568:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800156a:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156c:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156e:	f7fe ffcd 	bl	800050c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001572:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001574:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001578:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157a:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800157c:	4621      	mov	r1, r4
 800157e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001580:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001582:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001584:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001586:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001588:	f7ff f988 	bl	800089c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800158c:	b010      	add	sp, #64	; 0x40
 800158e:	bd10      	pop	{r4, pc}

08001590 <main>:
{
 8001590:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001594:	2400      	movs	r4, #0
  huart1.Init.BaudRate = 115200;
 8001596:	f44f 38e1 	mov.w	r8, #115200	; 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800159a:	270c      	movs	r7, #12
  HAL_Init();
 800159c:	f7fe fe02 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 80015a0:	f7ff ffce 	bl	8001540 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <main+0x90>)
  huart1.Instance = USART1;
 80015a6:	4e1f      	ldr	r6, [pc, #124]	; (8001624 <main+0x94>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a8:	699a      	ldr	r2, [r3, #24]
  huart2.Instance = USART2;
 80015aa:	4d1f      	ldr	r5, [pc, #124]	; (8001628 <main+0x98>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ac:	f042 0204 	orr.w	r2, r2, #4
 80015b0:	619a      	str	r2, [r3, #24]
 80015b2:	699b      	ldr	r3, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015b4:	4630      	mov	r0, r6
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	9b01      	ldr	r3, [sp, #4]
  huart1.Init.BaudRate = 115200;
 80015be:	4b1b      	ldr	r3, [pc, #108]	; (800162c <main+0x9c>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015c0:	60b4      	str	r4, [r6, #8]
  huart1.Init.BaudRate = 115200;
 80015c2:	e886 0108 	stmia.w	r6, {r3, r8}
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015c6:	60f4      	str	r4, [r6, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015c8:	6134      	str	r4, [r6, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ca:	6177      	str	r7, [r6, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015cc:	61b4      	str	r4, [r6, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ce:	61f4      	str	r4, [r6, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015d0:	f7ff fb0a 	bl	8000be8 <HAL_UART_Init>
  huart2.Instance = USART2;
 80015d4:	4b16      	ldr	r3, [pc, #88]	; (8001630 <main+0xa0>)
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015d6:	4628      	mov	r0, r5
  huart2.Init.BaudRate = 115200;
 80015d8:	e885 0108 	stmia.w	r5, {r3, r8}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015dc:	60ac      	str	r4, [r5, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015de:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015e0:	612c      	str	r4, [r5, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015e2:	616f      	str	r7, [r5, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e4:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e6:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015e8:	f7ff fafe 	bl	8000be8 <HAL_UART_Init>
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80015ec:	2201      	movs	r2, #1
 80015ee:	4911      	ldr	r1, [pc, #68]	; (8001634 <main+0xa4>)
 80015f0:	4630      	mov	r0, r6
 80015f2:	f7ff fb83 	bl	8000cfc <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 80015f6:	2201      	movs	r2, #1
 80015f8:	490e      	ldr	r1, [pc, #56]	; (8001634 <main+0xa4>)
 80015fa:	4628      	mov	r0, r5
 80015fc:	f7ff fb7e 	bl	8000cfc <HAL_UART_Receive_IT>
  init_U2_data();
 8001600:	f7ff fd04 	bl	800100c <init_U2_data>
  printf("Hello !!\r\n");
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <main+0xa8>)
 8001606:	f000 fa35 	bl	8001a74 <puts>
    switch(main_seq)
 800160a:	b92c      	cbnz	r4, 8001618 <main+0x88>
        if(AT_AirKiss_Proc())
 800160c:	f7ff fea2 	bl	8001354 <AT_AirKiss_Proc>
          main_seq++;
 8001610:	1c04      	adds	r4, r0, #0
 8001612:	bf18      	it	ne
 8001614:	2401      	movne	r4, #1
 8001616:	e7f8      	b.n	800160a <main+0x7a>
    	  U2_flag();
 8001618:	f7ff ff4e 	bl	80014b8 <U2_flag>
      break;
 800161c:	e7fc      	b.n	8001618 <main+0x88>
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000
 8001624:	20000a24 	.word	0x20000a24
 8001628:	20000a64 	.word	0x20000a64
 800162c:	40013800 	.word	0x40013800
 8001630:	40004400 	.word	0x40004400
 8001634:	20000a20 	.word	0x20000a20
 8001638:	08002f77 	.word	0x08002f77

0800163c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <HAL_MspInit+0x3c>)
{
 800163e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001640:	699a      	ldr	r2, [r3, #24]
 8001642:	f042 0201 	orr.w	r2, r2, #1
 8001646:	619a      	str	r2, [r3, #24]
 8001648:	699a      	ldr	r2, [r3, #24]
 800164a:	f002 0201 	and.w	r2, r2, #1
 800164e:	9200      	str	r2, [sp, #0]
 8001650:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	69da      	ldr	r2, [r3, #28]
 8001654:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001658:	61da      	str	r2, [r3, #28]
 800165a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800165c:	4a07      	ldr	r2, [pc, #28]	; (800167c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	9301      	str	r3, [sp, #4]
 8001664:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001666:	6853      	ldr	r3, [r2, #4]
 8001668:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800166c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001670:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001672:	b002      	add	sp, #8
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	40010000 	.word	0x40010000

08001680 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	2210      	movs	r2, #16
{
 8001682:	b510      	push	{r4, lr}
 8001684:	4604      	mov	r4, r0
 8001686:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	eb0d 0002 	add.w	r0, sp, r2
 800168c:	2100      	movs	r1, #0
 800168e:	f000 f975 	bl	800197c <memset>
  if(huart->Instance==USART1)
 8001692:	6823      	ldr	r3, [r4, #0]
 8001694:	4a32      	ldr	r2, [pc, #200]	; (8001760 <HAL_UART_MspInit+0xe0>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d131      	bne.n	80016fe <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800169a:	4b32      	ldr	r3, [pc, #200]	; (8001764 <HAL_UART_MspInit+0xe4>)
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	a904      	add	r1, sp, #16
    __HAL_RCC_USART1_CLK_ENABLE();
 800169e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a0:	4831      	ldr	r0, [pc, #196]	; (8001768 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80016a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016a6:	619a      	str	r2, [r3, #24]
 80016a8:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016aa:	2400      	movs	r4, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 80016ac:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80016b0:	9200      	str	r2, [sp, #0]
 80016b2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b4:	699a      	ldr	r2, [r3, #24]
 80016b6:	f042 0204 	orr.w	r2, r2, #4
 80016ba:	619a      	str	r2, [r3, #24]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016ca:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d0:	2303      	movs	r3, #3
 80016d2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d4:	f7fe fe3a 	bl	800034c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	a904      	add	r1, sp, #16
 80016de:	4822      	ldr	r0, [pc, #136]	; (8001768 <HAL_UART_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016e0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	f7fe fe31 	bl	800034c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016ea:	2025      	movs	r0, #37	; 0x25
 80016ec:	4622      	mov	r2, r4
 80016ee:	4621      	mov	r1, r4
 80016f0:	f7fe fd8e 	bl	8000210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016f4:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016f6:	f7fe fdbf 	bl	8000278 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016fa:	b008      	add	sp, #32
 80016fc:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 80016fe:	4a1b      	ldr	r2, [pc, #108]	; (800176c <HAL_UART_MspInit+0xec>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d1fa      	bne.n	80016fa <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_UART_MspInit+0xe4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001706:	a904      	add	r1, sp, #16
    __HAL_RCC_USART2_CLK_ENABLE();
 8001708:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	4817      	ldr	r0, [pc, #92]	; (8001768 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800170c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001710:	61da      	str	r2, [r3, #28]
 8001712:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001714:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8001716:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800171a:	9202      	str	r2, [sp, #8]
 800171c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	699a      	ldr	r2, [r3, #24]
 8001720:	f042 0204 	orr.w	r2, r2, #4
 8001724:	619a      	str	r2, [r3, #24]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	9303      	str	r3, [sp, #12]
 800172e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001730:	2304      	movs	r3, #4
 8001732:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173c:	f7fe fe06 	bl	800034c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001740:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001742:	a904      	add	r1, sp, #16
 8001744:	4808      	ldr	r0, [pc, #32]	; (8001768 <HAL_UART_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001746:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001748:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174c:	f7fe fdfe 	bl	800034c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001750:	2026      	movs	r0, #38	; 0x26
 8001752:	4622      	mov	r2, r4
 8001754:	4621      	mov	r1, r4
 8001756:	f7fe fd5b 	bl	8000210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800175a:	2026      	movs	r0, #38	; 0x26
 800175c:	e7cb      	b.n	80016f6 <HAL_UART_MspInit+0x76>
 800175e:	bf00      	nop
 8001760:	40013800 	.word	0x40013800
 8001764:	40021000 	.word	0x40021000
 8001768:	40010800 	.word	0x40010800
 800176c:	40004400 	.word	0x40004400

08001770 <NMI_Handler>:
 8001770:	4770      	bx	lr

08001772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001772:	e7fe      	b.n	8001772 <HardFault_Handler>

08001774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001774:	e7fe      	b.n	8001774 <MemManage_Handler>

08001776 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001776:	e7fe      	b.n	8001776 <BusFault_Handler>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	e7fe      	b.n	8001778 <UsageFault_Handler>

0800177a <SVC_Handler>:
 800177a:	4770      	bx	lr

0800177c <DebugMon_Handler>:
 800177c:	4770      	bx	lr

0800177e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177e:	4770      	bx	lr

08001780 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001780:	f7fe bd22 	b.w	80001c8 <HAL_IncTick>

08001784 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001784:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
  if((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE) != RESET))
 8001786:	4c0b      	ldr	r4, [pc, #44]	; (80017b4 <USART1_IRQHandler+0x30>)
 8001788:	6822      	ldr	r2, [r4, #0]
 800178a:	6811      	ldr	r1, [r2, #0]
 800178c:	068b      	lsls	r3, r1, #26
 800178e:	d503      	bpl.n	8001798 <USART1_IRQHandler+0x14>
  {
	  EnQueue((uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF));
 8001790:	6850      	ldr	r0, [r2, #4]
 8001792:	b2c0      	uxtb	r0, r0
 8001794:	f7ff fc72 	bl	800107c <EnQueue>
  }
  __HAL_UART_CLEAR_PEFLAG(&huart1);
 8001798:	2300      	movs	r3, #0
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	6823      	ldr	r3, [r4, #0]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <USART1_IRQHandler+0x30>)
  __HAL_UART_CLEAR_PEFLAG(&huart1);
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	9201      	str	r2, [sp, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	9b01      	ldr	r3, [sp, #4]
  HAL_UART_IRQHandler(&huart1);
 80017aa:	f7ff fb0f 	bl	8000dcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017ae:	b002      	add	sp, #8
 80017b0:	bd10      	pop	{r4, pc}
 80017b2:	bf00      	nop
 80017b4:	20000a24 	.word	0x20000a24

080017b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017b8:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
#if 1
  if((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE) != RESET))
 80017ba:	4c0b      	ldr	r4, [pc, #44]	; (80017e8 <USART2_IRQHandler+0x30>)
 80017bc:	6822      	ldr	r2, [r4, #0]
 80017be:	6811      	ldr	r1, [r2, #0]
 80017c0:	068b      	lsls	r3, r1, #26
 80017c2:	d503      	bpl.n	80017cc <USART2_IRQHandler+0x14>
  {
	  input_U2_data((uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF));
 80017c4:	6850      	ldr	r0, [r2, #4]
 80017c6:	b2c0      	uxtb	r0, r0
 80017c8:	f7ff fc28 	bl	800101c <input_U2_data>
  }
  __HAL_UART_CLEAR_PEFLAG(&huart2);
 80017cc:	2300      	movs	r3, #0
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	6823      	ldr	r3, [r4, #0]
#endif
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017d2:	4805      	ldr	r0, [pc, #20]	; (80017e8 <USART2_IRQHandler+0x30>)
  __HAL_UART_CLEAR_PEFLAG(&huart2);
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	9201      	str	r2, [sp, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	9b01      	ldr	r3, [sp, #4]
  HAL_UART_IRQHandler(&huart2);
 80017de:	f7ff faf5 	bl	8000dcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017e2:	b002      	add	sp, #8
 80017e4:	bd10      	pop	{r4, pc}
 80017e6:	bf00      	nop
 80017e8:	20000a64 	.word	0x20000a64

080017ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017ec:	b570      	push	{r4, r5, r6, lr}
 80017ee:	460e      	mov	r6, r1
 80017f0:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f2:	460c      	mov	r4, r1
 80017f4:	1ba3      	subs	r3, r4, r6
 80017f6:	429d      	cmp	r5, r3
 80017f8:	dc01      	bgt.n	80017fe <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80017fa:	4628      	mov	r0, r5
 80017fc:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80017fe:	f3af 8000 	nop.w
 8001802:	f804 0b01 	strb.w	r0, [r4], #1
 8001806:	e7f5      	b.n	80017f4 <_read+0x8>

08001808 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001808:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <_sbrk+0x2c>)
{
 800180c:	4602      	mov	r2, r0
	if (heap_end == 0)
 800180e:	6819      	ldr	r1, [r3, #0]
 8001810:	b909      	cbnz	r1, 8001816 <_sbrk+0xe>
		heap_end = &end;
 8001812:	4909      	ldr	r1, [pc, #36]	; (8001838 <_sbrk+0x30>)
 8001814:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001816:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8001818:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800181a:	4402      	add	r2, r0
 800181c:	428a      	cmp	r2, r1
 800181e:	d906      	bls.n	800182e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001820:	f000 f868 	bl	80018f4 <__errno>
 8001824:	230c      	movs	r3, #12
 8001826:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001828:	f04f 30ff 	mov.w	r0, #4294967295
 800182c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800182e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8001830:	bd08      	pop	{r3, pc}
 8001832:	bf00      	nop
 8001834:	20000208 	.word	0x20000208
 8001838:	20000aa8 	.word	0x20000aa8

0800183c <_close>:

int _close(int file)
{
	return -1;
}
 800183c:	f04f 30ff 	mov.w	r0, #4294967295
 8001840:	4770      	bx	lr

08001842 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001842:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8001846:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001848:	604b      	str	r3, [r1, #4]
}
 800184a:	4770      	bx	lr

0800184c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800184c:	2001      	movs	r0, #1
 800184e:	4770      	bx	lr

08001850 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001850:	2000      	movs	r0, #0
 8001852:	4770      	bx	lr

08001854 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <SystemInit+0x40>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	f042 0201 	orr.w	r2, r2, #1
 800185c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800185e:	6859      	ldr	r1, [r3, #4]
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <SystemInit+0x44>)
 8001862:	400a      	ands	r2, r1
 8001864:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800186c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001870:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001878:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001880:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001882:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001886:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001888:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <SystemInit+0x48>)
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000
 8001898:	f8ff0000 	.word	0xf8ff0000
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80018a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80018a2:	e003      	b.n	80018ac <LoopCopyDataInit>

080018a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80018a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80018a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80018aa:	3104      	adds	r1, #4

080018ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80018ac:	480a      	ldr	r0, [pc, #40]	; (80018d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80018b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80018b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80018b4:	d3f6      	bcc.n	80018a4 <CopyDataInit>
  ldr r2, =_sbss
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80018b8:	e002      	b.n	80018c0 <LoopFillZerobss>

080018ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80018bc:	f842 3b04 	str.w	r3, [r2], #4

080018c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80018c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80018c4:	d3f9      	bcc.n	80018ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018c6:	f7ff ffc5 	bl	8001854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ca:	f000 f819 	bl	8001900 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018ce:	f7ff fe5f 	bl	8001590 <main>
  bx lr
 80018d2:	4770      	bx	lr
  ldr r3, =_sidata
 80018d4:	08003148 	.word	0x08003148
  ldr r0, =_sdata
 80018d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018dc:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 80018e0:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 80018e4:	20000aa8 	.word	0x20000aa8

080018e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018e8:	e7fe      	b.n	80018e8 <ADC1_2_IRQHandler>

080018ea <atoi>:
 80018ea:	220a      	movs	r2, #10
 80018ec:	2100      	movs	r1, #0
 80018ee:	f000 b9c1 	b.w	8001c74 <strtol>
	...

080018f4 <__errno>:
 80018f4:	4b01      	ldr	r3, [pc, #4]	; (80018fc <__errno+0x8>)
 80018f6:	6818      	ldr	r0, [r3, #0]
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	2000000c 	.word	0x2000000c

08001900 <__libc_init_array>:
 8001900:	b570      	push	{r4, r5, r6, lr}
 8001902:	2500      	movs	r5, #0
 8001904:	4e0c      	ldr	r6, [pc, #48]	; (8001938 <__libc_init_array+0x38>)
 8001906:	4c0d      	ldr	r4, [pc, #52]	; (800193c <__libc_init_array+0x3c>)
 8001908:	1ba4      	subs	r4, r4, r6
 800190a:	10a4      	asrs	r4, r4, #2
 800190c:	42a5      	cmp	r5, r4
 800190e:	d109      	bne.n	8001924 <__libc_init_array+0x24>
 8001910:	f001 fa76 	bl	8002e00 <_init>
 8001914:	2500      	movs	r5, #0
 8001916:	4e0a      	ldr	r6, [pc, #40]	; (8001940 <__libc_init_array+0x40>)
 8001918:	4c0a      	ldr	r4, [pc, #40]	; (8001944 <__libc_init_array+0x44>)
 800191a:	1ba4      	subs	r4, r4, r6
 800191c:	10a4      	asrs	r4, r4, #2
 800191e:	42a5      	cmp	r5, r4
 8001920:	d105      	bne.n	800192e <__libc_init_array+0x2e>
 8001922:	bd70      	pop	{r4, r5, r6, pc}
 8001924:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001928:	4798      	blx	r3
 800192a:	3501      	adds	r5, #1
 800192c:	e7ee      	b.n	800190c <__libc_init_array+0xc>
 800192e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001932:	4798      	blx	r3
 8001934:	3501      	adds	r5, #1
 8001936:	e7f2      	b.n	800191e <__libc_init_array+0x1e>
 8001938:	08003140 	.word	0x08003140
 800193c:	08003140 	.word	0x08003140
 8001940:	08003140 	.word	0x08003140
 8001944:	08003144 	.word	0x08003144

08001948 <memcmp>:
 8001948:	b510      	push	{r4, lr}
 800194a:	3901      	subs	r1, #1
 800194c:	4402      	add	r2, r0
 800194e:	4290      	cmp	r0, r2
 8001950:	d101      	bne.n	8001956 <memcmp+0xe>
 8001952:	2000      	movs	r0, #0
 8001954:	bd10      	pop	{r4, pc}
 8001956:	f810 3b01 	ldrb.w	r3, [r0], #1
 800195a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800195e:	42a3      	cmp	r3, r4
 8001960:	d0f5      	beq.n	800194e <memcmp+0x6>
 8001962:	1b18      	subs	r0, r3, r4
 8001964:	bd10      	pop	{r4, pc}

08001966 <memcpy>:
 8001966:	b510      	push	{r4, lr}
 8001968:	1e43      	subs	r3, r0, #1
 800196a:	440a      	add	r2, r1
 800196c:	4291      	cmp	r1, r2
 800196e:	d100      	bne.n	8001972 <memcpy+0xc>
 8001970:	bd10      	pop	{r4, pc}
 8001972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001976:	f803 4f01 	strb.w	r4, [r3, #1]!
 800197a:	e7f7      	b.n	800196c <memcpy+0x6>

0800197c <memset>:
 800197c:	4603      	mov	r3, r0
 800197e:	4402      	add	r2, r0
 8001980:	4293      	cmp	r3, r2
 8001982:	d100      	bne.n	8001986 <memset+0xa>
 8001984:	4770      	bx	lr
 8001986:	f803 1b01 	strb.w	r1, [r3], #1
 800198a:	e7f9      	b.n	8001980 <memset+0x4>

0800198c <iprintf>:
 800198c:	b40f      	push	{r0, r1, r2, r3}
 800198e:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <iprintf+0x2c>)
 8001990:	b513      	push	{r0, r1, r4, lr}
 8001992:	681c      	ldr	r4, [r3, #0]
 8001994:	b124      	cbz	r4, 80019a0 <iprintf+0x14>
 8001996:	69a3      	ldr	r3, [r4, #24]
 8001998:	b913      	cbnz	r3, 80019a0 <iprintf+0x14>
 800199a:	4620      	mov	r0, r4
 800199c:	f000 fb32 	bl	8002004 <__sinit>
 80019a0:	ab05      	add	r3, sp, #20
 80019a2:	9a04      	ldr	r2, [sp, #16]
 80019a4:	68a1      	ldr	r1, [r4, #8]
 80019a6:	4620      	mov	r0, r4
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	f000 fe59 	bl	8002660 <_vfiprintf_r>
 80019ae:	b002      	add	sp, #8
 80019b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019b4:	b004      	add	sp, #16
 80019b6:	4770      	bx	lr
 80019b8:	2000000c 	.word	0x2000000c

080019bc <_puts_r>:
 80019bc:	b570      	push	{r4, r5, r6, lr}
 80019be:	460e      	mov	r6, r1
 80019c0:	4605      	mov	r5, r0
 80019c2:	b118      	cbz	r0, 80019cc <_puts_r+0x10>
 80019c4:	6983      	ldr	r3, [r0, #24]
 80019c6:	b90b      	cbnz	r3, 80019cc <_puts_r+0x10>
 80019c8:	f000 fb1c 	bl	8002004 <__sinit>
 80019cc:	69ab      	ldr	r3, [r5, #24]
 80019ce:	68ac      	ldr	r4, [r5, #8]
 80019d0:	b913      	cbnz	r3, 80019d8 <_puts_r+0x1c>
 80019d2:	4628      	mov	r0, r5
 80019d4:	f000 fb16 	bl	8002004 <__sinit>
 80019d8:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <_puts_r+0xac>)
 80019da:	429c      	cmp	r4, r3
 80019dc:	d117      	bne.n	8001a0e <_puts_r+0x52>
 80019de:	686c      	ldr	r4, [r5, #4]
 80019e0:	89a3      	ldrh	r3, [r4, #12]
 80019e2:	071b      	lsls	r3, r3, #28
 80019e4:	d51d      	bpl.n	8001a22 <_puts_r+0x66>
 80019e6:	6923      	ldr	r3, [r4, #16]
 80019e8:	b1db      	cbz	r3, 8001a22 <_puts_r+0x66>
 80019ea:	3e01      	subs	r6, #1
 80019ec:	68a3      	ldr	r3, [r4, #8]
 80019ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80019f2:	3b01      	subs	r3, #1
 80019f4:	60a3      	str	r3, [r4, #8]
 80019f6:	b9e9      	cbnz	r1, 8001a34 <_puts_r+0x78>
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	da2e      	bge.n	8001a5a <_puts_r+0x9e>
 80019fc:	4622      	mov	r2, r4
 80019fe:	210a      	movs	r1, #10
 8001a00:	4628      	mov	r0, r5
 8001a02:	f000 f94d 	bl	8001ca0 <__swbuf_r>
 8001a06:	3001      	adds	r0, #1
 8001a08:	d011      	beq.n	8001a2e <_puts_r+0x72>
 8001a0a:	200a      	movs	r0, #10
 8001a0c:	bd70      	pop	{r4, r5, r6, pc}
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <_puts_r+0xb0>)
 8001a10:	429c      	cmp	r4, r3
 8001a12:	d101      	bne.n	8001a18 <_puts_r+0x5c>
 8001a14:	68ac      	ldr	r4, [r5, #8]
 8001a16:	e7e3      	b.n	80019e0 <_puts_r+0x24>
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <_puts_r+0xb4>)
 8001a1a:	429c      	cmp	r4, r3
 8001a1c:	bf08      	it	eq
 8001a1e:	68ec      	ldreq	r4, [r5, #12]
 8001a20:	e7de      	b.n	80019e0 <_puts_r+0x24>
 8001a22:	4621      	mov	r1, r4
 8001a24:	4628      	mov	r0, r5
 8001a26:	f000 f98d 	bl	8001d44 <__swsetup_r>
 8001a2a:	2800      	cmp	r0, #0
 8001a2c:	d0dd      	beq.n	80019ea <_puts_r+0x2e>
 8001a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a32:	bd70      	pop	{r4, r5, r6, pc}
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	da04      	bge.n	8001a42 <_puts_r+0x86>
 8001a38:	69a2      	ldr	r2, [r4, #24]
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	db06      	blt.n	8001a4c <_puts_r+0x90>
 8001a3e:	290a      	cmp	r1, #10
 8001a40:	d004      	beq.n	8001a4c <_puts_r+0x90>
 8001a42:	6823      	ldr	r3, [r4, #0]
 8001a44:	1c5a      	adds	r2, r3, #1
 8001a46:	6022      	str	r2, [r4, #0]
 8001a48:	7019      	strb	r1, [r3, #0]
 8001a4a:	e7cf      	b.n	80019ec <_puts_r+0x30>
 8001a4c:	4622      	mov	r2, r4
 8001a4e:	4628      	mov	r0, r5
 8001a50:	f000 f926 	bl	8001ca0 <__swbuf_r>
 8001a54:	3001      	adds	r0, #1
 8001a56:	d1c9      	bne.n	80019ec <_puts_r+0x30>
 8001a58:	e7e9      	b.n	8001a2e <_puts_r+0x72>
 8001a5a:	200a      	movs	r0, #10
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	1c5a      	adds	r2, r3, #1
 8001a60:	6022      	str	r2, [r4, #0]
 8001a62:	7018      	strb	r0, [r3, #0]
 8001a64:	bd70      	pop	{r4, r5, r6, pc}
 8001a66:	bf00      	nop
 8001a68:	08002fc0 	.word	0x08002fc0
 8001a6c:	08002fe0 	.word	0x08002fe0
 8001a70:	08002fa0 	.word	0x08002fa0

08001a74 <puts>:
 8001a74:	4b02      	ldr	r3, [pc, #8]	; (8001a80 <puts+0xc>)
 8001a76:	4601      	mov	r1, r0
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	f7ff bf9f 	b.w	80019bc <_puts_r>
 8001a7e:	bf00      	nop
 8001a80:	2000000c 	.word	0x2000000c

08001a84 <siprintf>:
 8001a84:	b40e      	push	{r1, r2, r3}
 8001a86:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001a8a:	b500      	push	{lr}
 8001a8c:	b09c      	sub	sp, #112	; 0x70
 8001a8e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001a92:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001a96:	9104      	str	r1, [sp, #16]
 8001a98:	9107      	str	r1, [sp, #28]
 8001a9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a9e:	ab1d      	add	r3, sp, #116	; 0x74
 8001aa0:	9002      	str	r0, [sp, #8]
 8001aa2:	9006      	str	r0, [sp, #24]
 8001aa4:	4808      	ldr	r0, [pc, #32]	; (8001ac8 <siprintf+0x44>)
 8001aa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8001aaa:	f8ad 1016 	strh.w	r1, [sp, #22]
 8001aae:	6800      	ldr	r0, [r0, #0]
 8001ab0:	a902      	add	r1, sp, #8
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	f000 fcb8 	bl	8002428 <_svfiprintf_r>
 8001ab8:	2200      	movs	r2, #0
 8001aba:	9b02      	ldr	r3, [sp, #8]
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	b01c      	add	sp, #112	; 0x70
 8001ac0:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ac4:	b003      	add	sp, #12
 8001ac6:	4770      	bx	lr
 8001ac8:	2000000c 	.word	0x2000000c

08001acc <strtok>:
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <strtok+0x50>)
 8001ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ad2:	681d      	ldr	r5, [r3, #0]
 8001ad4:	4606      	mov	r6, r0
 8001ad6:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8001ad8:	460f      	mov	r7, r1
 8001ada:	b9b4      	cbnz	r4, 8001b0a <strtok+0x3e>
 8001adc:	2050      	movs	r0, #80	; 0x50
 8001ade:	f000 fb83 	bl	80021e8 <malloc>
 8001ae2:	65a8      	str	r0, [r5, #88]	; 0x58
 8001ae4:	6004      	str	r4, [r0, #0]
 8001ae6:	6044      	str	r4, [r0, #4]
 8001ae8:	6084      	str	r4, [r0, #8]
 8001aea:	60c4      	str	r4, [r0, #12]
 8001aec:	6104      	str	r4, [r0, #16]
 8001aee:	6144      	str	r4, [r0, #20]
 8001af0:	6184      	str	r4, [r0, #24]
 8001af2:	6284      	str	r4, [r0, #40]	; 0x28
 8001af4:	62c4      	str	r4, [r0, #44]	; 0x2c
 8001af6:	6304      	str	r4, [r0, #48]	; 0x30
 8001af8:	6344      	str	r4, [r0, #52]	; 0x34
 8001afa:	6384      	str	r4, [r0, #56]	; 0x38
 8001afc:	63c4      	str	r4, [r0, #60]	; 0x3c
 8001afe:	6404      	str	r4, [r0, #64]	; 0x40
 8001b00:	6444      	str	r4, [r0, #68]	; 0x44
 8001b02:	6484      	str	r4, [r0, #72]	; 0x48
 8001b04:	64c4      	str	r4, [r0, #76]	; 0x4c
 8001b06:	7704      	strb	r4, [r0, #28]
 8001b08:	6244      	str	r4, [r0, #36]	; 0x24
 8001b0a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8001b0c:	4639      	mov	r1, r7
 8001b0e:	4630      	mov	r0, r6
 8001b10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b14:	2301      	movs	r3, #1
 8001b16:	f000 b803 	b.w	8001b20 <__strtok_r>
 8001b1a:	bf00      	nop
 8001b1c:	2000000c 	.word	0x2000000c

08001b20 <__strtok_r>:
 8001b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b22:	b918      	cbnz	r0, 8001b2c <__strtok_r+0xc>
 8001b24:	6810      	ldr	r0, [r2, #0]
 8001b26:	b908      	cbnz	r0, 8001b2c <__strtok_r+0xc>
 8001b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4604      	mov	r4, r0
 8001b2e:	460f      	mov	r7, r1
 8001b30:	f814 5b01 	ldrb.w	r5, [r4], #1
 8001b34:	f817 6b01 	ldrb.w	r6, [r7], #1
 8001b38:	b91e      	cbnz	r6, 8001b42 <__strtok_r+0x22>
 8001b3a:	b965      	cbnz	r5, 8001b56 <__strtok_r+0x36>
 8001b3c:	6015      	str	r5, [r2, #0]
 8001b3e:	4628      	mov	r0, r5
 8001b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b42:	42b5      	cmp	r5, r6
 8001b44:	d1f6      	bne.n	8001b34 <__strtok_r+0x14>
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1ef      	bne.n	8001b2a <__strtok_r+0xa>
 8001b4a:	6014      	str	r4, [r2, #0]
 8001b4c:	7003      	strb	r3, [r0, #0]
 8001b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b50:	461c      	mov	r4, r3
 8001b52:	e00c      	b.n	8001b6e <__strtok_r+0x4e>
 8001b54:	b915      	cbnz	r5, 8001b5c <__strtok_r+0x3c>
 8001b56:	460e      	mov	r6, r1
 8001b58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001b5c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8001b60:	42ab      	cmp	r3, r5
 8001b62:	d1f7      	bne.n	8001b54 <__strtok_r+0x34>
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0f3      	beq.n	8001b50 <__strtok_r+0x30>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f804 3c01 	strb.w	r3, [r4, #-1]
 8001b6e:	6014      	str	r4, [r2, #0]
 8001b70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b72 <_strtol_l.isra.0>:
 8001b72:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b76:	4680      	mov	r8, r0
 8001b78:	4689      	mov	r9, r1
 8001b7a:	4692      	mov	sl, r2
 8001b7c:	461f      	mov	r7, r3
 8001b7e:	468b      	mov	fp, r1
 8001b80:	465d      	mov	r5, fp
 8001b82:	980a      	ldr	r0, [sp, #40]	; 0x28
 8001b84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001b88:	f000 fac6 	bl	8002118 <__locale_ctype_ptr_l>
 8001b8c:	4420      	add	r0, r4
 8001b8e:	7846      	ldrb	r6, [r0, #1]
 8001b90:	f016 0608 	ands.w	r6, r6, #8
 8001b94:	d10b      	bne.n	8001bae <_strtol_l.isra.0+0x3c>
 8001b96:	2c2d      	cmp	r4, #45	; 0x2d
 8001b98:	d10b      	bne.n	8001bb2 <_strtol_l.isra.0+0x40>
 8001b9a:	2601      	movs	r6, #1
 8001b9c:	782c      	ldrb	r4, [r5, #0]
 8001b9e:	f10b 0502 	add.w	r5, fp, #2
 8001ba2:	b167      	cbz	r7, 8001bbe <_strtol_l.isra.0+0x4c>
 8001ba4:	2f10      	cmp	r7, #16
 8001ba6:	d114      	bne.n	8001bd2 <_strtol_l.isra.0+0x60>
 8001ba8:	2c30      	cmp	r4, #48	; 0x30
 8001baa:	d00a      	beq.n	8001bc2 <_strtol_l.isra.0+0x50>
 8001bac:	e011      	b.n	8001bd2 <_strtol_l.isra.0+0x60>
 8001bae:	46ab      	mov	fp, r5
 8001bb0:	e7e6      	b.n	8001b80 <_strtol_l.isra.0+0xe>
 8001bb2:	2c2b      	cmp	r4, #43	; 0x2b
 8001bb4:	bf04      	itt	eq
 8001bb6:	782c      	ldrbeq	r4, [r5, #0]
 8001bb8:	f10b 0502 	addeq.w	r5, fp, #2
 8001bbc:	e7f1      	b.n	8001ba2 <_strtol_l.isra.0+0x30>
 8001bbe:	2c30      	cmp	r4, #48	; 0x30
 8001bc0:	d127      	bne.n	8001c12 <_strtol_l.isra.0+0xa0>
 8001bc2:	782b      	ldrb	r3, [r5, #0]
 8001bc4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001bc8:	2b58      	cmp	r3, #88	; 0x58
 8001bca:	d14b      	bne.n	8001c64 <_strtol_l.isra.0+0xf2>
 8001bcc:	2710      	movs	r7, #16
 8001bce:	786c      	ldrb	r4, [r5, #1]
 8001bd0:	3502      	adds	r5, #2
 8001bd2:	2e00      	cmp	r6, #0
 8001bd4:	bf0c      	ite	eq
 8001bd6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8001bda:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8001bde:	2200      	movs	r2, #0
 8001be0:	fbb1 fef7 	udiv	lr, r1, r7
 8001be4:	4610      	mov	r0, r2
 8001be6:	fb07 1c1e 	mls	ip, r7, lr, r1
 8001bea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8001bee:	2b09      	cmp	r3, #9
 8001bf0:	d811      	bhi.n	8001c16 <_strtol_l.isra.0+0xa4>
 8001bf2:	461c      	mov	r4, r3
 8001bf4:	42a7      	cmp	r7, r4
 8001bf6:	dd1d      	ble.n	8001c34 <_strtol_l.isra.0+0xc2>
 8001bf8:	1c53      	adds	r3, r2, #1
 8001bfa:	d007      	beq.n	8001c0c <_strtol_l.isra.0+0x9a>
 8001bfc:	4586      	cmp	lr, r0
 8001bfe:	d316      	bcc.n	8001c2e <_strtol_l.isra.0+0xbc>
 8001c00:	d101      	bne.n	8001c06 <_strtol_l.isra.0+0x94>
 8001c02:	45a4      	cmp	ip, r4
 8001c04:	db13      	blt.n	8001c2e <_strtol_l.isra.0+0xbc>
 8001c06:	2201      	movs	r2, #1
 8001c08:	fb00 4007 	mla	r0, r0, r7, r4
 8001c0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001c10:	e7eb      	b.n	8001bea <_strtol_l.isra.0+0x78>
 8001c12:	270a      	movs	r7, #10
 8001c14:	e7dd      	b.n	8001bd2 <_strtol_l.isra.0+0x60>
 8001c16:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8001c1a:	2b19      	cmp	r3, #25
 8001c1c:	d801      	bhi.n	8001c22 <_strtol_l.isra.0+0xb0>
 8001c1e:	3c37      	subs	r4, #55	; 0x37
 8001c20:	e7e8      	b.n	8001bf4 <_strtol_l.isra.0+0x82>
 8001c22:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8001c26:	2b19      	cmp	r3, #25
 8001c28:	d804      	bhi.n	8001c34 <_strtol_l.isra.0+0xc2>
 8001c2a:	3c57      	subs	r4, #87	; 0x57
 8001c2c:	e7e2      	b.n	8001bf4 <_strtol_l.isra.0+0x82>
 8001c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c32:	e7eb      	b.n	8001c0c <_strtol_l.isra.0+0x9a>
 8001c34:	1c53      	adds	r3, r2, #1
 8001c36:	d108      	bne.n	8001c4a <_strtol_l.isra.0+0xd8>
 8001c38:	2322      	movs	r3, #34	; 0x22
 8001c3a:	4608      	mov	r0, r1
 8001c3c:	f8c8 3000 	str.w	r3, [r8]
 8001c40:	f1ba 0f00 	cmp.w	sl, #0
 8001c44:	d107      	bne.n	8001c56 <_strtol_l.isra.0+0xe4>
 8001c46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c4a:	b106      	cbz	r6, 8001c4e <_strtol_l.isra.0+0xdc>
 8001c4c:	4240      	negs	r0, r0
 8001c4e:	f1ba 0f00 	cmp.w	sl, #0
 8001c52:	d00c      	beq.n	8001c6e <_strtol_l.isra.0+0xfc>
 8001c54:	b122      	cbz	r2, 8001c60 <_strtol_l.isra.0+0xee>
 8001c56:	3d01      	subs	r5, #1
 8001c58:	f8ca 5000 	str.w	r5, [sl]
 8001c5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c60:	464d      	mov	r5, r9
 8001c62:	e7f9      	b.n	8001c58 <_strtol_l.isra.0+0xe6>
 8001c64:	2430      	movs	r4, #48	; 0x30
 8001c66:	2f00      	cmp	r7, #0
 8001c68:	d1b3      	bne.n	8001bd2 <_strtol_l.isra.0+0x60>
 8001c6a:	2708      	movs	r7, #8
 8001c6c:	e7b1      	b.n	8001bd2 <_strtol_l.isra.0+0x60>
 8001c6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001c74 <strtol>:
 8001c74:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <strtol+0x24>)
 8001c76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001c78:	681c      	ldr	r4, [r3, #0]
 8001c7a:	4d08      	ldr	r5, [pc, #32]	; (8001c9c <strtol+0x28>)
 8001c7c:	6a23      	ldr	r3, [r4, #32]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	bf08      	it	eq
 8001c82:	462b      	moveq	r3, r5
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	4613      	mov	r3, r2
 8001c88:	460a      	mov	r2, r1
 8001c8a:	4601      	mov	r1, r0
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f7ff ff70 	bl	8001b72 <_strtol_l.isra.0>
 8001c92:	b003      	add	sp, #12
 8001c94:	bd30      	pop	{r4, r5, pc}
 8001c96:	bf00      	nop
 8001c98:	2000000c 	.word	0x2000000c
 8001c9c:	20000070 	.word	0x20000070

08001ca0 <__swbuf_r>:
 8001ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca2:	460e      	mov	r6, r1
 8001ca4:	4614      	mov	r4, r2
 8001ca6:	4605      	mov	r5, r0
 8001ca8:	b118      	cbz	r0, 8001cb2 <__swbuf_r+0x12>
 8001caa:	6983      	ldr	r3, [r0, #24]
 8001cac:	b90b      	cbnz	r3, 8001cb2 <__swbuf_r+0x12>
 8001cae:	f000 f9a9 	bl	8002004 <__sinit>
 8001cb2:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <__swbuf_r+0x98>)
 8001cb4:	429c      	cmp	r4, r3
 8001cb6:	d12a      	bne.n	8001d0e <__swbuf_r+0x6e>
 8001cb8:	686c      	ldr	r4, [r5, #4]
 8001cba:	69a3      	ldr	r3, [r4, #24]
 8001cbc:	60a3      	str	r3, [r4, #8]
 8001cbe:	89a3      	ldrh	r3, [r4, #12]
 8001cc0:	071a      	lsls	r2, r3, #28
 8001cc2:	d52e      	bpl.n	8001d22 <__swbuf_r+0x82>
 8001cc4:	6923      	ldr	r3, [r4, #16]
 8001cc6:	b363      	cbz	r3, 8001d22 <__swbuf_r+0x82>
 8001cc8:	6923      	ldr	r3, [r4, #16]
 8001cca:	6820      	ldr	r0, [r4, #0]
 8001ccc:	b2f6      	uxtb	r6, r6
 8001cce:	1ac0      	subs	r0, r0, r3
 8001cd0:	6963      	ldr	r3, [r4, #20]
 8001cd2:	4637      	mov	r7, r6
 8001cd4:	4298      	cmp	r0, r3
 8001cd6:	db04      	blt.n	8001ce2 <__swbuf_r+0x42>
 8001cd8:	4621      	mov	r1, r4
 8001cda:	4628      	mov	r0, r5
 8001cdc:	f000 f928 	bl	8001f30 <_fflush_r>
 8001ce0:	bb28      	cbnz	r0, 8001d2e <__swbuf_r+0x8e>
 8001ce2:	68a3      	ldr	r3, [r4, #8]
 8001ce4:	3001      	adds	r0, #1
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	60a3      	str	r3, [r4, #8]
 8001cea:	6823      	ldr	r3, [r4, #0]
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	6022      	str	r2, [r4, #0]
 8001cf0:	701e      	strb	r6, [r3, #0]
 8001cf2:	6963      	ldr	r3, [r4, #20]
 8001cf4:	4298      	cmp	r0, r3
 8001cf6:	d004      	beq.n	8001d02 <__swbuf_r+0x62>
 8001cf8:	89a3      	ldrh	r3, [r4, #12]
 8001cfa:	07db      	lsls	r3, r3, #31
 8001cfc:	d519      	bpl.n	8001d32 <__swbuf_r+0x92>
 8001cfe:	2e0a      	cmp	r6, #10
 8001d00:	d117      	bne.n	8001d32 <__swbuf_r+0x92>
 8001d02:	4621      	mov	r1, r4
 8001d04:	4628      	mov	r0, r5
 8001d06:	f000 f913 	bl	8001f30 <_fflush_r>
 8001d0a:	b190      	cbz	r0, 8001d32 <__swbuf_r+0x92>
 8001d0c:	e00f      	b.n	8001d2e <__swbuf_r+0x8e>
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <__swbuf_r+0x9c>)
 8001d10:	429c      	cmp	r4, r3
 8001d12:	d101      	bne.n	8001d18 <__swbuf_r+0x78>
 8001d14:	68ac      	ldr	r4, [r5, #8]
 8001d16:	e7d0      	b.n	8001cba <__swbuf_r+0x1a>
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <__swbuf_r+0xa0>)
 8001d1a:	429c      	cmp	r4, r3
 8001d1c:	bf08      	it	eq
 8001d1e:	68ec      	ldreq	r4, [r5, #12]
 8001d20:	e7cb      	b.n	8001cba <__swbuf_r+0x1a>
 8001d22:	4621      	mov	r1, r4
 8001d24:	4628      	mov	r0, r5
 8001d26:	f000 f80d 	bl	8001d44 <__swsetup_r>
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	d0cc      	beq.n	8001cc8 <__swbuf_r+0x28>
 8001d2e:	f04f 37ff 	mov.w	r7, #4294967295
 8001d32:	4638      	mov	r0, r7
 8001d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d36:	bf00      	nop
 8001d38:	08002fc0 	.word	0x08002fc0
 8001d3c:	08002fe0 	.word	0x08002fe0
 8001d40:	08002fa0 	.word	0x08002fa0

08001d44 <__swsetup_r>:
 8001d44:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <__swsetup_r+0xcc>)
 8001d46:	b570      	push	{r4, r5, r6, lr}
 8001d48:	681d      	ldr	r5, [r3, #0]
 8001d4a:	4606      	mov	r6, r0
 8001d4c:	460c      	mov	r4, r1
 8001d4e:	b125      	cbz	r5, 8001d5a <__swsetup_r+0x16>
 8001d50:	69ab      	ldr	r3, [r5, #24]
 8001d52:	b913      	cbnz	r3, 8001d5a <__swsetup_r+0x16>
 8001d54:	4628      	mov	r0, r5
 8001d56:	f000 f955 	bl	8002004 <__sinit>
 8001d5a:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <__swsetup_r+0xd0>)
 8001d5c:	429c      	cmp	r4, r3
 8001d5e:	d10f      	bne.n	8001d80 <__swsetup_r+0x3c>
 8001d60:	686c      	ldr	r4, [r5, #4]
 8001d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	0715      	lsls	r5, r2, #28
 8001d6a:	d42c      	bmi.n	8001dc6 <__swsetup_r+0x82>
 8001d6c:	06d0      	lsls	r0, r2, #27
 8001d6e:	d411      	bmi.n	8001d94 <__swsetup_r+0x50>
 8001d70:	2209      	movs	r2, #9
 8001d72:	6032      	str	r2, [r6, #0]
 8001d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d78:	81a3      	strh	r3, [r4, #12]
 8001d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7e:	bd70      	pop	{r4, r5, r6, pc}
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <__swsetup_r+0xd4>)
 8001d82:	429c      	cmp	r4, r3
 8001d84:	d101      	bne.n	8001d8a <__swsetup_r+0x46>
 8001d86:	68ac      	ldr	r4, [r5, #8]
 8001d88:	e7eb      	b.n	8001d62 <__swsetup_r+0x1e>
 8001d8a:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <__swsetup_r+0xd8>)
 8001d8c:	429c      	cmp	r4, r3
 8001d8e:	bf08      	it	eq
 8001d90:	68ec      	ldreq	r4, [r5, #12]
 8001d92:	e7e6      	b.n	8001d62 <__swsetup_r+0x1e>
 8001d94:	0751      	lsls	r1, r2, #29
 8001d96:	d512      	bpl.n	8001dbe <__swsetup_r+0x7a>
 8001d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d9a:	b141      	cbz	r1, 8001dae <__swsetup_r+0x6a>
 8001d9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001da0:	4299      	cmp	r1, r3
 8001da2:	d002      	beq.n	8001daa <__swsetup_r+0x66>
 8001da4:	4630      	mov	r0, r6
 8001da6:	f000 fa39 	bl	800221c <_free_r>
 8001daa:	2300      	movs	r3, #0
 8001dac:	6363      	str	r3, [r4, #52]	; 0x34
 8001dae:	89a3      	ldrh	r3, [r4, #12]
 8001db0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001db4:	81a3      	strh	r3, [r4, #12]
 8001db6:	2300      	movs	r3, #0
 8001db8:	6063      	str	r3, [r4, #4]
 8001dba:	6923      	ldr	r3, [r4, #16]
 8001dbc:	6023      	str	r3, [r4, #0]
 8001dbe:	89a3      	ldrh	r3, [r4, #12]
 8001dc0:	f043 0308 	orr.w	r3, r3, #8
 8001dc4:	81a3      	strh	r3, [r4, #12]
 8001dc6:	6923      	ldr	r3, [r4, #16]
 8001dc8:	b94b      	cbnz	r3, 8001dde <__swsetup_r+0x9a>
 8001dca:	89a3      	ldrh	r3, [r4, #12]
 8001dcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd4:	d003      	beq.n	8001dde <__swsetup_r+0x9a>
 8001dd6:	4621      	mov	r1, r4
 8001dd8:	4630      	mov	r0, r6
 8001dda:	f000 f9c5 	bl	8002168 <__smakebuf_r>
 8001dde:	89a2      	ldrh	r2, [r4, #12]
 8001de0:	f012 0301 	ands.w	r3, r2, #1
 8001de4:	d00c      	beq.n	8001e00 <__swsetup_r+0xbc>
 8001de6:	2300      	movs	r3, #0
 8001de8:	60a3      	str	r3, [r4, #8]
 8001dea:	6963      	ldr	r3, [r4, #20]
 8001dec:	425b      	negs	r3, r3
 8001dee:	61a3      	str	r3, [r4, #24]
 8001df0:	6923      	ldr	r3, [r4, #16]
 8001df2:	b953      	cbnz	r3, 8001e0a <__swsetup_r+0xc6>
 8001df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001df8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001dfc:	d1ba      	bne.n	8001d74 <__swsetup_r+0x30>
 8001dfe:	bd70      	pop	{r4, r5, r6, pc}
 8001e00:	0792      	lsls	r2, r2, #30
 8001e02:	bf58      	it	pl
 8001e04:	6963      	ldrpl	r3, [r4, #20]
 8001e06:	60a3      	str	r3, [r4, #8]
 8001e08:	e7f2      	b.n	8001df0 <__swsetup_r+0xac>
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	e7f7      	b.n	8001dfe <__swsetup_r+0xba>
 8001e0e:	bf00      	nop
 8001e10:	2000000c 	.word	0x2000000c
 8001e14:	08002fc0 	.word	0x08002fc0
 8001e18:	08002fe0 	.word	0x08002fe0
 8001e1c:	08002fa0 	.word	0x08002fa0

08001e20 <__sflush_r>:
 8001e20:	898a      	ldrh	r2, [r1, #12]
 8001e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e26:	4605      	mov	r5, r0
 8001e28:	0710      	lsls	r0, r2, #28
 8001e2a:	460c      	mov	r4, r1
 8001e2c:	d45a      	bmi.n	8001ee4 <__sflush_r+0xc4>
 8001e2e:	684b      	ldr	r3, [r1, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	dc05      	bgt.n	8001e40 <__sflush_r+0x20>
 8001e34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	dc02      	bgt.n	8001e40 <__sflush_r+0x20>
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e42:	2e00      	cmp	r6, #0
 8001e44:	d0f9      	beq.n	8001e3a <__sflush_r+0x1a>
 8001e46:	2300      	movs	r3, #0
 8001e48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001e4c:	682f      	ldr	r7, [r5, #0]
 8001e4e:	602b      	str	r3, [r5, #0]
 8001e50:	d033      	beq.n	8001eba <__sflush_r+0x9a>
 8001e52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e54:	89a3      	ldrh	r3, [r4, #12]
 8001e56:	075a      	lsls	r2, r3, #29
 8001e58:	d505      	bpl.n	8001e66 <__sflush_r+0x46>
 8001e5a:	6863      	ldr	r3, [r4, #4]
 8001e5c:	1ac0      	subs	r0, r0, r3
 8001e5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e60:	b10b      	cbz	r3, 8001e66 <__sflush_r+0x46>
 8001e62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e64:	1ac0      	subs	r0, r0, r3
 8001e66:	2300      	movs	r3, #0
 8001e68:	4602      	mov	r2, r0
 8001e6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e6c:	6a21      	ldr	r1, [r4, #32]
 8001e6e:	4628      	mov	r0, r5
 8001e70:	47b0      	blx	r6
 8001e72:	1c43      	adds	r3, r0, #1
 8001e74:	89a3      	ldrh	r3, [r4, #12]
 8001e76:	d106      	bne.n	8001e86 <__sflush_r+0x66>
 8001e78:	6829      	ldr	r1, [r5, #0]
 8001e7a:	291d      	cmp	r1, #29
 8001e7c:	d84b      	bhi.n	8001f16 <__sflush_r+0xf6>
 8001e7e:	4a2b      	ldr	r2, [pc, #172]	; (8001f2c <__sflush_r+0x10c>)
 8001e80:	40ca      	lsrs	r2, r1
 8001e82:	07d6      	lsls	r6, r2, #31
 8001e84:	d547      	bpl.n	8001f16 <__sflush_r+0xf6>
 8001e86:	2200      	movs	r2, #0
 8001e88:	6062      	str	r2, [r4, #4]
 8001e8a:	6922      	ldr	r2, [r4, #16]
 8001e8c:	04d9      	lsls	r1, r3, #19
 8001e8e:	6022      	str	r2, [r4, #0]
 8001e90:	d504      	bpl.n	8001e9c <__sflush_r+0x7c>
 8001e92:	1c42      	adds	r2, r0, #1
 8001e94:	d101      	bne.n	8001e9a <__sflush_r+0x7a>
 8001e96:	682b      	ldr	r3, [r5, #0]
 8001e98:	b903      	cbnz	r3, 8001e9c <__sflush_r+0x7c>
 8001e9a:	6560      	str	r0, [r4, #84]	; 0x54
 8001e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e9e:	602f      	str	r7, [r5, #0]
 8001ea0:	2900      	cmp	r1, #0
 8001ea2:	d0ca      	beq.n	8001e3a <__sflush_r+0x1a>
 8001ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ea8:	4299      	cmp	r1, r3
 8001eaa:	d002      	beq.n	8001eb2 <__sflush_r+0x92>
 8001eac:	4628      	mov	r0, r5
 8001eae:	f000 f9b5 	bl	800221c <_free_r>
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	6360      	str	r0, [r4, #52]	; 0x34
 8001eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001eba:	6a21      	ldr	r1, [r4, #32]
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	4628      	mov	r0, r5
 8001ec0:	47b0      	blx	r6
 8001ec2:	1c41      	adds	r1, r0, #1
 8001ec4:	d1c6      	bne.n	8001e54 <__sflush_r+0x34>
 8001ec6:	682b      	ldr	r3, [r5, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0c3      	beq.n	8001e54 <__sflush_r+0x34>
 8001ecc:	2b1d      	cmp	r3, #29
 8001ece:	d001      	beq.n	8001ed4 <__sflush_r+0xb4>
 8001ed0:	2b16      	cmp	r3, #22
 8001ed2:	d101      	bne.n	8001ed8 <__sflush_r+0xb8>
 8001ed4:	602f      	str	r7, [r5, #0]
 8001ed6:	e7b0      	b.n	8001e3a <__sflush_r+0x1a>
 8001ed8:	89a3      	ldrh	r3, [r4, #12]
 8001eda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ede:	81a3      	strh	r3, [r4, #12]
 8001ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ee4:	690f      	ldr	r7, [r1, #16]
 8001ee6:	2f00      	cmp	r7, #0
 8001ee8:	d0a7      	beq.n	8001e3a <__sflush_r+0x1a>
 8001eea:	0793      	lsls	r3, r2, #30
 8001eec:	bf18      	it	ne
 8001eee:	2300      	movne	r3, #0
 8001ef0:	680e      	ldr	r6, [r1, #0]
 8001ef2:	bf08      	it	eq
 8001ef4:	694b      	ldreq	r3, [r1, #20]
 8001ef6:	eba6 0807 	sub.w	r8, r6, r7
 8001efa:	600f      	str	r7, [r1, #0]
 8001efc:	608b      	str	r3, [r1, #8]
 8001efe:	f1b8 0f00 	cmp.w	r8, #0
 8001f02:	dd9a      	ble.n	8001e3a <__sflush_r+0x1a>
 8001f04:	4643      	mov	r3, r8
 8001f06:	463a      	mov	r2, r7
 8001f08:	6a21      	ldr	r1, [r4, #32]
 8001f0a:	4628      	mov	r0, r5
 8001f0c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001f0e:	47b0      	blx	r6
 8001f10:	2800      	cmp	r0, #0
 8001f12:	dc07      	bgt.n	8001f24 <__sflush_r+0x104>
 8001f14:	89a3      	ldrh	r3, [r4, #12]
 8001f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f1a:	81a3      	strh	r3, [r4, #12]
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f24:	4407      	add	r7, r0
 8001f26:	eba8 0800 	sub.w	r8, r8, r0
 8001f2a:	e7e8      	b.n	8001efe <__sflush_r+0xde>
 8001f2c:	20400001 	.word	0x20400001

08001f30 <_fflush_r>:
 8001f30:	b538      	push	{r3, r4, r5, lr}
 8001f32:	690b      	ldr	r3, [r1, #16]
 8001f34:	4605      	mov	r5, r0
 8001f36:	460c      	mov	r4, r1
 8001f38:	b1db      	cbz	r3, 8001f72 <_fflush_r+0x42>
 8001f3a:	b118      	cbz	r0, 8001f44 <_fflush_r+0x14>
 8001f3c:	6983      	ldr	r3, [r0, #24]
 8001f3e:	b90b      	cbnz	r3, 8001f44 <_fflush_r+0x14>
 8001f40:	f000 f860 	bl	8002004 <__sinit>
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <_fflush_r+0x48>)
 8001f46:	429c      	cmp	r4, r3
 8001f48:	d109      	bne.n	8001f5e <_fflush_r+0x2e>
 8001f4a:	686c      	ldr	r4, [r5, #4]
 8001f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f50:	b17b      	cbz	r3, 8001f72 <_fflush_r+0x42>
 8001f52:	4621      	mov	r1, r4
 8001f54:	4628      	mov	r0, r5
 8001f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f5a:	f7ff bf61 	b.w	8001e20 <__sflush_r>
 8001f5e:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <_fflush_r+0x4c>)
 8001f60:	429c      	cmp	r4, r3
 8001f62:	d101      	bne.n	8001f68 <_fflush_r+0x38>
 8001f64:	68ac      	ldr	r4, [r5, #8]
 8001f66:	e7f1      	b.n	8001f4c <_fflush_r+0x1c>
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <_fflush_r+0x50>)
 8001f6a:	429c      	cmp	r4, r3
 8001f6c:	bf08      	it	eq
 8001f6e:	68ec      	ldreq	r4, [r5, #12]
 8001f70:	e7ec      	b.n	8001f4c <_fflush_r+0x1c>
 8001f72:	2000      	movs	r0, #0
 8001f74:	bd38      	pop	{r3, r4, r5, pc}
 8001f76:	bf00      	nop
 8001f78:	08002fc0 	.word	0x08002fc0
 8001f7c:	08002fe0 	.word	0x08002fe0
 8001f80:	08002fa0 	.word	0x08002fa0

08001f84 <_cleanup_r>:
 8001f84:	4901      	ldr	r1, [pc, #4]	; (8001f8c <_cleanup_r+0x8>)
 8001f86:	f000 b8a9 	b.w	80020dc <_fwalk_reent>
 8001f8a:	bf00      	nop
 8001f8c:	08001f31 	.word	0x08001f31

08001f90 <std.isra.0>:
 8001f90:	2300      	movs	r3, #0
 8001f92:	b510      	push	{r4, lr}
 8001f94:	4604      	mov	r4, r0
 8001f96:	6003      	str	r3, [r0, #0]
 8001f98:	6043      	str	r3, [r0, #4]
 8001f9a:	6083      	str	r3, [r0, #8]
 8001f9c:	8181      	strh	r1, [r0, #12]
 8001f9e:	6643      	str	r3, [r0, #100]	; 0x64
 8001fa0:	81c2      	strh	r2, [r0, #14]
 8001fa2:	6103      	str	r3, [r0, #16]
 8001fa4:	6143      	str	r3, [r0, #20]
 8001fa6:	6183      	str	r3, [r0, #24]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	2208      	movs	r2, #8
 8001fac:	305c      	adds	r0, #92	; 0x5c
 8001fae:	f7ff fce5 	bl	800197c <memset>
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <std.isra.0+0x38>)
 8001fb4:	6224      	str	r4, [r4, #32]
 8001fb6:	6263      	str	r3, [r4, #36]	; 0x24
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <std.isra.0+0x3c>)
 8001fba:	62a3      	str	r3, [r4, #40]	; 0x28
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <std.isra.0+0x40>)
 8001fbe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001fc0:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <std.isra.0+0x44>)
 8001fc2:	6323      	str	r3, [r4, #48]	; 0x30
 8001fc4:	bd10      	pop	{r4, pc}
 8001fc6:	bf00      	nop
 8001fc8:	08002bdd 	.word	0x08002bdd
 8001fcc:	08002bff 	.word	0x08002bff
 8001fd0:	08002c37 	.word	0x08002c37
 8001fd4:	08002c5b 	.word	0x08002c5b

08001fd8 <__sfmoreglue>:
 8001fd8:	b570      	push	{r4, r5, r6, lr}
 8001fda:	2568      	movs	r5, #104	; 0x68
 8001fdc:	1e4a      	subs	r2, r1, #1
 8001fde:	4355      	muls	r5, r2
 8001fe0:	460e      	mov	r6, r1
 8001fe2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001fe6:	f000 f965 	bl	80022b4 <_malloc_r>
 8001fea:	4604      	mov	r4, r0
 8001fec:	b140      	cbz	r0, 8002000 <__sfmoreglue+0x28>
 8001fee:	2100      	movs	r1, #0
 8001ff0:	e880 0042 	stmia.w	r0, {r1, r6}
 8001ff4:	300c      	adds	r0, #12
 8001ff6:	60a0      	str	r0, [r4, #8]
 8001ff8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001ffc:	f7ff fcbe 	bl	800197c <memset>
 8002000:	4620      	mov	r0, r4
 8002002:	bd70      	pop	{r4, r5, r6, pc}

08002004 <__sinit>:
 8002004:	6983      	ldr	r3, [r0, #24]
 8002006:	b510      	push	{r4, lr}
 8002008:	4604      	mov	r4, r0
 800200a:	bb33      	cbnz	r3, 800205a <__sinit+0x56>
 800200c:	6483      	str	r3, [r0, #72]	; 0x48
 800200e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8002010:	6503      	str	r3, [r0, #80]	; 0x50
 8002012:	4b12      	ldr	r3, [pc, #72]	; (800205c <__sinit+0x58>)
 8002014:	4a12      	ldr	r2, [pc, #72]	; (8002060 <__sinit+0x5c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6282      	str	r2, [r0, #40]	; 0x28
 800201a:	4298      	cmp	r0, r3
 800201c:	bf04      	itt	eq
 800201e:	2301      	moveq	r3, #1
 8002020:	6183      	streq	r3, [r0, #24]
 8002022:	f000 f81f 	bl	8002064 <__sfp>
 8002026:	6060      	str	r0, [r4, #4]
 8002028:	4620      	mov	r0, r4
 800202a:	f000 f81b 	bl	8002064 <__sfp>
 800202e:	60a0      	str	r0, [r4, #8]
 8002030:	4620      	mov	r0, r4
 8002032:	f000 f817 	bl	8002064 <__sfp>
 8002036:	2200      	movs	r2, #0
 8002038:	60e0      	str	r0, [r4, #12]
 800203a:	2104      	movs	r1, #4
 800203c:	6860      	ldr	r0, [r4, #4]
 800203e:	f7ff ffa7 	bl	8001f90 <std.isra.0>
 8002042:	2201      	movs	r2, #1
 8002044:	2109      	movs	r1, #9
 8002046:	68a0      	ldr	r0, [r4, #8]
 8002048:	f7ff ffa2 	bl	8001f90 <std.isra.0>
 800204c:	2202      	movs	r2, #2
 800204e:	2112      	movs	r1, #18
 8002050:	68e0      	ldr	r0, [r4, #12]
 8002052:	f7ff ff9d 	bl	8001f90 <std.isra.0>
 8002056:	2301      	movs	r3, #1
 8002058:	61a3      	str	r3, [r4, #24]
 800205a:	bd10      	pop	{r4, pc}
 800205c:	08002f9c 	.word	0x08002f9c
 8002060:	08001f85 	.word	0x08001f85

08002064 <__sfp>:
 8002064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002066:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <__sfp+0x74>)
 8002068:	4607      	mov	r7, r0
 800206a:	681e      	ldr	r6, [r3, #0]
 800206c:	69b3      	ldr	r3, [r6, #24]
 800206e:	b913      	cbnz	r3, 8002076 <__sfp+0x12>
 8002070:	4630      	mov	r0, r6
 8002072:	f7ff ffc7 	bl	8002004 <__sinit>
 8002076:	3648      	adds	r6, #72	; 0x48
 8002078:	68b4      	ldr	r4, [r6, #8]
 800207a:	6873      	ldr	r3, [r6, #4]
 800207c:	3b01      	subs	r3, #1
 800207e:	d503      	bpl.n	8002088 <__sfp+0x24>
 8002080:	6833      	ldr	r3, [r6, #0]
 8002082:	b133      	cbz	r3, 8002092 <__sfp+0x2e>
 8002084:	6836      	ldr	r6, [r6, #0]
 8002086:	e7f7      	b.n	8002078 <__sfp+0x14>
 8002088:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800208c:	b16d      	cbz	r5, 80020aa <__sfp+0x46>
 800208e:	3468      	adds	r4, #104	; 0x68
 8002090:	e7f4      	b.n	800207c <__sfp+0x18>
 8002092:	2104      	movs	r1, #4
 8002094:	4638      	mov	r0, r7
 8002096:	f7ff ff9f 	bl	8001fd8 <__sfmoreglue>
 800209a:	6030      	str	r0, [r6, #0]
 800209c:	2800      	cmp	r0, #0
 800209e:	d1f1      	bne.n	8002084 <__sfp+0x20>
 80020a0:	230c      	movs	r3, #12
 80020a2:	4604      	mov	r4, r0
 80020a4:	603b      	str	r3, [r7, #0]
 80020a6:	4620      	mov	r0, r4
 80020a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020ae:	81e3      	strh	r3, [r4, #14]
 80020b0:	2301      	movs	r3, #1
 80020b2:	6665      	str	r5, [r4, #100]	; 0x64
 80020b4:	81a3      	strh	r3, [r4, #12]
 80020b6:	6025      	str	r5, [r4, #0]
 80020b8:	60a5      	str	r5, [r4, #8]
 80020ba:	6065      	str	r5, [r4, #4]
 80020bc:	6125      	str	r5, [r4, #16]
 80020be:	6165      	str	r5, [r4, #20]
 80020c0:	61a5      	str	r5, [r4, #24]
 80020c2:	2208      	movs	r2, #8
 80020c4:	4629      	mov	r1, r5
 80020c6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80020ca:	f7ff fc57 	bl	800197c <memset>
 80020ce:	6365      	str	r5, [r4, #52]	; 0x34
 80020d0:	63a5      	str	r5, [r4, #56]	; 0x38
 80020d2:	64a5      	str	r5, [r4, #72]	; 0x48
 80020d4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80020d6:	e7e6      	b.n	80020a6 <__sfp+0x42>
 80020d8:	08002f9c 	.word	0x08002f9c

080020dc <_fwalk_reent>:
 80020dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020e0:	4680      	mov	r8, r0
 80020e2:	4689      	mov	r9, r1
 80020e4:	2600      	movs	r6, #0
 80020e6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80020ea:	b914      	cbnz	r4, 80020f2 <_fwalk_reent+0x16>
 80020ec:	4630      	mov	r0, r6
 80020ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80020f2:	68a5      	ldr	r5, [r4, #8]
 80020f4:	6867      	ldr	r7, [r4, #4]
 80020f6:	3f01      	subs	r7, #1
 80020f8:	d501      	bpl.n	80020fe <_fwalk_reent+0x22>
 80020fa:	6824      	ldr	r4, [r4, #0]
 80020fc:	e7f5      	b.n	80020ea <_fwalk_reent+0xe>
 80020fe:	89ab      	ldrh	r3, [r5, #12]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d907      	bls.n	8002114 <_fwalk_reent+0x38>
 8002104:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002108:	3301      	adds	r3, #1
 800210a:	d003      	beq.n	8002114 <_fwalk_reent+0x38>
 800210c:	4629      	mov	r1, r5
 800210e:	4640      	mov	r0, r8
 8002110:	47c8      	blx	r9
 8002112:	4306      	orrs	r6, r0
 8002114:	3568      	adds	r5, #104	; 0x68
 8002116:	e7ee      	b.n	80020f6 <_fwalk_reent+0x1a>

08002118 <__locale_ctype_ptr_l>:
 8002118:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800211c:	4770      	bx	lr

0800211e <__swhatbuf_r>:
 800211e:	b570      	push	{r4, r5, r6, lr}
 8002120:	460e      	mov	r6, r1
 8002122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002126:	b090      	sub	sp, #64	; 0x40
 8002128:	2900      	cmp	r1, #0
 800212a:	4614      	mov	r4, r2
 800212c:	461d      	mov	r5, r3
 800212e:	da07      	bge.n	8002140 <__swhatbuf_r+0x22>
 8002130:	2300      	movs	r3, #0
 8002132:	602b      	str	r3, [r5, #0]
 8002134:	89b3      	ldrh	r3, [r6, #12]
 8002136:	061a      	lsls	r2, r3, #24
 8002138:	d410      	bmi.n	800215c <__swhatbuf_r+0x3e>
 800213a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800213e:	e00e      	b.n	800215e <__swhatbuf_r+0x40>
 8002140:	aa01      	add	r2, sp, #4
 8002142:	f000 fdbd 	bl	8002cc0 <_fstat_r>
 8002146:	2800      	cmp	r0, #0
 8002148:	dbf2      	blt.n	8002130 <__swhatbuf_r+0x12>
 800214a:	9a02      	ldr	r2, [sp, #8]
 800214c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002150:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002154:	425a      	negs	r2, r3
 8002156:	415a      	adcs	r2, r3
 8002158:	602a      	str	r2, [r5, #0]
 800215a:	e7ee      	b.n	800213a <__swhatbuf_r+0x1c>
 800215c:	2340      	movs	r3, #64	; 0x40
 800215e:	2000      	movs	r0, #0
 8002160:	6023      	str	r3, [r4, #0]
 8002162:	b010      	add	sp, #64	; 0x40
 8002164:	bd70      	pop	{r4, r5, r6, pc}
	...

08002168 <__smakebuf_r>:
 8002168:	898b      	ldrh	r3, [r1, #12]
 800216a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800216c:	079d      	lsls	r5, r3, #30
 800216e:	4606      	mov	r6, r0
 8002170:	460c      	mov	r4, r1
 8002172:	d507      	bpl.n	8002184 <__smakebuf_r+0x1c>
 8002174:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002178:	6023      	str	r3, [r4, #0]
 800217a:	6123      	str	r3, [r4, #16]
 800217c:	2301      	movs	r3, #1
 800217e:	6163      	str	r3, [r4, #20]
 8002180:	b002      	add	sp, #8
 8002182:	bd70      	pop	{r4, r5, r6, pc}
 8002184:	ab01      	add	r3, sp, #4
 8002186:	466a      	mov	r2, sp
 8002188:	f7ff ffc9 	bl	800211e <__swhatbuf_r>
 800218c:	9900      	ldr	r1, [sp, #0]
 800218e:	4605      	mov	r5, r0
 8002190:	4630      	mov	r0, r6
 8002192:	f000 f88f 	bl	80022b4 <_malloc_r>
 8002196:	b948      	cbnz	r0, 80021ac <__smakebuf_r+0x44>
 8002198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800219c:	059a      	lsls	r2, r3, #22
 800219e:	d4ef      	bmi.n	8002180 <__smakebuf_r+0x18>
 80021a0:	f023 0303 	bic.w	r3, r3, #3
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	81a3      	strh	r3, [r4, #12]
 80021aa:	e7e3      	b.n	8002174 <__smakebuf_r+0xc>
 80021ac:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <__smakebuf_r+0x7c>)
 80021ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80021b0:	89a3      	ldrh	r3, [r4, #12]
 80021b2:	6020      	str	r0, [r4, #0]
 80021b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021b8:	81a3      	strh	r3, [r4, #12]
 80021ba:	9b00      	ldr	r3, [sp, #0]
 80021bc:	6120      	str	r0, [r4, #16]
 80021be:	6163      	str	r3, [r4, #20]
 80021c0:	9b01      	ldr	r3, [sp, #4]
 80021c2:	b15b      	cbz	r3, 80021dc <__smakebuf_r+0x74>
 80021c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021c8:	4630      	mov	r0, r6
 80021ca:	f000 fd8b 	bl	8002ce4 <_isatty_r>
 80021ce:	b128      	cbz	r0, 80021dc <__smakebuf_r+0x74>
 80021d0:	89a3      	ldrh	r3, [r4, #12]
 80021d2:	f023 0303 	bic.w	r3, r3, #3
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	81a3      	strh	r3, [r4, #12]
 80021dc:	89a3      	ldrh	r3, [r4, #12]
 80021de:	431d      	orrs	r5, r3
 80021e0:	81a5      	strh	r5, [r4, #12]
 80021e2:	e7cd      	b.n	8002180 <__smakebuf_r+0x18>
 80021e4:	08001f85 	.word	0x08001f85

080021e8 <malloc>:
 80021e8:	4b02      	ldr	r3, [pc, #8]	; (80021f4 <malloc+0xc>)
 80021ea:	4601      	mov	r1, r0
 80021ec:	6818      	ldr	r0, [r3, #0]
 80021ee:	f000 b861 	b.w	80022b4 <_malloc_r>
 80021f2:	bf00      	nop
 80021f4:	2000000c 	.word	0x2000000c

080021f8 <__ascii_mbtowc>:
 80021f8:	b082      	sub	sp, #8
 80021fa:	b901      	cbnz	r1, 80021fe <__ascii_mbtowc+0x6>
 80021fc:	a901      	add	r1, sp, #4
 80021fe:	b142      	cbz	r2, 8002212 <__ascii_mbtowc+0x1a>
 8002200:	b14b      	cbz	r3, 8002216 <__ascii_mbtowc+0x1e>
 8002202:	7813      	ldrb	r3, [r2, #0]
 8002204:	600b      	str	r3, [r1, #0]
 8002206:	7812      	ldrb	r2, [r2, #0]
 8002208:	1c10      	adds	r0, r2, #0
 800220a:	bf18      	it	ne
 800220c:	2001      	movne	r0, #1
 800220e:	b002      	add	sp, #8
 8002210:	4770      	bx	lr
 8002212:	4610      	mov	r0, r2
 8002214:	e7fb      	b.n	800220e <__ascii_mbtowc+0x16>
 8002216:	f06f 0001 	mvn.w	r0, #1
 800221a:	e7f8      	b.n	800220e <__ascii_mbtowc+0x16>

0800221c <_free_r>:
 800221c:	b538      	push	{r3, r4, r5, lr}
 800221e:	4605      	mov	r5, r0
 8002220:	2900      	cmp	r1, #0
 8002222:	d043      	beq.n	80022ac <_free_r+0x90>
 8002224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002228:	1f0c      	subs	r4, r1, #4
 800222a:	2b00      	cmp	r3, #0
 800222c:	bfb8      	it	lt
 800222e:	18e4      	addlt	r4, r4, r3
 8002230:	f000 fda2 	bl	8002d78 <__malloc_lock>
 8002234:	4a1e      	ldr	r2, [pc, #120]	; (80022b0 <_free_r+0x94>)
 8002236:	6813      	ldr	r3, [r2, #0]
 8002238:	4610      	mov	r0, r2
 800223a:	b933      	cbnz	r3, 800224a <_free_r+0x2e>
 800223c:	6063      	str	r3, [r4, #4]
 800223e:	6014      	str	r4, [r2, #0]
 8002240:	4628      	mov	r0, r5
 8002242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002246:	f000 bd98 	b.w	8002d7a <__malloc_unlock>
 800224a:	42a3      	cmp	r3, r4
 800224c:	d90b      	bls.n	8002266 <_free_r+0x4a>
 800224e:	6821      	ldr	r1, [r4, #0]
 8002250:	1862      	adds	r2, r4, r1
 8002252:	4293      	cmp	r3, r2
 8002254:	bf01      	itttt	eq
 8002256:	681a      	ldreq	r2, [r3, #0]
 8002258:	685b      	ldreq	r3, [r3, #4]
 800225a:	1852      	addeq	r2, r2, r1
 800225c:	6022      	streq	r2, [r4, #0]
 800225e:	6063      	str	r3, [r4, #4]
 8002260:	6004      	str	r4, [r0, #0]
 8002262:	e7ed      	b.n	8002240 <_free_r+0x24>
 8002264:	4613      	mov	r3, r2
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	b10a      	cbz	r2, 800226e <_free_r+0x52>
 800226a:	42a2      	cmp	r2, r4
 800226c:	d9fa      	bls.n	8002264 <_free_r+0x48>
 800226e:	6819      	ldr	r1, [r3, #0]
 8002270:	1858      	adds	r0, r3, r1
 8002272:	42a0      	cmp	r0, r4
 8002274:	d10b      	bne.n	800228e <_free_r+0x72>
 8002276:	6820      	ldr	r0, [r4, #0]
 8002278:	4401      	add	r1, r0
 800227a:	1858      	adds	r0, r3, r1
 800227c:	4282      	cmp	r2, r0
 800227e:	6019      	str	r1, [r3, #0]
 8002280:	d1de      	bne.n	8002240 <_free_r+0x24>
 8002282:	6810      	ldr	r0, [r2, #0]
 8002284:	6852      	ldr	r2, [r2, #4]
 8002286:	4401      	add	r1, r0
 8002288:	6019      	str	r1, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	e7d8      	b.n	8002240 <_free_r+0x24>
 800228e:	d902      	bls.n	8002296 <_free_r+0x7a>
 8002290:	230c      	movs	r3, #12
 8002292:	602b      	str	r3, [r5, #0]
 8002294:	e7d4      	b.n	8002240 <_free_r+0x24>
 8002296:	6820      	ldr	r0, [r4, #0]
 8002298:	1821      	adds	r1, r4, r0
 800229a:	428a      	cmp	r2, r1
 800229c:	bf01      	itttt	eq
 800229e:	6811      	ldreq	r1, [r2, #0]
 80022a0:	6852      	ldreq	r2, [r2, #4]
 80022a2:	1809      	addeq	r1, r1, r0
 80022a4:	6021      	streq	r1, [r4, #0]
 80022a6:	6062      	str	r2, [r4, #4]
 80022a8:	605c      	str	r4, [r3, #4]
 80022aa:	e7c9      	b.n	8002240 <_free_r+0x24>
 80022ac:	bd38      	pop	{r3, r4, r5, pc}
 80022ae:	bf00      	nop
 80022b0:	2000020c 	.word	0x2000020c

080022b4 <_malloc_r>:
 80022b4:	b570      	push	{r4, r5, r6, lr}
 80022b6:	1ccd      	adds	r5, r1, #3
 80022b8:	f025 0503 	bic.w	r5, r5, #3
 80022bc:	3508      	adds	r5, #8
 80022be:	2d0c      	cmp	r5, #12
 80022c0:	bf38      	it	cc
 80022c2:	250c      	movcc	r5, #12
 80022c4:	2d00      	cmp	r5, #0
 80022c6:	4606      	mov	r6, r0
 80022c8:	db01      	blt.n	80022ce <_malloc_r+0x1a>
 80022ca:	42a9      	cmp	r1, r5
 80022cc:	d903      	bls.n	80022d6 <_malloc_r+0x22>
 80022ce:	230c      	movs	r3, #12
 80022d0:	6033      	str	r3, [r6, #0]
 80022d2:	2000      	movs	r0, #0
 80022d4:	bd70      	pop	{r4, r5, r6, pc}
 80022d6:	f000 fd4f 	bl	8002d78 <__malloc_lock>
 80022da:	4a23      	ldr	r2, [pc, #140]	; (8002368 <_malloc_r+0xb4>)
 80022dc:	6814      	ldr	r4, [r2, #0]
 80022de:	4621      	mov	r1, r4
 80022e0:	b991      	cbnz	r1, 8002308 <_malloc_r+0x54>
 80022e2:	4c22      	ldr	r4, [pc, #136]	; (800236c <_malloc_r+0xb8>)
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	b91b      	cbnz	r3, 80022f0 <_malloc_r+0x3c>
 80022e8:	4630      	mov	r0, r6
 80022ea:	f000 fc67 	bl	8002bbc <_sbrk_r>
 80022ee:	6020      	str	r0, [r4, #0]
 80022f0:	4629      	mov	r1, r5
 80022f2:	4630      	mov	r0, r6
 80022f4:	f000 fc62 	bl	8002bbc <_sbrk_r>
 80022f8:	1c43      	adds	r3, r0, #1
 80022fa:	d126      	bne.n	800234a <_malloc_r+0x96>
 80022fc:	230c      	movs	r3, #12
 80022fe:	4630      	mov	r0, r6
 8002300:	6033      	str	r3, [r6, #0]
 8002302:	f000 fd3a 	bl	8002d7a <__malloc_unlock>
 8002306:	e7e4      	b.n	80022d2 <_malloc_r+0x1e>
 8002308:	680b      	ldr	r3, [r1, #0]
 800230a:	1b5b      	subs	r3, r3, r5
 800230c:	d41a      	bmi.n	8002344 <_malloc_r+0x90>
 800230e:	2b0b      	cmp	r3, #11
 8002310:	d90f      	bls.n	8002332 <_malloc_r+0x7e>
 8002312:	600b      	str	r3, [r1, #0]
 8002314:	18cc      	adds	r4, r1, r3
 8002316:	50cd      	str	r5, [r1, r3]
 8002318:	4630      	mov	r0, r6
 800231a:	f000 fd2e 	bl	8002d7a <__malloc_unlock>
 800231e:	f104 000b 	add.w	r0, r4, #11
 8002322:	1d23      	adds	r3, r4, #4
 8002324:	f020 0007 	bic.w	r0, r0, #7
 8002328:	1ac3      	subs	r3, r0, r3
 800232a:	d01b      	beq.n	8002364 <_malloc_r+0xb0>
 800232c:	425a      	negs	r2, r3
 800232e:	50e2      	str	r2, [r4, r3]
 8002330:	bd70      	pop	{r4, r5, r6, pc}
 8002332:	428c      	cmp	r4, r1
 8002334:	bf0b      	itete	eq
 8002336:	6863      	ldreq	r3, [r4, #4]
 8002338:	684b      	ldrne	r3, [r1, #4]
 800233a:	6013      	streq	r3, [r2, #0]
 800233c:	6063      	strne	r3, [r4, #4]
 800233e:	bf18      	it	ne
 8002340:	460c      	movne	r4, r1
 8002342:	e7e9      	b.n	8002318 <_malloc_r+0x64>
 8002344:	460c      	mov	r4, r1
 8002346:	6849      	ldr	r1, [r1, #4]
 8002348:	e7ca      	b.n	80022e0 <_malloc_r+0x2c>
 800234a:	1cc4      	adds	r4, r0, #3
 800234c:	f024 0403 	bic.w	r4, r4, #3
 8002350:	42a0      	cmp	r0, r4
 8002352:	d005      	beq.n	8002360 <_malloc_r+0xac>
 8002354:	1a21      	subs	r1, r4, r0
 8002356:	4630      	mov	r0, r6
 8002358:	f000 fc30 	bl	8002bbc <_sbrk_r>
 800235c:	3001      	adds	r0, #1
 800235e:	d0cd      	beq.n	80022fc <_malloc_r+0x48>
 8002360:	6025      	str	r5, [r4, #0]
 8002362:	e7d9      	b.n	8002318 <_malloc_r+0x64>
 8002364:	bd70      	pop	{r4, r5, r6, pc}
 8002366:	bf00      	nop
 8002368:	2000020c 	.word	0x2000020c
 800236c:	20000210 	.word	0x20000210

08002370 <__ssputs_r>:
 8002370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002374:	688e      	ldr	r6, [r1, #8]
 8002376:	4682      	mov	sl, r0
 8002378:	429e      	cmp	r6, r3
 800237a:	460c      	mov	r4, r1
 800237c:	4691      	mov	r9, r2
 800237e:	4698      	mov	r8, r3
 8002380:	d835      	bhi.n	80023ee <__ssputs_r+0x7e>
 8002382:	898a      	ldrh	r2, [r1, #12]
 8002384:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002388:	d031      	beq.n	80023ee <__ssputs_r+0x7e>
 800238a:	2302      	movs	r3, #2
 800238c:	6825      	ldr	r5, [r4, #0]
 800238e:	6909      	ldr	r1, [r1, #16]
 8002390:	1a6f      	subs	r7, r5, r1
 8002392:	6965      	ldr	r5, [r4, #20]
 8002394:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002398:	fb95 f5f3 	sdiv	r5, r5, r3
 800239c:	f108 0301 	add.w	r3, r8, #1
 80023a0:	443b      	add	r3, r7
 80023a2:	429d      	cmp	r5, r3
 80023a4:	bf38      	it	cc
 80023a6:	461d      	movcc	r5, r3
 80023a8:	0553      	lsls	r3, r2, #21
 80023aa:	d531      	bpl.n	8002410 <__ssputs_r+0xa0>
 80023ac:	4629      	mov	r1, r5
 80023ae:	f7ff ff81 	bl	80022b4 <_malloc_r>
 80023b2:	4606      	mov	r6, r0
 80023b4:	b950      	cbnz	r0, 80023cc <__ssputs_r+0x5c>
 80023b6:	230c      	movs	r3, #12
 80023b8:	f8ca 3000 	str.w	r3, [sl]
 80023bc:	89a3      	ldrh	r3, [r4, #12]
 80023be:	f04f 30ff 	mov.w	r0, #4294967295
 80023c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023c6:	81a3      	strh	r3, [r4, #12]
 80023c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023cc:	463a      	mov	r2, r7
 80023ce:	6921      	ldr	r1, [r4, #16]
 80023d0:	f7ff fac9 	bl	8001966 <memcpy>
 80023d4:	89a3      	ldrh	r3, [r4, #12]
 80023d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80023da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023de:	81a3      	strh	r3, [r4, #12]
 80023e0:	6126      	str	r6, [r4, #16]
 80023e2:	443e      	add	r6, r7
 80023e4:	6026      	str	r6, [r4, #0]
 80023e6:	4646      	mov	r6, r8
 80023e8:	6165      	str	r5, [r4, #20]
 80023ea:	1bed      	subs	r5, r5, r7
 80023ec:	60a5      	str	r5, [r4, #8]
 80023ee:	4546      	cmp	r6, r8
 80023f0:	bf28      	it	cs
 80023f2:	4646      	movcs	r6, r8
 80023f4:	4649      	mov	r1, r9
 80023f6:	4632      	mov	r2, r6
 80023f8:	6820      	ldr	r0, [r4, #0]
 80023fa:	f000 fca3 	bl	8002d44 <memmove>
 80023fe:	68a3      	ldr	r3, [r4, #8]
 8002400:	2000      	movs	r0, #0
 8002402:	1b9b      	subs	r3, r3, r6
 8002404:	60a3      	str	r3, [r4, #8]
 8002406:	6823      	ldr	r3, [r4, #0]
 8002408:	441e      	add	r6, r3
 800240a:	6026      	str	r6, [r4, #0]
 800240c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002410:	462a      	mov	r2, r5
 8002412:	f000 fcb3 	bl	8002d7c <_realloc_r>
 8002416:	4606      	mov	r6, r0
 8002418:	2800      	cmp	r0, #0
 800241a:	d1e1      	bne.n	80023e0 <__ssputs_r+0x70>
 800241c:	6921      	ldr	r1, [r4, #16]
 800241e:	4650      	mov	r0, sl
 8002420:	f7ff fefc 	bl	800221c <_free_r>
 8002424:	e7c7      	b.n	80023b6 <__ssputs_r+0x46>
	...

08002428 <_svfiprintf_r>:
 8002428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800242c:	b09d      	sub	sp, #116	; 0x74
 800242e:	9303      	str	r3, [sp, #12]
 8002430:	898b      	ldrh	r3, [r1, #12]
 8002432:	4680      	mov	r8, r0
 8002434:	061c      	lsls	r4, r3, #24
 8002436:	460d      	mov	r5, r1
 8002438:	4616      	mov	r6, r2
 800243a:	d50f      	bpl.n	800245c <_svfiprintf_r+0x34>
 800243c:	690b      	ldr	r3, [r1, #16]
 800243e:	b96b      	cbnz	r3, 800245c <_svfiprintf_r+0x34>
 8002440:	2140      	movs	r1, #64	; 0x40
 8002442:	f7ff ff37 	bl	80022b4 <_malloc_r>
 8002446:	6028      	str	r0, [r5, #0]
 8002448:	6128      	str	r0, [r5, #16]
 800244a:	b928      	cbnz	r0, 8002458 <_svfiprintf_r+0x30>
 800244c:	230c      	movs	r3, #12
 800244e:	f8c8 3000 	str.w	r3, [r8]
 8002452:	f04f 30ff 	mov.w	r0, #4294967295
 8002456:	e0c4      	b.n	80025e2 <_svfiprintf_r+0x1ba>
 8002458:	2340      	movs	r3, #64	; 0x40
 800245a:	616b      	str	r3, [r5, #20]
 800245c:	2300      	movs	r3, #0
 800245e:	9309      	str	r3, [sp, #36]	; 0x24
 8002460:	2320      	movs	r3, #32
 8002462:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002466:	2330      	movs	r3, #48	; 0x30
 8002468:	f04f 0b01 	mov.w	fp, #1
 800246c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002470:	4637      	mov	r7, r6
 8002472:	463c      	mov	r4, r7
 8002474:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d13c      	bne.n	80024f6 <_svfiprintf_r+0xce>
 800247c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002480:	d00b      	beq.n	800249a <_svfiprintf_r+0x72>
 8002482:	4653      	mov	r3, sl
 8002484:	4632      	mov	r2, r6
 8002486:	4629      	mov	r1, r5
 8002488:	4640      	mov	r0, r8
 800248a:	f7ff ff71 	bl	8002370 <__ssputs_r>
 800248e:	3001      	adds	r0, #1
 8002490:	f000 80a2 	beq.w	80025d8 <_svfiprintf_r+0x1b0>
 8002494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002496:	4453      	add	r3, sl
 8002498:	9309      	str	r3, [sp, #36]	; 0x24
 800249a:	783b      	ldrb	r3, [r7, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 809b 	beq.w	80025d8 <_svfiprintf_r+0x1b0>
 80024a2:	2300      	movs	r3, #0
 80024a4:	f04f 32ff 	mov.w	r2, #4294967295
 80024a8:	9304      	str	r3, [sp, #16]
 80024aa:	9307      	str	r3, [sp, #28]
 80024ac:	9205      	str	r2, [sp, #20]
 80024ae:	9306      	str	r3, [sp, #24]
 80024b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80024b4:	931a      	str	r3, [sp, #104]	; 0x68
 80024b6:	2205      	movs	r2, #5
 80024b8:	7821      	ldrb	r1, [r4, #0]
 80024ba:	4850      	ldr	r0, [pc, #320]	; (80025fc <_svfiprintf_r+0x1d4>)
 80024bc:	f000 fc34 	bl	8002d28 <memchr>
 80024c0:	1c67      	adds	r7, r4, #1
 80024c2:	9b04      	ldr	r3, [sp, #16]
 80024c4:	b9d8      	cbnz	r0, 80024fe <_svfiprintf_r+0xd6>
 80024c6:	06d9      	lsls	r1, r3, #27
 80024c8:	bf44      	itt	mi
 80024ca:	2220      	movmi	r2, #32
 80024cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80024d0:	071a      	lsls	r2, r3, #28
 80024d2:	bf44      	itt	mi
 80024d4:	222b      	movmi	r2, #43	; 0x2b
 80024d6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80024da:	7822      	ldrb	r2, [r4, #0]
 80024dc:	2a2a      	cmp	r2, #42	; 0x2a
 80024de:	d016      	beq.n	800250e <_svfiprintf_r+0xe6>
 80024e0:	2100      	movs	r1, #0
 80024e2:	200a      	movs	r0, #10
 80024e4:	9a07      	ldr	r2, [sp, #28]
 80024e6:	4627      	mov	r7, r4
 80024e8:	783b      	ldrb	r3, [r7, #0]
 80024ea:	3401      	adds	r4, #1
 80024ec:	3b30      	subs	r3, #48	; 0x30
 80024ee:	2b09      	cmp	r3, #9
 80024f0:	d950      	bls.n	8002594 <_svfiprintf_r+0x16c>
 80024f2:	b1c9      	cbz	r1, 8002528 <_svfiprintf_r+0x100>
 80024f4:	e011      	b.n	800251a <_svfiprintf_r+0xf2>
 80024f6:	2b25      	cmp	r3, #37	; 0x25
 80024f8:	d0c0      	beq.n	800247c <_svfiprintf_r+0x54>
 80024fa:	4627      	mov	r7, r4
 80024fc:	e7b9      	b.n	8002472 <_svfiprintf_r+0x4a>
 80024fe:	4a3f      	ldr	r2, [pc, #252]	; (80025fc <_svfiprintf_r+0x1d4>)
 8002500:	463c      	mov	r4, r7
 8002502:	1a80      	subs	r0, r0, r2
 8002504:	fa0b f000 	lsl.w	r0, fp, r0
 8002508:	4318      	orrs	r0, r3
 800250a:	9004      	str	r0, [sp, #16]
 800250c:	e7d3      	b.n	80024b6 <_svfiprintf_r+0x8e>
 800250e:	9a03      	ldr	r2, [sp, #12]
 8002510:	1d11      	adds	r1, r2, #4
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	9103      	str	r1, [sp, #12]
 8002516:	2a00      	cmp	r2, #0
 8002518:	db01      	blt.n	800251e <_svfiprintf_r+0xf6>
 800251a:	9207      	str	r2, [sp, #28]
 800251c:	e004      	b.n	8002528 <_svfiprintf_r+0x100>
 800251e:	4252      	negs	r2, r2
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	9207      	str	r2, [sp, #28]
 8002526:	9304      	str	r3, [sp, #16]
 8002528:	783b      	ldrb	r3, [r7, #0]
 800252a:	2b2e      	cmp	r3, #46	; 0x2e
 800252c:	d10d      	bne.n	800254a <_svfiprintf_r+0x122>
 800252e:	787b      	ldrb	r3, [r7, #1]
 8002530:	1c79      	adds	r1, r7, #1
 8002532:	2b2a      	cmp	r3, #42	; 0x2a
 8002534:	d132      	bne.n	800259c <_svfiprintf_r+0x174>
 8002536:	9b03      	ldr	r3, [sp, #12]
 8002538:	3702      	adds	r7, #2
 800253a:	1d1a      	adds	r2, r3, #4
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	9203      	str	r2, [sp, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	bfb8      	it	lt
 8002544:	f04f 33ff 	movlt.w	r3, #4294967295
 8002548:	9305      	str	r3, [sp, #20]
 800254a:	4c2d      	ldr	r4, [pc, #180]	; (8002600 <_svfiprintf_r+0x1d8>)
 800254c:	2203      	movs	r2, #3
 800254e:	7839      	ldrb	r1, [r7, #0]
 8002550:	4620      	mov	r0, r4
 8002552:	f000 fbe9 	bl	8002d28 <memchr>
 8002556:	b138      	cbz	r0, 8002568 <_svfiprintf_r+0x140>
 8002558:	2340      	movs	r3, #64	; 0x40
 800255a:	1b00      	subs	r0, r0, r4
 800255c:	fa03 f000 	lsl.w	r0, r3, r0
 8002560:	9b04      	ldr	r3, [sp, #16]
 8002562:	3701      	adds	r7, #1
 8002564:	4303      	orrs	r3, r0
 8002566:	9304      	str	r3, [sp, #16]
 8002568:	7839      	ldrb	r1, [r7, #0]
 800256a:	2206      	movs	r2, #6
 800256c:	4825      	ldr	r0, [pc, #148]	; (8002604 <_svfiprintf_r+0x1dc>)
 800256e:	1c7e      	adds	r6, r7, #1
 8002570:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002574:	f000 fbd8 	bl	8002d28 <memchr>
 8002578:	2800      	cmp	r0, #0
 800257a:	d035      	beq.n	80025e8 <_svfiprintf_r+0x1c0>
 800257c:	4b22      	ldr	r3, [pc, #136]	; (8002608 <_svfiprintf_r+0x1e0>)
 800257e:	b9fb      	cbnz	r3, 80025c0 <_svfiprintf_r+0x198>
 8002580:	9b03      	ldr	r3, [sp, #12]
 8002582:	3307      	adds	r3, #7
 8002584:	f023 0307 	bic.w	r3, r3, #7
 8002588:	3308      	adds	r3, #8
 800258a:	9303      	str	r3, [sp, #12]
 800258c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800258e:	444b      	add	r3, r9
 8002590:	9309      	str	r3, [sp, #36]	; 0x24
 8002592:	e76d      	b.n	8002470 <_svfiprintf_r+0x48>
 8002594:	fb00 3202 	mla	r2, r0, r2, r3
 8002598:	2101      	movs	r1, #1
 800259a:	e7a4      	b.n	80024e6 <_svfiprintf_r+0xbe>
 800259c:	2300      	movs	r3, #0
 800259e:	240a      	movs	r4, #10
 80025a0:	4618      	mov	r0, r3
 80025a2:	9305      	str	r3, [sp, #20]
 80025a4:	460f      	mov	r7, r1
 80025a6:	783a      	ldrb	r2, [r7, #0]
 80025a8:	3101      	adds	r1, #1
 80025aa:	3a30      	subs	r2, #48	; 0x30
 80025ac:	2a09      	cmp	r2, #9
 80025ae:	d903      	bls.n	80025b8 <_svfiprintf_r+0x190>
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ca      	beq.n	800254a <_svfiprintf_r+0x122>
 80025b4:	9005      	str	r0, [sp, #20]
 80025b6:	e7c8      	b.n	800254a <_svfiprintf_r+0x122>
 80025b8:	fb04 2000 	mla	r0, r4, r0, r2
 80025bc:	2301      	movs	r3, #1
 80025be:	e7f1      	b.n	80025a4 <_svfiprintf_r+0x17c>
 80025c0:	ab03      	add	r3, sp, #12
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	462a      	mov	r2, r5
 80025c6:	4b11      	ldr	r3, [pc, #68]	; (800260c <_svfiprintf_r+0x1e4>)
 80025c8:	a904      	add	r1, sp, #16
 80025ca:	4640      	mov	r0, r8
 80025cc:	f3af 8000 	nop.w
 80025d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80025d4:	4681      	mov	r9, r0
 80025d6:	d1d9      	bne.n	800258c <_svfiprintf_r+0x164>
 80025d8:	89ab      	ldrh	r3, [r5, #12]
 80025da:	065b      	lsls	r3, r3, #25
 80025dc:	f53f af39 	bmi.w	8002452 <_svfiprintf_r+0x2a>
 80025e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80025e2:	b01d      	add	sp, #116	; 0x74
 80025e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025e8:	ab03      	add	r3, sp, #12
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	462a      	mov	r2, r5
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <_svfiprintf_r+0x1e4>)
 80025f0:	a904      	add	r1, sp, #16
 80025f2:	4640      	mov	r0, r8
 80025f4:	f000 f9c2 	bl	800297c <_printf_i>
 80025f8:	e7ea      	b.n	80025d0 <_svfiprintf_r+0x1a8>
 80025fa:	bf00      	nop
 80025fc:	0800300a 	.word	0x0800300a
 8002600:	08003010 	.word	0x08003010
 8002604:	08003014 	.word	0x08003014
 8002608:	00000000 	.word	0x00000000
 800260c:	08002371 	.word	0x08002371

08002610 <__sfputc_r>:
 8002610:	6893      	ldr	r3, [r2, #8]
 8002612:	b410      	push	{r4}
 8002614:	3b01      	subs	r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	6093      	str	r3, [r2, #8]
 800261a:	da08      	bge.n	800262e <__sfputc_r+0x1e>
 800261c:	6994      	ldr	r4, [r2, #24]
 800261e:	42a3      	cmp	r3, r4
 8002620:	db02      	blt.n	8002628 <__sfputc_r+0x18>
 8002622:	b2cb      	uxtb	r3, r1
 8002624:	2b0a      	cmp	r3, #10
 8002626:	d102      	bne.n	800262e <__sfputc_r+0x1e>
 8002628:	bc10      	pop	{r4}
 800262a:	f7ff bb39 	b.w	8001ca0 <__swbuf_r>
 800262e:	6813      	ldr	r3, [r2, #0]
 8002630:	1c58      	adds	r0, r3, #1
 8002632:	6010      	str	r0, [r2, #0]
 8002634:	7019      	strb	r1, [r3, #0]
 8002636:	b2c8      	uxtb	r0, r1
 8002638:	bc10      	pop	{r4}
 800263a:	4770      	bx	lr

0800263c <__sfputs_r>:
 800263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263e:	4606      	mov	r6, r0
 8002640:	460f      	mov	r7, r1
 8002642:	4614      	mov	r4, r2
 8002644:	18d5      	adds	r5, r2, r3
 8002646:	42ac      	cmp	r4, r5
 8002648:	d101      	bne.n	800264e <__sfputs_r+0x12>
 800264a:	2000      	movs	r0, #0
 800264c:	e007      	b.n	800265e <__sfputs_r+0x22>
 800264e:	463a      	mov	r2, r7
 8002650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002654:	4630      	mov	r0, r6
 8002656:	f7ff ffdb 	bl	8002610 <__sfputc_r>
 800265a:	1c43      	adds	r3, r0, #1
 800265c:	d1f3      	bne.n	8002646 <__sfputs_r+0xa>
 800265e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002660 <_vfiprintf_r>:
 8002660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002664:	b09d      	sub	sp, #116	; 0x74
 8002666:	460c      	mov	r4, r1
 8002668:	4617      	mov	r7, r2
 800266a:	9303      	str	r3, [sp, #12]
 800266c:	4606      	mov	r6, r0
 800266e:	b118      	cbz	r0, 8002678 <_vfiprintf_r+0x18>
 8002670:	6983      	ldr	r3, [r0, #24]
 8002672:	b90b      	cbnz	r3, 8002678 <_vfiprintf_r+0x18>
 8002674:	f7ff fcc6 	bl	8002004 <__sinit>
 8002678:	4b7c      	ldr	r3, [pc, #496]	; (800286c <_vfiprintf_r+0x20c>)
 800267a:	429c      	cmp	r4, r3
 800267c:	d157      	bne.n	800272e <_vfiprintf_r+0xce>
 800267e:	6874      	ldr	r4, [r6, #4]
 8002680:	89a3      	ldrh	r3, [r4, #12]
 8002682:	0718      	lsls	r0, r3, #28
 8002684:	d55d      	bpl.n	8002742 <_vfiprintf_r+0xe2>
 8002686:	6923      	ldr	r3, [r4, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d05a      	beq.n	8002742 <_vfiprintf_r+0xe2>
 800268c:	2300      	movs	r3, #0
 800268e:	9309      	str	r3, [sp, #36]	; 0x24
 8002690:	2320      	movs	r3, #32
 8002692:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002696:	2330      	movs	r3, #48	; 0x30
 8002698:	f04f 0b01 	mov.w	fp, #1
 800269c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80026a0:	46b8      	mov	r8, r7
 80026a2:	4645      	mov	r5, r8
 80026a4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d155      	bne.n	8002758 <_vfiprintf_r+0xf8>
 80026ac:	ebb8 0a07 	subs.w	sl, r8, r7
 80026b0:	d00b      	beq.n	80026ca <_vfiprintf_r+0x6a>
 80026b2:	4653      	mov	r3, sl
 80026b4:	463a      	mov	r2, r7
 80026b6:	4621      	mov	r1, r4
 80026b8:	4630      	mov	r0, r6
 80026ba:	f7ff ffbf 	bl	800263c <__sfputs_r>
 80026be:	3001      	adds	r0, #1
 80026c0:	f000 80c4 	beq.w	800284c <_vfiprintf_r+0x1ec>
 80026c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026c6:	4453      	add	r3, sl
 80026c8:	9309      	str	r3, [sp, #36]	; 0x24
 80026ca:	f898 3000 	ldrb.w	r3, [r8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f000 80bc 	beq.w	800284c <_vfiprintf_r+0x1ec>
 80026d4:	2300      	movs	r3, #0
 80026d6:	f04f 32ff 	mov.w	r2, #4294967295
 80026da:	9304      	str	r3, [sp, #16]
 80026dc:	9307      	str	r3, [sp, #28]
 80026de:	9205      	str	r2, [sp, #20]
 80026e0:	9306      	str	r3, [sp, #24]
 80026e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80026e6:	931a      	str	r3, [sp, #104]	; 0x68
 80026e8:	2205      	movs	r2, #5
 80026ea:	7829      	ldrb	r1, [r5, #0]
 80026ec:	4860      	ldr	r0, [pc, #384]	; (8002870 <_vfiprintf_r+0x210>)
 80026ee:	f000 fb1b 	bl	8002d28 <memchr>
 80026f2:	f105 0801 	add.w	r8, r5, #1
 80026f6:	9b04      	ldr	r3, [sp, #16]
 80026f8:	2800      	cmp	r0, #0
 80026fa:	d131      	bne.n	8002760 <_vfiprintf_r+0x100>
 80026fc:	06d9      	lsls	r1, r3, #27
 80026fe:	bf44      	itt	mi
 8002700:	2220      	movmi	r2, #32
 8002702:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002706:	071a      	lsls	r2, r3, #28
 8002708:	bf44      	itt	mi
 800270a:	222b      	movmi	r2, #43	; 0x2b
 800270c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002710:	782a      	ldrb	r2, [r5, #0]
 8002712:	2a2a      	cmp	r2, #42	; 0x2a
 8002714:	d02c      	beq.n	8002770 <_vfiprintf_r+0x110>
 8002716:	2100      	movs	r1, #0
 8002718:	200a      	movs	r0, #10
 800271a:	9a07      	ldr	r2, [sp, #28]
 800271c:	46a8      	mov	r8, r5
 800271e:	f898 3000 	ldrb.w	r3, [r8]
 8002722:	3501      	adds	r5, #1
 8002724:	3b30      	subs	r3, #48	; 0x30
 8002726:	2b09      	cmp	r3, #9
 8002728:	d96d      	bls.n	8002806 <_vfiprintf_r+0x1a6>
 800272a:	b371      	cbz	r1, 800278a <_vfiprintf_r+0x12a>
 800272c:	e026      	b.n	800277c <_vfiprintf_r+0x11c>
 800272e:	4b51      	ldr	r3, [pc, #324]	; (8002874 <_vfiprintf_r+0x214>)
 8002730:	429c      	cmp	r4, r3
 8002732:	d101      	bne.n	8002738 <_vfiprintf_r+0xd8>
 8002734:	68b4      	ldr	r4, [r6, #8]
 8002736:	e7a3      	b.n	8002680 <_vfiprintf_r+0x20>
 8002738:	4b4f      	ldr	r3, [pc, #316]	; (8002878 <_vfiprintf_r+0x218>)
 800273a:	429c      	cmp	r4, r3
 800273c:	bf08      	it	eq
 800273e:	68f4      	ldreq	r4, [r6, #12]
 8002740:	e79e      	b.n	8002680 <_vfiprintf_r+0x20>
 8002742:	4621      	mov	r1, r4
 8002744:	4630      	mov	r0, r6
 8002746:	f7ff fafd 	bl	8001d44 <__swsetup_r>
 800274a:	2800      	cmp	r0, #0
 800274c:	d09e      	beq.n	800268c <_vfiprintf_r+0x2c>
 800274e:	f04f 30ff 	mov.w	r0, #4294967295
 8002752:	b01d      	add	sp, #116	; 0x74
 8002754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002758:	2b25      	cmp	r3, #37	; 0x25
 800275a:	d0a7      	beq.n	80026ac <_vfiprintf_r+0x4c>
 800275c:	46a8      	mov	r8, r5
 800275e:	e7a0      	b.n	80026a2 <_vfiprintf_r+0x42>
 8002760:	4a43      	ldr	r2, [pc, #268]	; (8002870 <_vfiprintf_r+0x210>)
 8002762:	4645      	mov	r5, r8
 8002764:	1a80      	subs	r0, r0, r2
 8002766:	fa0b f000 	lsl.w	r0, fp, r0
 800276a:	4318      	orrs	r0, r3
 800276c:	9004      	str	r0, [sp, #16]
 800276e:	e7bb      	b.n	80026e8 <_vfiprintf_r+0x88>
 8002770:	9a03      	ldr	r2, [sp, #12]
 8002772:	1d11      	adds	r1, r2, #4
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	9103      	str	r1, [sp, #12]
 8002778:	2a00      	cmp	r2, #0
 800277a:	db01      	blt.n	8002780 <_vfiprintf_r+0x120>
 800277c:	9207      	str	r2, [sp, #28]
 800277e:	e004      	b.n	800278a <_vfiprintf_r+0x12a>
 8002780:	4252      	negs	r2, r2
 8002782:	f043 0302 	orr.w	r3, r3, #2
 8002786:	9207      	str	r2, [sp, #28]
 8002788:	9304      	str	r3, [sp, #16]
 800278a:	f898 3000 	ldrb.w	r3, [r8]
 800278e:	2b2e      	cmp	r3, #46	; 0x2e
 8002790:	d110      	bne.n	80027b4 <_vfiprintf_r+0x154>
 8002792:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002796:	f108 0101 	add.w	r1, r8, #1
 800279a:	2b2a      	cmp	r3, #42	; 0x2a
 800279c:	d137      	bne.n	800280e <_vfiprintf_r+0x1ae>
 800279e:	9b03      	ldr	r3, [sp, #12]
 80027a0:	f108 0802 	add.w	r8, r8, #2
 80027a4:	1d1a      	adds	r2, r3, #4
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	9203      	str	r2, [sp, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	bfb8      	it	lt
 80027ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80027b2:	9305      	str	r3, [sp, #20]
 80027b4:	4d31      	ldr	r5, [pc, #196]	; (800287c <_vfiprintf_r+0x21c>)
 80027b6:	2203      	movs	r2, #3
 80027b8:	f898 1000 	ldrb.w	r1, [r8]
 80027bc:	4628      	mov	r0, r5
 80027be:	f000 fab3 	bl	8002d28 <memchr>
 80027c2:	b140      	cbz	r0, 80027d6 <_vfiprintf_r+0x176>
 80027c4:	2340      	movs	r3, #64	; 0x40
 80027c6:	1b40      	subs	r0, r0, r5
 80027c8:	fa03 f000 	lsl.w	r0, r3, r0
 80027cc:	9b04      	ldr	r3, [sp, #16]
 80027ce:	f108 0801 	add.w	r8, r8, #1
 80027d2:	4303      	orrs	r3, r0
 80027d4:	9304      	str	r3, [sp, #16]
 80027d6:	f898 1000 	ldrb.w	r1, [r8]
 80027da:	2206      	movs	r2, #6
 80027dc:	4828      	ldr	r0, [pc, #160]	; (8002880 <_vfiprintf_r+0x220>)
 80027de:	f108 0701 	add.w	r7, r8, #1
 80027e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80027e6:	f000 fa9f 	bl	8002d28 <memchr>
 80027ea:	2800      	cmp	r0, #0
 80027ec:	d034      	beq.n	8002858 <_vfiprintf_r+0x1f8>
 80027ee:	4b25      	ldr	r3, [pc, #148]	; (8002884 <_vfiprintf_r+0x224>)
 80027f0:	bb03      	cbnz	r3, 8002834 <_vfiprintf_r+0x1d4>
 80027f2:	9b03      	ldr	r3, [sp, #12]
 80027f4:	3307      	adds	r3, #7
 80027f6:	f023 0307 	bic.w	r3, r3, #7
 80027fa:	3308      	adds	r3, #8
 80027fc:	9303      	str	r3, [sp, #12]
 80027fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002800:	444b      	add	r3, r9
 8002802:	9309      	str	r3, [sp, #36]	; 0x24
 8002804:	e74c      	b.n	80026a0 <_vfiprintf_r+0x40>
 8002806:	fb00 3202 	mla	r2, r0, r2, r3
 800280a:	2101      	movs	r1, #1
 800280c:	e786      	b.n	800271c <_vfiprintf_r+0xbc>
 800280e:	2300      	movs	r3, #0
 8002810:	250a      	movs	r5, #10
 8002812:	4618      	mov	r0, r3
 8002814:	9305      	str	r3, [sp, #20]
 8002816:	4688      	mov	r8, r1
 8002818:	f898 2000 	ldrb.w	r2, [r8]
 800281c:	3101      	adds	r1, #1
 800281e:	3a30      	subs	r2, #48	; 0x30
 8002820:	2a09      	cmp	r2, #9
 8002822:	d903      	bls.n	800282c <_vfiprintf_r+0x1cc>
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0c5      	beq.n	80027b4 <_vfiprintf_r+0x154>
 8002828:	9005      	str	r0, [sp, #20]
 800282a:	e7c3      	b.n	80027b4 <_vfiprintf_r+0x154>
 800282c:	fb05 2000 	mla	r0, r5, r0, r2
 8002830:	2301      	movs	r3, #1
 8002832:	e7f0      	b.n	8002816 <_vfiprintf_r+0x1b6>
 8002834:	ab03      	add	r3, sp, #12
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	4622      	mov	r2, r4
 800283a:	4b13      	ldr	r3, [pc, #76]	; (8002888 <_vfiprintf_r+0x228>)
 800283c:	a904      	add	r1, sp, #16
 800283e:	4630      	mov	r0, r6
 8002840:	f3af 8000 	nop.w
 8002844:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002848:	4681      	mov	r9, r0
 800284a:	d1d8      	bne.n	80027fe <_vfiprintf_r+0x19e>
 800284c:	89a3      	ldrh	r3, [r4, #12]
 800284e:	065b      	lsls	r3, r3, #25
 8002850:	f53f af7d 	bmi.w	800274e <_vfiprintf_r+0xee>
 8002854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002856:	e77c      	b.n	8002752 <_vfiprintf_r+0xf2>
 8002858:	ab03      	add	r3, sp, #12
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	4622      	mov	r2, r4
 800285e:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <_vfiprintf_r+0x228>)
 8002860:	a904      	add	r1, sp, #16
 8002862:	4630      	mov	r0, r6
 8002864:	f000 f88a 	bl	800297c <_printf_i>
 8002868:	e7ec      	b.n	8002844 <_vfiprintf_r+0x1e4>
 800286a:	bf00      	nop
 800286c:	08002fc0 	.word	0x08002fc0
 8002870:	0800300a 	.word	0x0800300a
 8002874:	08002fe0 	.word	0x08002fe0
 8002878:	08002fa0 	.word	0x08002fa0
 800287c:	08003010 	.word	0x08003010
 8002880:	08003014 	.word	0x08003014
 8002884:	00000000 	.word	0x00000000
 8002888:	0800263d 	.word	0x0800263d

0800288c <_printf_common>:
 800288c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002890:	4691      	mov	r9, r2
 8002892:	461f      	mov	r7, r3
 8002894:	688a      	ldr	r2, [r1, #8]
 8002896:	690b      	ldr	r3, [r1, #16]
 8002898:	4606      	mov	r6, r0
 800289a:	4293      	cmp	r3, r2
 800289c:	bfb8      	it	lt
 800289e:	4613      	movlt	r3, r2
 80028a0:	f8c9 3000 	str.w	r3, [r9]
 80028a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80028a8:	460c      	mov	r4, r1
 80028aa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80028ae:	b112      	cbz	r2, 80028b6 <_printf_common+0x2a>
 80028b0:	3301      	adds	r3, #1
 80028b2:	f8c9 3000 	str.w	r3, [r9]
 80028b6:	6823      	ldr	r3, [r4, #0]
 80028b8:	0699      	lsls	r1, r3, #26
 80028ba:	bf42      	ittt	mi
 80028bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80028c0:	3302      	addmi	r3, #2
 80028c2:	f8c9 3000 	strmi.w	r3, [r9]
 80028c6:	6825      	ldr	r5, [r4, #0]
 80028c8:	f015 0506 	ands.w	r5, r5, #6
 80028cc:	d107      	bne.n	80028de <_printf_common+0x52>
 80028ce:	f104 0a19 	add.w	sl, r4, #25
 80028d2:	68e3      	ldr	r3, [r4, #12]
 80028d4:	f8d9 2000 	ldr.w	r2, [r9]
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	429d      	cmp	r5, r3
 80028dc:	db2a      	blt.n	8002934 <_printf_common+0xa8>
 80028de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80028e2:	6822      	ldr	r2, [r4, #0]
 80028e4:	3300      	adds	r3, #0
 80028e6:	bf18      	it	ne
 80028e8:	2301      	movne	r3, #1
 80028ea:	0692      	lsls	r2, r2, #26
 80028ec:	d42f      	bmi.n	800294e <_printf_common+0xc2>
 80028ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80028f2:	4639      	mov	r1, r7
 80028f4:	4630      	mov	r0, r6
 80028f6:	47c0      	blx	r8
 80028f8:	3001      	adds	r0, #1
 80028fa:	d022      	beq.n	8002942 <_printf_common+0xb6>
 80028fc:	6823      	ldr	r3, [r4, #0]
 80028fe:	68e5      	ldr	r5, [r4, #12]
 8002900:	f003 0306 	and.w	r3, r3, #6
 8002904:	2b04      	cmp	r3, #4
 8002906:	bf18      	it	ne
 8002908:	2500      	movne	r5, #0
 800290a:	f8d9 2000 	ldr.w	r2, [r9]
 800290e:	f04f 0900 	mov.w	r9, #0
 8002912:	bf08      	it	eq
 8002914:	1aad      	subeq	r5, r5, r2
 8002916:	68a3      	ldr	r3, [r4, #8]
 8002918:	6922      	ldr	r2, [r4, #16]
 800291a:	bf08      	it	eq
 800291c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002920:	4293      	cmp	r3, r2
 8002922:	bfc4      	itt	gt
 8002924:	1a9b      	subgt	r3, r3, r2
 8002926:	18ed      	addgt	r5, r5, r3
 8002928:	341a      	adds	r4, #26
 800292a:	454d      	cmp	r5, r9
 800292c:	d11b      	bne.n	8002966 <_printf_common+0xda>
 800292e:	2000      	movs	r0, #0
 8002930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002934:	2301      	movs	r3, #1
 8002936:	4652      	mov	r2, sl
 8002938:	4639      	mov	r1, r7
 800293a:	4630      	mov	r0, r6
 800293c:	47c0      	blx	r8
 800293e:	3001      	adds	r0, #1
 8002940:	d103      	bne.n	800294a <_printf_common+0xbe>
 8002942:	f04f 30ff 	mov.w	r0, #4294967295
 8002946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800294a:	3501      	adds	r5, #1
 800294c:	e7c1      	b.n	80028d2 <_printf_common+0x46>
 800294e:	2030      	movs	r0, #48	; 0x30
 8002950:	18e1      	adds	r1, r4, r3
 8002952:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800295c:	4422      	add	r2, r4
 800295e:	3302      	adds	r3, #2
 8002960:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002964:	e7c3      	b.n	80028ee <_printf_common+0x62>
 8002966:	2301      	movs	r3, #1
 8002968:	4622      	mov	r2, r4
 800296a:	4639      	mov	r1, r7
 800296c:	4630      	mov	r0, r6
 800296e:	47c0      	blx	r8
 8002970:	3001      	adds	r0, #1
 8002972:	d0e6      	beq.n	8002942 <_printf_common+0xb6>
 8002974:	f109 0901 	add.w	r9, r9, #1
 8002978:	e7d7      	b.n	800292a <_printf_common+0x9e>
	...

0800297c <_printf_i>:
 800297c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002980:	4617      	mov	r7, r2
 8002982:	7e0a      	ldrb	r2, [r1, #24]
 8002984:	b085      	sub	sp, #20
 8002986:	2a6e      	cmp	r2, #110	; 0x6e
 8002988:	4698      	mov	r8, r3
 800298a:	4606      	mov	r6, r0
 800298c:	460c      	mov	r4, r1
 800298e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002990:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002994:	f000 80bc 	beq.w	8002b10 <_printf_i+0x194>
 8002998:	d81a      	bhi.n	80029d0 <_printf_i+0x54>
 800299a:	2a63      	cmp	r2, #99	; 0x63
 800299c:	d02e      	beq.n	80029fc <_printf_i+0x80>
 800299e:	d80a      	bhi.n	80029b6 <_printf_i+0x3a>
 80029a0:	2a00      	cmp	r2, #0
 80029a2:	f000 80c8 	beq.w	8002b36 <_printf_i+0x1ba>
 80029a6:	2a58      	cmp	r2, #88	; 0x58
 80029a8:	f000 808a 	beq.w	8002ac0 <_printf_i+0x144>
 80029ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80029b0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80029b4:	e02a      	b.n	8002a0c <_printf_i+0x90>
 80029b6:	2a64      	cmp	r2, #100	; 0x64
 80029b8:	d001      	beq.n	80029be <_printf_i+0x42>
 80029ba:	2a69      	cmp	r2, #105	; 0x69
 80029bc:	d1f6      	bne.n	80029ac <_printf_i+0x30>
 80029be:	6821      	ldr	r1, [r4, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80029c6:	d023      	beq.n	8002a10 <_printf_i+0x94>
 80029c8:	1d11      	adds	r1, r2, #4
 80029ca:	6019      	str	r1, [r3, #0]
 80029cc:	6813      	ldr	r3, [r2, #0]
 80029ce:	e027      	b.n	8002a20 <_printf_i+0xa4>
 80029d0:	2a73      	cmp	r2, #115	; 0x73
 80029d2:	f000 80b4 	beq.w	8002b3e <_printf_i+0x1c2>
 80029d6:	d808      	bhi.n	80029ea <_printf_i+0x6e>
 80029d8:	2a6f      	cmp	r2, #111	; 0x6f
 80029da:	d02a      	beq.n	8002a32 <_printf_i+0xb6>
 80029dc:	2a70      	cmp	r2, #112	; 0x70
 80029de:	d1e5      	bne.n	80029ac <_printf_i+0x30>
 80029e0:	680a      	ldr	r2, [r1, #0]
 80029e2:	f042 0220 	orr.w	r2, r2, #32
 80029e6:	600a      	str	r2, [r1, #0]
 80029e8:	e003      	b.n	80029f2 <_printf_i+0x76>
 80029ea:	2a75      	cmp	r2, #117	; 0x75
 80029ec:	d021      	beq.n	8002a32 <_printf_i+0xb6>
 80029ee:	2a78      	cmp	r2, #120	; 0x78
 80029f0:	d1dc      	bne.n	80029ac <_printf_i+0x30>
 80029f2:	2278      	movs	r2, #120	; 0x78
 80029f4:	496f      	ldr	r1, [pc, #444]	; (8002bb4 <_printf_i+0x238>)
 80029f6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80029fa:	e064      	b.n	8002ac6 <_printf_i+0x14a>
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002a02:	1d11      	adds	r1, r2, #4
 8002a04:	6019      	str	r1, [r3, #0]
 8002a06:	6813      	ldr	r3, [r2, #0]
 8002a08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0a3      	b.n	8002b58 <_printf_i+0x1dc>
 8002a10:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002a14:	f102 0104 	add.w	r1, r2, #4
 8002a18:	6019      	str	r1, [r3, #0]
 8002a1a:	d0d7      	beq.n	80029cc <_printf_i+0x50>
 8002a1c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	da03      	bge.n	8002a2c <_printf_i+0xb0>
 8002a24:	222d      	movs	r2, #45	; 0x2d
 8002a26:	425b      	negs	r3, r3
 8002a28:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002a2c:	4962      	ldr	r1, [pc, #392]	; (8002bb8 <_printf_i+0x23c>)
 8002a2e:	220a      	movs	r2, #10
 8002a30:	e017      	b.n	8002a62 <_printf_i+0xe6>
 8002a32:	6820      	ldr	r0, [r4, #0]
 8002a34:	6819      	ldr	r1, [r3, #0]
 8002a36:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002a3a:	d003      	beq.n	8002a44 <_printf_i+0xc8>
 8002a3c:	1d08      	adds	r0, r1, #4
 8002a3e:	6018      	str	r0, [r3, #0]
 8002a40:	680b      	ldr	r3, [r1, #0]
 8002a42:	e006      	b.n	8002a52 <_printf_i+0xd6>
 8002a44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002a48:	f101 0004 	add.w	r0, r1, #4
 8002a4c:	6018      	str	r0, [r3, #0]
 8002a4e:	d0f7      	beq.n	8002a40 <_printf_i+0xc4>
 8002a50:	880b      	ldrh	r3, [r1, #0]
 8002a52:	2a6f      	cmp	r2, #111	; 0x6f
 8002a54:	bf14      	ite	ne
 8002a56:	220a      	movne	r2, #10
 8002a58:	2208      	moveq	r2, #8
 8002a5a:	4957      	ldr	r1, [pc, #348]	; (8002bb8 <_printf_i+0x23c>)
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002a62:	6865      	ldr	r5, [r4, #4]
 8002a64:	2d00      	cmp	r5, #0
 8002a66:	60a5      	str	r5, [r4, #8]
 8002a68:	f2c0 809c 	blt.w	8002ba4 <_printf_i+0x228>
 8002a6c:	6820      	ldr	r0, [r4, #0]
 8002a6e:	f020 0004 	bic.w	r0, r0, #4
 8002a72:	6020      	str	r0, [r4, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d13f      	bne.n	8002af8 <_printf_i+0x17c>
 8002a78:	2d00      	cmp	r5, #0
 8002a7a:	f040 8095 	bne.w	8002ba8 <_printf_i+0x22c>
 8002a7e:	4675      	mov	r5, lr
 8002a80:	2a08      	cmp	r2, #8
 8002a82:	d10b      	bne.n	8002a9c <_printf_i+0x120>
 8002a84:	6823      	ldr	r3, [r4, #0]
 8002a86:	07da      	lsls	r2, r3, #31
 8002a88:	d508      	bpl.n	8002a9c <_printf_i+0x120>
 8002a8a:	6923      	ldr	r3, [r4, #16]
 8002a8c:	6862      	ldr	r2, [r4, #4]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	bfde      	ittt	le
 8002a92:	2330      	movle	r3, #48	; 0x30
 8002a94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002a98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002a9c:	ebae 0305 	sub.w	r3, lr, r5
 8002aa0:	6123      	str	r3, [r4, #16]
 8002aa2:	f8cd 8000 	str.w	r8, [sp]
 8002aa6:	463b      	mov	r3, r7
 8002aa8:	aa03      	add	r2, sp, #12
 8002aaa:	4621      	mov	r1, r4
 8002aac:	4630      	mov	r0, r6
 8002aae:	f7ff feed 	bl	800288c <_printf_common>
 8002ab2:	3001      	adds	r0, #1
 8002ab4:	d155      	bne.n	8002b62 <_printf_i+0x1e6>
 8002ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8002aba:	b005      	add	sp, #20
 8002abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ac0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002ac4:	493c      	ldr	r1, [pc, #240]	; (8002bb8 <_printf_i+0x23c>)
 8002ac6:	6822      	ldr	r2, [r4, #0]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002ace:	f100 0504 	add.w	r5, r0, #4
 8002ad2:	601d      	str	r5, [r3, #0]
 8002ad4:	d001      	beq.n	8002ada <_printf_i+0x15e>
 8002ad6:	6803      	ldr	r3, [r0, #0]
 8002ad8:	e002      	b.n	8002ae0 <_printf_i+0x164>
 8002ada:	0655      	lsls	r5, r2, #25
 8002adc:	d5fb      	bpl.n	8002ad6 <_printf_i+0x15a>
 8002ade:	8803      	ldrh	r3, [r0, #0]
 8002ae0:	07d0      	lsls	r0, r2, #31
 8002ae2:	bf44      	itt	mi
 8002ae4:	f042 0220 	orrmi.w	r2, r2, #32
 8002ae8:	6022      	strmi	r2, [r4, #0]
 8002aea:	b91b      	cbnz	r3, 8002af4 <_printf_i+0x178>
 8002aec:	6822      	ldr	r2, [r4, #0]
 8002aee:	f022 0220 	bic.w	r2, r2, #32
 8002af2:	6022      	str	r2, [r4, #0]
 8002af4:	2210      	movs	r2, #16
 8002af6:	e7b1      	b.n	8002a5c <_printf_i+0xe0>
 8002af8:	4675      	mov	r5, lr
 8002afa:	fbb3 f0f2 	udiv	r0, r3, r2
 8002afe:	fb02 3310 	mls	r3, r2, r0, r3
 8002b02:	5ccb      	ldrb	r3, [r1, r3]
 8002b04:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2800      	cmp	r0, #0
 8002b0c:	d1f5      	bne.n	8002afa <_printf_i+0x17e>
 8002b0e:	e7b7      	b.n	8002a80 <_printf_i+0x104>
 8002b10:	6808      	ldr	r0, [r1, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002b18:	6949      	ldr	r1, [r1, #20]
 8002b1a:	d004      	beq.n	8002b26 <_printf_i+0x1aa>
 8002b1c:	1d10      	adds	r0, r2, #4
 8002b1e:	6018      	str	r0, [r3, #0]
 8002b20:	6813      	ldr	r3, [r2, #0]
 8002b22:	6019      	str	r1, [r3, #0]
 8002b24:	e007      	b.n	8002b36 <_printf_i+0x1ba>
 8002b26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b2a:	f102 0004 	add.w	r0, r2, #4
 8002b2e:	6018      	str	r0, [r3, #0]
 8002b30:	6813      	ldr	r3, [r2, #0]
 8002b32:	d0f6      	beq.n	8002b22 <_printf_i+0x1a6>
 8002b34:	8019      	strh	r1, [r3, #0]
 8002b36:	2300      	movs	r3, #0
 8002b38:	4675      	mov	r5, lr
 8002b3a:	6123      	str	r3, [r4, #16]
 8002b3c:	e7b1      	b.n	8002aa2 <_printf_i+0x126>
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	1d11      	adds	r1, r2, #4
 8002b42:	6019      	str	r1, [r3, #0]
 8002b44:	6815      	ldr	r5, [r2, #0]
 8002b46:	2100      	movs	r1, #0
 8002b48:	6862      	ldr	r2, [r4, #4]
 8002b4a:	4628      	mov	r0, r5
 8002b4c:	f000 f8ec 	bl	8002d28 <memchr>
 8002b50:	b108      	cbz	r0, 8002b56 <_printf_i+0x1da>
 8002b52:	1b40      	subs	r0, r0, r5
 8002b54:	6060      	str	r0, [r4, #4]
 8002b56:	6863      	ldr	r3, [r4, #4]
 8002b58:	6123      	str	r3, [r4, #16]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b60:	e79f      	b.n	8002aa2 <_printf_i+0x126>
 8002b62:	6923      	ldr	r3, [r4, #16]
 8002b64:	462a      	mov	r2, r5
 8002b66:	4639      	mov	r1, r7
 8002b68:	4630      	mov	r0, r6
 8002b6a:	47c0      	blx	r8
 8002b6c:	3001      	adds	r0, #1
 8002b6e:	d0a2      	beq.n	8002ab6 <_printf_i+0x13a>
 8002b70:	6823      	ldr	r3, [r4, #0]
 8002b72:	079b      	lsls	r3, r3, #30
 8002b74:	d507      	bpl.n	8002b86 <_printf_i+0x20a>
 8002b76:	2500      	movs	r5, #0
 8002b78:	f104 0919 	add.w	r9, r4, #25
 8002b7c:	68e3      	ldr	r3, [r4, #12]
 8002b7e:	9a03      	ldr	r2, [sp, #12]
 8002b80:	1a9b      	subs	r3, r3, r2
 8002b82:	429d      	cmp	r5, r3
 8002b84:	db05      	blt.n	8002b92 <_printf_i+0x216>
 8002b86:	68e0      	ldr	r0, [r4, #12]
 8002b88:	9b03      	ldr	r3, [sp, #12]
 8002b8a:	4298      	cmp	r0, r3
 8002b8c:	bfb8      	it	lt
 8002b8e:	4618      	movlt	r0, r3
 8002b90:	e793      	b.n	8002aba <_printf_i+0x13e>
 8002b92:	2301      	movs	r3, #1
 8002b94:	464a      	mov	r2, r9
 8002b96:	4639      	mov	r1, r7
 8002b98:	4630      	mov	r0, r6
 8002b9a:	47c0      	blx	r8
 8002b9c:	3001      	adds	r0, #1
 8002b9e:	d08a      	beq.n	8002ab6 <_printf_i+0x13a>
 8002ba0:	3501      	adds	r5, #1
 8002ba2:	e7eb      	b.n	8002b7c <_printf_i+0x200>
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1a7      	bne.n	8002af8 <_printf_i+0x17c>
 8002ba8:	780b      	ldrb	r3, [r1, #0]
 8002baa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002bb2:	e765      	b.n	8002a80 <_printf_i+0x104>
 8002bb4:	0800302c 	.word	0x0800302c
 8002bb8:	0800301b 	.word	0x0800301b

08002bbc <_sbrk_r>:
 8002bbc:	b538      	push	{r3, r4, r5, lr}
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	4c05      	ldr	r4, [pc, #20]	; (8002bd8 <_sbrk_r+0x1c>)
 8002bc2:	4605      	mov	r5, r0
 8002bc4:	4608      	mov	r0, r1
 8002bc6:	6023      	str	r3, [r4, #0]
 8002bc8:	f7fe fe1e 	bl	8001808 <_sbrk>
 8002bcc:	1c43      	adds	r3, r0, #1
 8002bce:	d102      	bne.n	8002bd6 <_sbrk_r+0x1a>
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	b103      	cbz	r3, 8002bd6 <_sbrk_r+0x1a>
 8002bd4:	602b      	str	r3, [r5, #0]
 8002bd6:	bd38      	pop	{r3, r4, r5, pc}
 8002bd8:	20000aa4 	.word	0x20000aa4

08002bdc <__sread>:
 8002bdc:	b510      	push	{r4, lr}
 8002bde:	460c      	mov	r4, r1
 8002be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002be4:	f000 f8f0 	bl	8002dc8 <_read_r>
 8002be8:	2800      	cmp	r0, #0
 8002bea:	bfab      	itete	ge
 8002bec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002bee:	89a3      	ldrhlt	r3, [r4, #12]
 8002bf0:	181b      	addge	r3, r3, r0
 8002bf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002bf6:	bfac      	ite	ge
 8002bf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002bfa:	81a3      	strhlt	r3, [r4, #12]
 8002bfc:	bd10      	pop	{r4, pc}

08002bfe <__swrite>:
 8002bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c02:	461f      	mov	r7, r3
 8002c04:	898b      	ldrh	r3, [r1, #12]
 8002c06:	4605      	mov	r5, r0
 8002c08:	05db      	lsls	r3, r3, #23
 8002c0a:	460c      	mov	r4, r1
 8002c0c:	4616      	mov	r6, r2
 8002c0e:	d505      	bpl.n	8002c1c <__swrite+0x1e>
 8002c10:	2302      	movs	r3, #2
 8002c12:	2200      	movs	r2, #0
 8002c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c18:	f000 f874 	bl	8002d04 <_lseek_r>
 8002c1c:	89a3      	ldrh	r3, [r4, #12]
 8002c1e:	4632      	mov	r2, r6
 8002c20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c24:	81a3      	strh	r3, [r4, #12]
 8002c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c2a:	463b      	mov	r3, r7
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c32:	f000 b823 	b.w	8002c7c <_write_r>

08002c36 <__sseek>:
 8002c36:	b510      	push	{r4, lr}
 8002c38:	460c      	mov	r4, r1
 8002c3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c3e:	f000 f861 	bl	8002d04 <_lseek_r>
 8002c42:	1c43      	adds	r3, r0, #1
 8002c44:	89a3      	ldrh	r3, [r4, #12]
 8002c46:	bf15      	itete	ne
 8002c48:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c52:	81a3      	strheq	r3, [r4, #12]
 8002c54:	bf18      	it	ne
 8002c56:	81a3      	strhne	r3, [r4, #12]
 8002c58:	bd10      	pop	{r4, pc}

08002c5a <__sclose>:
 8002c5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c5e:	f000 b81f 	b.w	8002ca0 <_close_r>

08002c62 <__ascii_wctomb>:
 8002c62:	b149      	cbz	r1, 8002c78 <__ascii_wctomb+0x16>
 8002c64:	2aff      	cmp	r2, #255	; 0xff
 8002c66:	bf8b      	itete	hi
 8002c68:	238a      	movhi	r3, #138	; 0x8a
 8002c6a:	700a      	strbls	r2, [r1, #0]
 8002c6c:	6003      	strhi	r3, [r0, #0]
 8002c6e:	2001      	movls	r0, #1
 8002c70:	bf88      	it	hi
 8002c72:	f04f 30ff 	movhi.w	r0, #4294967295
 8002c76:	4770      	bx	lr
 8002c78:	4608      	mov	r0, r1
 8002c7a:	4770      	bx	lr

08002c7c <_write_r>:
 8002c7c:	b538      	push	{r3, r4, r5, lr}
 8002c7e:	4605      	mov	r5, r0
 8002c80:	4608      	mov	r0, r1
 8002c82:	4611      	mov	r1, r2
 8002c84:	2200      	movs	r2, #0
 8002c86:	4c05      	ldr	r4, [pc, #20]	; (8002c9c <_write_r+0x20>)
 8002c88:	6022      	str	r2, [r4, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f7fe fc3a 	bl	8001504 <_write>
 8002c90:	1c43      	adds	r3, r0, #1
 8002c92:	d102      	bne.n	8002c9a <_write_r+0x1e>
 8002c94:	6823      	ldr	r3, [r4, #0]
 8002c96:	b103      	cbz	r3, 8002c9a <_write_r+0x1e>
 8002c98:	602b      	str	r3, [r5, #0]
 8002c9a:	bd38      	pop	{r3, r4, r5, pc}
 8002c9c:	20000aa4 	.word	0x20000aa4

08002ca0 <_close_r>:
 8002ca0:	b538      	push	{r3, r4, r5, lr}
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	4c05      	ldr	r4, [pc, #20]	; (8002cbc <_close_r+0x1c>)
 8002ca6:	4605      	mov	r5, r0
 8002ca8:	4608      	mov	r0, r1
 8002caa:	6023      	str	r3, [r4, #0]
 8002cac:	f7fe fdc6 	bl	800183c <_close>
 8002cb0:	1c43      	adds	r3, r0, #1
 8002cb2:	d102      	bne.n	8002cba <_close_r+0x1a>
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	b103      	cbz	r3, 8002cba <_close_r+0x1a>
 8002cb8:	602b      	str	r3, [r5, #0]
 8002cba:	bd38      	pop	{r3, r4, r5, pc}
 8002cbc:	20000aa4 	.word	0x20000aa4

08002cc0 <_fstat_r>:
 8002cc0:	b538      	push	{r3, r4, r5, lr}
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	4c06      	ldr	r4, [pc, #24]	; (8002ce0 <_fstat_r+0x20>)
 8002cc6:	4605      	mov	r5, r0
 8002cc8:	4608      	mov	r0, r1
 8002cca:	4611      	mov	r1, r2
 8002ccc:	6023      	str	r3, [r4, #0]
 8002cce:	f7fe fdb8 	bl	8001842 <_fstat>
 8002cd2:	1c43      	adds	r3, r0, #1
 8002cd4:	d102      	bne.n	8002cdc <_fstat_r+0x1c>
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	b103      	cbz	r3, 8002cdc <_fstat_r+0x1c>
 8002cda:	602b      	str	r3, [r5, #0]
 8002cdc:	bd38      	pop	{r3, r4, r5, pc}
 8002cde:	bf00      	nop
 8002ce0:	20000aa4 	.word	0x20000aa4

08002ce4 <_isatty_r>:
 8002ce4:	b538      	push	{r3, r4, r5, lr}
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	4c05      	ldr	r4, [pc, #20]	; (8002d00 <_isatty_r+0x1c>)
 8002cea:	4605      	mov	r5, r0
 8002cec:	4608      	mov	r0, r1
 8002cee:	6023      	str	r3, [r4, #0]
 8002cf0:	f7fe fdac 	bl	800184c <_isatty>
 8002cf4:	1c43      	adds	r3, r0, #1
 8002cf6:	d102      	bne.n	8002cfe <_isatty_r+0x1a>
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	b103      	cbz	r3, 8002cfe <_isatty_r+0x1a>
 8002cfc:	602b      	str	r3, [r5, #0]
 8002cfe:	bd38      	pop	{r3, r4, r5, pc}
 8002d00:	20000aa4 	.word	0x20000aa4

08002d04 <_lseek_r>:
 8002d04:	b538      	push	{r3, r4, r5, lr}
 8002d06:	4605      	mov	r5, r0
 8002d08:	4608      	mov	r0, r1
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	4c05      	ldr	r4, [pc, #20]	; (8002d24 <_lseek_r+0x20>)
 8002d10:	6022      	str	r2, [r4, #0]
 8002d12:	461a      	mov	r2, r3
 8002d14:	f7fe fd9c 	bl	8001850 <_lseek>
 8002d18:	1c43      	adds	r3, r0, #1
 8002d1a:	d102      	bne.n	8002d22 <_lseek_r+0x1e>
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	b103      	cbz	r3, 8002d22 <_lseek_r+0x1e>
 8002d20:	602b      	str	r3, [r5, #0]
 8002d22:	bd38      	pop	{r3, r4, r5, pc}
 8002d24:	20000aa4 	.word	0x20000aa4

08002d28 <memchr>:
 8002d28:	b510      	push	{r4, lr}
 8002d2a:	b2c9      	uxtb	r1, r1
 8002d2c:	4402      	add	r2, r0
 8002d2e:	4290      	cmp	r0, r2
 8002d30:	4603      	mov	r3, r0
 8002d32:	d101      	bne.n	8002d38 <memchr+0x10>
 8002d34:	2000      	movs	r0, #0
 8002d36:	bd10      	pop	{r4, pc}
 8002d38:	781c      	ldrb	r4, [r3, #0]
 8002d3a:	3001      	adds	r0, #1
 8002d3c:	428c      	cmp	r4, r1
 8002d3e:	d1f6      	bne.n	8002d2e <memchr+0x6>
 8002d40:	4618      	mov	r0, r3
 8002d42:	bd10      	pop	{r4, pc}

08002d44 <memmove>:
 8002d44:	4288      	cmp	r0, r1
 8002d46:	b510      	push	{r4, lr}
 8002d48:	eb01 0302 	add.w	r3, r1, r2
 8002d4c:	d803      	bhi.n	8002d56 <memmove+0x12>
 8002d4e:	1e42      	subs	r2, r0, #1
 8002d50:	4299      	cmp	r1, r3
 8002d52:	d10c      	bne.n	8002d6e <memmove+0x2a>
 8002d54:	bd10      	pop	{r4, pc}
 8002d56:	4298      	cmp	r0, r3
 8002d58:	d2f9      	bcs.n	8002d4e <memmove+0xa>
 8002d5a:	1881      	adds	r1, r0, r2
 8002d5c:	1ad2      	subs	r2, r2, r3
 8002d5e:	42d3      	cmn	r3, r2
 8002d60:	d100      	bne.n	8002d64 <memmove+0x20>
 8002d62:	bd10      	pop	{r4, pc}
 8002d64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d68:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002d6c:	e7f7      	b.n	8002d5e <memmove+0x1a>
 8002d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d72:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002d76:	e7eb      	b.n	8002d50 <memmove+0xc>

08002d78 <__malloc_lock>:
 8002d78:	4770      	bx	lr

08002d7a <__malloc_unlock>:
 8002d7a:	4770      	bx	lr

08002d7c <_realloc_r>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	4607      	mov	r7, r0
 8002d80:	4614      	mov	r4, r2
 8002d82:	460e      	mov	r6, r1
 8002d84:	b921      	cbnz	r1, 8002d90 <_realloc_r+0x14>
 8002d86:	4611      	mov	r1, r2
 8002d88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002d8c:	f7ff ba92 	b.w	80022b4 <_malloc_r>
 8002d90:	b922      	cbnz	r2, 8002d9c <_realloc_r+0x20>
 8002d92:	f7ff fa43 	bl	800221c <_free_r>
 8002d96:	4625      	mov	r5, r4
 8002d98:	4628      	mov	r0, r5
 8002d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d9c:	f000 f826 	bl	8002dec <_malloc_usable_size_r>
 8002da0:	4284      	cmp	r4, r0
 8002da2:	d90f      	bls.n	8002dc4 <_realloc_r+0x48>
 8002da4:	4621      	mov	r1, r4
 8002da6:	4638      	mov	r0, r7
 8002da8:	f7ff fa84 	bl	80022b4 <_malloc_r>
 8002dac:	4605      	mov	r5, r0
 8002dae:	2800      	cmp	r0, #0
 8002db0:	d0f2      	beq.n	8002d98 <_realloc_r+0x1c>
 8002db2:	4631      	mov	r1, r6
 8002db4:	4622      	mov	r2, r4
 8002db6:	f7fe fdd6 	bl	8001966 <memcpy>
 8002dba:	4631      	mov	r1, r6
 8002dbc:	4638      	mov	r0, r7
 8002dbe:	f7ff fa2d 	bl	800221c <_free_r>
 8002dc2:	e7e9      	b.n	8002d98 <_realloc_r+0x1c>
 8002dc4:	4635      	mov	r5, r6
 8002dc6:	e7e7      	b.n	8002d98 <_realloc_r+0x1c>

08002dc8 <_read_r>:
 8002dc8:	b538      	push	{r3, r4, r5, lr}
 8002dca:	4605      	mov	r5, r0
 8002dcc:	4608      	mov	r0, r1
 8002dce:	4611      	mov	r1, r2
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	4c05      	ldr	r4, [pc, #20]	; (8002de8 <_read_r+0x20>)
 8002dd4:	6022      	str	r2, [r4, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f7fe fd08 	bl	80017ec <_read>
 8002ddc:	1c43      	adds	r3, r0, #1
 8002dde:	d102      	bne.n	8002de6 <_read_r+0x1e>
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	b103      	cbz	r3, 8002de6 <_read_r+0x1e>
 8002de4:	602b      	str	r3, [r5, #0]
 8002de6:	bd38      	pop	{r3, r4, r5, pc}
 8002de8:	20000aa4 	.word	0x20000aa4

08002dec <_malloc_usable_size_r>:
 8002dec:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002df0:	2800      	cmp	r0, #0
 8002df2:	f1a0 0004 	sub.w	r0, r0, #4
 8002df6:	bfbc      	itt	lt
 8002df8:	580b      	ldrlt	r3, [r1, r0]
 8002dfa:	18c0      	addlt	r0, r0, r3
 8002dfc:	4770      	bx	lr
	...

08002e00 <_init>:
 8002e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e02:	bf00      	nop
 8002e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e06:	bc08      	pop	{r3}
 8002e08:	469e      	mov	lr, r3
 8002e0a:	4770      	bx	lr

08002e0c <_fini>:
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0e:	bf00      	nop
 8002e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e12:	bc08      	pop	{r3}
 8002e14:	469e      	mov	lr, r3
 8002e16:	4770      	bx	lr
